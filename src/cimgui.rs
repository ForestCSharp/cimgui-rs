/* automatically generated by rust-bindgen */

pub const _SAL_VERSION : u32 = 20 ; pub const __SAL_H_VERSION : u32 = 180000000 ; pub const _USE_DECLSPECS_FOR_SAL : u32 = 0 ; pub const _USE_ATTRIBUTES_FOR_SAL : u32 = 0 ; pub const _CRT_PACKING : u32 = 8 ; pub const _HAS_EXCEPTIONS : u32 = 1 ; pub const _ARGMAX : u32 = 100 ; pub const _CRT_INT_MAX : u32 = 2147483647 ; pub const _CRT_FUNCTIONS_REQUIRED : u32 = 1 ; pub const _CRT_HAS_CXX17 : u32 = 0 ; pub const _ARM_WINAPI_PARTITION_DESKTOP_SDK_AVAILABLE : u32 = 1 ; pub const _CRT_BUILD_DESKTOP_APP : u32 = 1 ; pub const __STDC_SECURE_LIB__ : u32 = 200411 ; pub const __GOT_SECURE_LIB__ : u32 = 200411 ; pub const __STDC_WANT_SECURE_LIB__ : u32 = 1 ; pub const _SECURECRT_FILL_BUFFER_PATTERN : u32 = 254 ; pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES : u32 = 0 ; pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT : u32 = 0 ; pub const _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES : u32 = 1 ; pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY : u32 = 0 ; pub const _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY : u32 = 0 ; pub const _CRT_INTERNAL_STDIO_SYMBOL_PREFIX : & 'static [ u8 ; 1usize ] = b"\0" ; pub const _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION : u32 = 1 ; pub const _CRT_INTERNAL_PRINTF_STANDARD_SNPRINTF_BEHAVIOR : u32 = 2 ; pub const _CRT_INTERNAL_PRINTF_LEGACY_WIDE_SPECIFIERS : u32 = 4 ; pub const _CRT_INTERNAL_PRINTF_LEGACY_MSVCRT_COMPATIBILITY : u32 = 8 ; pub const _CRT_INTERNAL_PRINTF_LEGACY_THREE_DIGIT_EXPONENTS : u32 = 16 ; pub const _CRT_INTERNAL_SCANF_SECURECRT : u32 = 1 ; pub const _CRT_INTERNAL_SCANF_LEGACY_WIDE_SPECIFIERS : u32 = 2 ; pub const _CRT_INTERNAL_SCANF_LEGACY_MSVCRT_COMPATIBILITY : u32 = 4 ; pub const BUFSIZ : u32 = 512 ; pub const _NSTREAM_ : u32 = 512 ; pub const _IOB_ENTRIES : u32 = 3 ; pub const EOF : i32 = -1 ; pub const _IOFBF : u32 = 0 ; pub const _IOLBF : u32 = 64 ; pub const _IONBF : u32 = 4 ; pub const L_tmpnam : u32 = 260 ; pub const L_tmpnam_s : u32 = 260 ; pub const SEEK_CUR : u32 = 1 ; pub const SEEK_END : u32 = 2 ; pub const SEEK_SET : u32 = 0 ; pub const FILENAME_MAX : u32 = 260 ; pub const FOPEN_MAX : u32 = 20 ; pub const _SYS_OPEN : u32 = 20 ; pub const TMP_MAX : u32 = 2147483647 ; pub const TMP_MAX_S : u32 = 2147483647 ; pub const _TMP_MAX_S : u32 = 2147483647 ; pub const SYS_OPEN : u32 = 20 ; pub const WCHAR_MIN : u32 = 0 ; pub const WCHAR_MAX : u32 = 65535 ; pub const WINT_MIN : u32 = 0 ; pub const WINT_MAX : u32 = 65535 ; pub const __GNUC_VA_LIST : u32 = 1 ; pub const true_ : u32 = 1 ; pub const false_ : u32 = 0 ; pub const __bool_true_false_are_defined : u32 = 1 ; pub type va_list = * mut :: std :: os :: raw :: c_char ; extern "C" { pub fn __va_start ( arg1 : * mut va_list , ... ) ; } pub type __vcrt_bool = bool ; pub type wchar_t = :: std :: os :: raw :: c_ushort ; extern "C" { pub fn __security_init_cookie ( ) ; } extern "C" { pub fn __security_check_cookie ( _StackCookie : usize ) ; } extern "C" { pub fn __report_gsfailure ( _StackCookie : usize ) ; } extern "C" { # [ link_name = "\u{1}__security_cookie" ] pub static mut __security_cookie : usize ; } pub type __crt_bool = bool ; extern "C" { pub fn _invalid_parameter_noinfo ( ) ; } extern "C" { pub fn _invalid_parameter_noinfo_noreturn ( ) ; } extern "C" { pub fn _invoke_watson ( _Expression : * const wchar_t , _FunctionName : * const wchar_t , _FileName : * const wchar_t , _LineNo : :: std :: os :: raw :: c_uint , _Reserved : usize ) ; } pub type errno_t = :: std :: os :: raw :: c_int ; pub type wint_t = :: std :: os :: raw :: c_ushort ; pub type wctype_t = :: std :: os :: raw :: c_ushort ; pub type __time32_t = :: std :: os :: raw :: c_long ; pub type __time64_t = :: std :: os :: raw :: c_longlong ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct __crt_locale_data_public { pub _locale_pctype : * const :: std :: os :: raw :: c_ushort , pub _locale_mb_cur_max : :: std :: os :: raw :: c_int , pub _locale_lc_codepage : :: std :: os :: raw :: c_uint , } # [ test ] fn bindgen_test_layout___crt_locale_data_public ( ) { assert_eq ! ( :: std :: mem :: size_of :: < __crt_locale_data_public > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( __crt_locale_data_public ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < __crt_locale_data_public > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( __crt_locale_data_public ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __crt_locale_data_public > ( ) ) ) . _locale_pctype as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( __crt_locale_data_public ) , "::" , stringify ! ( _locale_pctype ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __crt_locale_data_public > ( ) ) ) . _locale_mb_cur_max as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( __crt_locale_data_public ) , "::" , stringify ! ( _locale_mb_cur_max ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __crt_locale_data_public > ( ) ) ) . _locale_lc_codepage as * const _ as usize } , 12usize , concat ! ( "Offset of field: " , stringify ! ( __crt_locale_data_public ) , "::" , stringify ! ( _locale_lc_codepage ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct __crt_locale_pointers { pub locinfo : * mut __crt_locale_data , pub mbcinfo : * mut __crt_multibyte_data , } # [ test ] fn bindgen_test_layout___crt_locale_pointers ( ) { assert_eq ! ( :: std :: mem :: size_of :: < __crt_locale_pointers > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( __crt_locale_pointers ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < __crt_locale_pointers > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( __crt_locale_pointers ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __crt_locale_pointers > ( ) ) ) . locinfo as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( __crt_locale_pointers ) , "::" , stringify ! ( locinfo ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __crt_locale_pointers > ( ) ) ) . mbcinfo as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( __crt_locale_pointers ) , "::" , stringify ! ( mbcinfo ) ) ) ; } pub type _locale_t = * mut __crt_locale_pointers ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _Mbstatet { pub _Wchar : :: std :: os :: raw :: c_ulong , pub _Byte : :: std :: os :: raw :: c_ushort , pub _State : :: std :: os :: raw :: c_ushort , } # [ test ] fn bindgen_test_layout__Mbstatet ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _Mbstatet > ( ) , 8usize , concat ! ( "Size of: " , stringify ! ( _Mbstatet ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _Mbstatet > ( ) , 4usize , concat ! ( "Alignment of " , stringify ! ( _Mbstatet ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _Mbstatet > ( ) ) ) . _Wchar as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( _Mbstatet ) , "::" , stringify ! ( _Wchar ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _Mbstatet > ( ) ) ) . _Byte as * const _ as usize } , 4usize , concat ! ( "Offset of field: " , stringify ! ( _Mbstatet ) , "::" , stringify ! ( _Byte ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _Mbstatet > ( ) ) ) . _State as * const _ as usize } , 6usize , concat ! ( "Offset of field: " , stringify ! ( _Mbstatet ) , "::" , stringify ! ( _State ) ) ) ; } pub type mbstate_t = _Mbstatet ; pub type time_t = __time64_t ; pub type rsize_t = usize ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _iobuf { pub _Placeholder : * mut :: std :: os :: raw :: c_void , } # [ test ] fn bindgen_test_layout__iobuf ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _iobuf > ( ) , 8usize , concat ! ( "Size of: " , stringify ! ( _iobuf ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _iobuf > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( _iobuf ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _iobuf > ( ) ) ) . _Placeholder as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( _iobuf ) , "::" , stringify ! ( _Placeholder ) ) ) ; } pub type FILE = _iobuf ; extern "C" { pub fn __acrt_iob_func ( _Ix : :: std :: os :: raw :: c_uint ) -> * mut FILE ; } extern "C" { pub fn fgetwc ( _Stream : * mut FILE ) -> wint_t ; } extern "C" { pub fn _fgetwchar ( ) -> wint_t ; } extern "C" { pub fn fputwc ( _Character : wchar_t , _Stream : * mut FILE ) -> wint_t ; } extern "C" { pub fn _fputwchar ( _Character : wchar_t ) -> wint_t ; } extern "C" { pub fn getwc ( _Stream : * mut FILE ) -> wint_t ; } extern "C" { pub fn getwchar ( ) -> wint_t ; } extern "C" { pub fn fgetws ( _Buffer : * mut wchar_t , _BufferCount : :: std :: os :: raw :: c_int , _Stream : * mut FILE ) -> * mut wchar_t ; } extern "C" { pub fn fputws ( _Buffer : * const wchar_t , _Stream : * mut FILE ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn _getws_s ( _Buffer : * mut wchar_t , _BufferCount : usize ) -> * mut wchar_t ; } extern "C" { pub fn putwc ( _Character : wchar_t , _Stream : * mut FILE ) -> wint_t ; } extern "C" { pub fn putwchar ( _Character : wchar_t ) -> wint_t ; } extern "C" { pub fn _putws ( _Buffer : * const wchar_t ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn ungetwc ( _Character : wint_t , _Stream : * mut FILE ) -> wint_t ; } extern "C" { pub fn _wfdopen ( _FileHandle : :: std :: os :: raw :: c_int , _Mode : * const wchar_t ) -> * mut FILE ; } extern "C" { pub fn _wfopen ( _FileName : * const wchar_t , _Mode : * const wchar_t ) -> * mut FILE ; } extern "C" { pub fn _wfopen_s ( _Stream : * mut * mut FILE , _FileName : * const wchar_t , _Mode : * const wchar_t ) -> errno_t ; } extern "C" { pub fn _wfreopen ( _FileName : * const wchar_t , _Mode : * const wchar_t , _OldStream : * mut FILE ) -> * mut FILE ; } extern "C" { pub fn _wfreopen_s ( _Stream : * mut * mut FILE , _FileName : * const wchar_t , _Mode : * const wchar_t , _OldStream : * mut FILE ) -> errno_t ; } extern "C" { pub fn _wfsopen ( _FileName : * const wchar_t , _Mode : * const wchar_t , _ShFlag : :: std :: os :: raw :: c_int ) -> * mut FILE ; } extern "C" { pub fn _wperror ( _ErrorMessage : * const wchar_t ) ; } extern "C" { pub fn _wpopen ( _Command : * const wchar_t , _Mode : * const wchar_t ) -> * mut FILE ; } extern "C" { pub fn _wremove ( _FileName : * const wchar_t ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn _wtempnam ( _Directory : * const wchar_t , _FilePrefix : * const wchar_t ) -> * mut wchar_t ; } extern "C" { pub fn _wtmpnam_s ( _Buffer : * mut wchar_t , _BufferCount : usize ) -> errno_t ; } extern "C" { pub fn _wtmpnam ( _Buffer : * mut wchar_t ) -> * mut wchar_t ; } extern "C" { pub fn _fgetwc_nolock ( _Stream : * mut FILE ) -> wint_t ; } extern "C" { pub fn _fputwc_nolock ( _Character : wchar_t , _Stream : * mut FILE ) -> wint_t ; } extern "C" { pub fn _getwc_nolock ( _Stream : * mut FILE ) -> wint_t ; } extern "C" { pub fn _putwc_nolock ( _Character : wchar_t , _Stream : * mut FILE ) -> wint_t ; } extern "C" { pub fn _ungetwc_nolock ( _Character : wint_t , _Stream : * mut FILE ) -> wint_t ; } extern "C" { pub fn __stdio_common_vfwprintf ( _Options : :: std :: os :: raw :: c_ulonglong , _Stream : * mut FILE , _Format : * const wchar_t , _Locale : _locale_t , _ArgList : va_list ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn __stdio_common_vfwprintf_s ( _Options : :: std :: os :: raw :: c_ulonglong , _Stream : * mut FILE , _Format : * const wchar_t , _Locale : _locale_t , _ArgList : va_list ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn __stdio_common_vfwprintf_p ( _Options : :: std :: os :: raw :: c_ulonglong , _Stream : * mut FILE , _Format : * const wchar_t , _Locale : _locale_t , _ArgList : va_list ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn __stdio_common_vfwscanf ( _Options : :: std :: os :: raw :: c_ulonglong , _Stream : * mut FILE , _Format : * const wchar_t , _Locale : _locale_t , _ArgList : va_list ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn __stdio_common_vswprintf ( _Options : :: std :: os :: raw :: c_ulonglong , _Buffer : * mut wchar_t , _BufferCount : usize , _Format : * const wchar_t , _Locale : _locale_t , _ArgList : va_list ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn __stdio_common_vswprintf_s ( _Options : :: std :: os :: raw :: c_ulonglong , _Buffer : * mut wchar_t , _BufferCount : usize , _Format : * const wchar_t , _Locale : _locale_t , _ArgList : va_list ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn __stdio_common_vsnwprintf_s ( _Options : :: std :: os :: raw :: c_ulonglong , _Buffer : * mut wchar_t , _BufferCount : usize , _MaxCount : usize , _Format : * const wchar_t , _Locale : _locale_t , _ArgList : va_list ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn __stdio_common_vswprintf_p ( _Options : :: std :: os :: raw :: c_ulonglong , _Buffer : * mut wchar_t , _BufferCount : usize , _Format : * const wchar_t , _Locale : _locale_t , _ArgList : va_list ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn __stdio_common_vswscanf ( _Options : :: std :: os :: raw :: c_ulonglong , _Buffer : * const wchar_t , _BufferCount : usize , _Format : * const wchar_t , _Locale : _locale_t , _ArgList : va_list ) -> :: std :: os :: raw :: c_int ; } pub type fpos_t = :: std :: os :: raw :: c_longlong ; extern "C" { pub fn _get_stream_buffer_pointers ( _Stream : * mut FILE , _Base : * mut * mut * mut :: std :: os :: raw :: c_char , _Pointer : * mut * mut * mut :: std :: os :: raw :: c_char , _Count : * mut * mut :: std :: os :: raw :: c_int ) -> errno_t ; } extern "C" { pub fn clearerr_s ( _Stream : * mut FILE ) -> errno_t ; } extern "C" { pub fn fopen_s ( _Stream : * mut * mut FILE , _FileName : * const :: std :: os :: raw :: c_char , _Mode : * const :: std :: os :: raw :: c_char ) -> errno_t ; } extern "C" { pub fn fread_s ( _Buffer : * mut :: std :: os :: raw :: c_void , _BufferSize : usize , _ElementSize : usize , _ElementCount : usize , _Stream : * mut FILE ) -> usize ; } extern "C" { pub fn freopen_s ( _Stream : * mut * mut FILE , _FileName : * const :: std :: os :: raw :: c_char , _Mode : * const :: std :: os :: raw :: c_char , _OldStream : * mut FILE ) -> errno_t ; } extern "C" { pub fn gets_s ( _Buffer : * mut :: std :: os :: raw :: c_char , _Size : rsize_t ) -> * mut :: std :: os :: raw :: c_char ; } extern "C" { pub fn tmpfile_s ( _Stream : * mut * mut FILE ) -> errno_t ; } extern "C" { pub fn tmpnam_s ( _Buffer : * mut :: std :: os :: raw :: c_char , _Size : rsize_t ) -> errno_t ; } extern "C" { pub fn clearerr ( _Stream : * mut FILE ) ; } extern "C" { pub fn fclose ( _Stream : * mut FILE ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn _fcloseall ( ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn _fdopen ( _FileHandle : :: std :: os :: raw :: c_int , _Mode : * const :: std :: os :: raw :: c_char ) -> * mut FILE ; } extern "C" { pub fn feof ( _Stream : * mut FILE ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn ferror ( _Stream : * mut FILE ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn fflush ( _Stream : * mut FILE ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn fgetc ( _Stream : * mut FILE ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn _fgetchar ( ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn fgetpos ( _Stream : * mut FILE , _Position : * mut fpos_t ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn fgets ( _Buffer : * mut :: std :: os :: raw :: c_char , _MaxCount : :: std :: os :: raw :: c_int , _Stream : * mut FILE ) -> * mut :: std :: os :: raw :: c_char ; } extern "C" { pub fn _fileno ( _Stream : * mut FILE ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn _flushall ( ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn fopen ( _FileName : * const :: std :: os :: raw :: c_char , _Mode : * const :: std :: os :: raw :: c_char ) -> * mut FILE ; } extern "C" { pub fn fputc ( _Character : :: std :: os :: raw :: c_int , _Stream : * mut FILE ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn _fputchar ( _Character : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn fputs ( _Buffer : * const :: std :: os :: raw :: c_char , _Stream : * mut FILE ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn fread ( _Buffer : * mut :: std :: os :: raw :: c_void , _ElementSize : usize , _ElementCount : usize , _Stream : * mut FILE ) -> :: std :: os :: raw :: c_ulonglong ; } extern "C" { pub fn freopen ( _FileName : * const :: std :: os :: raw :: c_char , _Mode : * const :: std :: os :: raw :: c_char , _Stream : * mut FILE ) -> * mut FILE ; } extern "C" { pub fn _fsopen ( _FileName : * const :: std :: os :: raw :: c_char , _Mode : * const :: std :: os :: raw :: c_char , _ShFlag : :: std :: os :: raw :: c_int ) -> * mut FILE ; } extern "C" { pub fn fsetpos ( _Stream : * mut FILE , _Position : * const fpos_t ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn fseek ( _Stream : * mut FILE , _Offset : :: std :: os :: raw :: c_long , _Origin : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn _fseeki64 ( _Stream : * mut FILE , _Offset : :: std :: os :: raw :: c_longlong , _Origin : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn ftell ( _Stream : * mut FILE ) -> :: std :: os :: raw :: c_long ; } extern "C" { pub fn _ftelli64 ( _Stream : * mut FILE ) -> :: std :: os :: raw :: c_longlong ; } extern "C" { pub fn fwrite ( _Buffer : * const :: std :: os :: raw :: c_void , _ElementSize : usize , _ElementCount : usize , _Stream : * mut FILE ) -> :: std :: os :: raw :: c_ulonglong ; } extern "C" { pub fn getc ( _Stream : * mut FILE ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn getchar ( ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn _getmaxstdio ( ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn _getw ( _Stream : * mut FILE ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn perror ( _ErrorMessage : * const :: std :: os :: raw :: c_char ) ; } extern "C" { pub fn _pclose ( _Stream : * mut FILE ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn _popen ( _Command : * const :: std :: os :: raw :: c_char , _Mode : * const :: std :: os :: raw :: c_char ) -> * mut FILE ; } extern "C" { pub fn putc ( _Character : :: std :: os :: raw :: c_int , _Stream : * mut FILE ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn putchar ( _Character : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn puts ( _Buffer : * const :: std :: os :: raw :: c_char ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn _putw ( _Word : :: std :: os :: raw :: c_int , _Stream : * mut FILE ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn remove ( _FileName : * const :: std :: os :: raw :: c_char ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn rename ( _OldFileName : * const :: std :: os :: raw :: c_char , _NewFileName : * const :: std :: os :: raw :: c_char ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn _unlink ( _FileName : * const :: std :: os :: raw :: c_char ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn unlink ( _FileName : * const :: std :: os :: raw :: c_char ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn rewind ( _Stream : * mut FILE ) ; } extern "C" { pub fn _rmtmp ( ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn setbuf ( _Stream : * mut FILE , _Buffer : * mut :: std :: os :: raw :: c_char ) ; } extern "C" { pub fn _setmaxstdio ( _Maximum : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn setvbuf ( _Stream : * mut FILE , _Buffer : * mut :: std :: os :: raw :: c_char , _Mode : :: std :: os :: raw :: c_int , _Size : usize ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn _tempnam ( _DirectoryName : * const :: std :: os :: raw :: c_char , _FilePrefix : * const :: std :: os :: raw :: c_char ) -> * mut :: std :: os :: raw :: c_char ; } extern "C" { pub fn tmpfile ( ) -> * mut FILE ; } extern "C" { pub fn tmpnam ( _Buffer : * mut :: std :: os :: raw :: c_char ) -> * mut :: std :: os :: raw :: c_char ; } extern "C" { pub fn ungetc ( _Character : :: std :: os :: raw :: c_int , _Stream : * mut FILE ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn _lock_file ( _Stream : * mut FILE ) ; } extern "C" { pub fn _unlock_file ( _Stream : * mut FILE ) ; } extern "C" { pub fn _fclose_nolock ( _Stream : * mut FILE ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn _fflush_nolock ( _Stream : * mut FILE ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn _fgetc_nolock ( _Stream : * mut FILE ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn _fputc_nolock ( _Character : :: std :: os :: raw :: c_int , _Stream : * mut FILE ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn _fread_nolock ( _Buffer : * mut :: std :: os :: raw :: c_void , _ElementSize : usize , _ElementCount : usize , _Stream : * mut FILE ) -> usize ; } extern "C" { pub fn _fread_nolock_s ( _Buffer : * mut :: std :: os :: raw :: c_void , _BufferSize : usize , _ElementSize : usize , _ElementCount : usize , _Stream : * mut FILE ) -> usize ; } extern "C" { pub fn _fseek_nolock ( _Stream : * mut FILE , _Offset : :: std :: os :: raw :: c_long , _Origin : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn _fseeki64_nolock ( _Stream : * mut FILE , _Offset : :: std :: os :: raw :: c_longlong , _Origin : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn _ftell_nolock ( _Stream : * mut FILE ) -> :: std :: os :: raw :: c_long ; } extern "C" { pub fn _ftelli64_nolock ( _Stream : * mut FILE ) -> :: std :: os :: raw :: c_longlong ; } extern "C" { pub fn _fwrite_nolock ( _Buffer : * const :: std :: os :: raw :: c_void , _ElementSize : usize , _ElementCount : usize , _Stream : * mut FILE ) -> usize ; } extern "C" { pub fn _getc_nolock ( _Stream : * mut FILE ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn _putc_nolock ( _Character : :: std :: os :: raw :: c_int , _Stream : * mut FILE ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn _ungetc_nolock ( _Character : :: std :: os :: raw :: c_int , _Stream : * mut FILE ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn __p__commode ( ) -> * mut :: std :: os :: raw :: c_int ; } extern "C" { pub fn __stdio_common_vfprintf ( _Options : :: std :: os :: raw :: c_ulonglong , _Stream : * mut FILE , _Format : * const :: std :: os :: raw :: c_char , _Locale : _locale_t , _ArgList : va_list ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn __stdio_common_vfprintf_s ( _Options : :: std :: os :: raw :: c_ulonglong , _Stream : * mut FILE , _Format : * const :: std :: os :: raw :: c_char , _Locale : _locale_t , _ArgList : va_list ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn __stdio_common_vfprintf_p ( _Options : :: std :: os :: raw :: c_ulonglong , _Stream : * mut FILE , _Format : * const :: std :: os :: raw :: c_char , _Locale : _locale_t , _ArgList : va_list ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn _set_printf_count_output ( _Value : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn _get_printf_count_output ( ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn __stdio_common_vfscanf ( _Options : :: std :: os :: raw :: c_ulonglong , _Stream : * mut FILE , _Format : * const :: std :: os :: raw :: c_char , _Locale : _locale_t , _Arglist : va_list ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn __stdio_common_vsprintf ( _Options : :: std :: os :: raw :: c_ulonglong , _Buffer : * mut :: std :: os :: raw :: c_char , _BufferCount : usize , _Format : * const :: std :: os :: raw :: c_char , _Locale : _locale_t , _ArgList : va_list ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn __stdio_common_vsprintf_s ( _Options : :: std :: os :: raw :: c_ulonglong , _Buffer : * mut :: std :: os :: raw :: c_char , _BufferCount : usize , _Format : * const :: std :: os :: raw :: c_char , _Locale : _locale_t , _ArgList : va_list ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn __stdio_common_vsnprintf_s ( _Options : :: std :: os :: raw :: c_ulonglong , _Buffer : * mut :: std :: os :: raw :: c_char , _BufferCount : usize , _MaxCount : usize , _Format : * const :: std :: os :: raw :: c_char , _Locale : _locale_t , _ArgList : va_list ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn __stdio_common_vsprintf_p ( _Options : :: std :: os :: raw :: c_ulonglong , _Buffer : * mut :: std :: os :: raw :: c_char , _BufferCount : usize , _Format : * const :: std :: os :: raw :: c_char , _Locale : _locale_t , _ArgList : va_list ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn __stdio_common_vsscanf ( _Options : :: std :: os :: raw :: c_ulonglong , _Buffer : * const :: std :: os :: raw :: c_char , _BufferCount : usize , _Format : * const :: std :: os :: raw :: c_char , _Locale : _locale_t , _ArgList : va_list ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn tempnam ( _Directory : * const :: std :: os :: raw :: c_char , _FilePrefix : * const :: std :: os :: raw :: c_char ) -> * mut :: std :: os :: raw :: c_char ; } extern "C" { pub fn fcloseall ( ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn fdopen ( _FileHandle : :: std :: os :: raw :: c_int , _Format : * const :: std :: os :: raw :: c_char ) -> * mut FILE ; } extern "C" { pub fn fgetchar ( ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn fileno ( _Stream : * mut FILE ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn flushall ( ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn fputchar ( _Ch : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn getw ( _Stream : * mut FILE ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn putw ( _Ch : :: std :: os :: raw :: c_int , _Stream : * mut FILE ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn rmtmp ( ) -> :: std :: os :: raw :: c_int ; } pub type int_least8_t = :: std :: os :: raw :: c_schar ; pub type int_least16_t = :: std :: os :: raw :: c_short ; pub type int_least32_t = :: std :: os :: raw :: c_int ; pub type int_least64_t = :: std :: os :: raw :: c_longlong ; pub type uint_least8_t = :: std :: os :: raw :: c_uchar ; pub type uint_least16_t = :: std :: os :: raw :: c_ushort ; pub type uint_least32_t = :: std :: os :: raw :: c_uint ; pub type uint_least64_t = :: std :: os :: raw :: c_ulonglong ; pub type int_fast8_t = :: std :: os :: raw :: c_schar ; pub type int_fast16_t = :: std :: os :: raw :: c_int ; pub type int_fast32_t = :: std :: os :: raw :: c_int ; pub type int_fast64_t = :: std :: os :: raw :: c_longlong ; pub type uint_fast8_t = :: std :: os :: raw :: c_uchar ; pub type uint_fast16_t = :: std :: os :: raw :: c_uint ; pub type uint_fast32_t = :: std :: os :: raw :: c_uint ; pub type uint_fast64_t = :: std :: os :: raw :: c_ulonglong ; pub type intmax_t = :: std :: os :: raw :: c_longlong ; pub type uintmax_t = :: std :: os :: raw :: c_ulonglong ; pub type __gnuc_va_list = __builtin_va_list ; pub type ImU64 = :: std :: os :: raw :: c_ulonglong ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct ImVec2_Simple { pub x : f32 , pub y : f32 , } # [ test ] fn bindgen_test_layout_ImVec2_Simple ( ) { assert_eq ! ( :: std :: mem :: size_of :: < ImVec2_Simple > ( ) , 8usize , concat ! ( "Size of: " , stringify ! ( ImVec2_Simple ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < ImVec2_Simple > ( ) , 4usize , concat ! ( "Alignment of " , stringify ! ( ImVec2_Simple ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImVec2_Simple > ( ) ) ) . x as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( ImVec2_Simple ) , "::" , stringify ! ( x ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImVec2_Simple > ( ) ) ) . y as * const _ as usize } , 4usize , concat ! ( "Offset of field: " , stringify ! ( ImVec2_Simple ) , "::" , stringify ! ( y ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct ImVec4_Simple { pub x : f32 , pub y : f32 , pub z : f32 , pub w : f32 , } # [ test ] fn bindgen_test_layout_ImVec4_Simple ( ) { assert_eq ! ( :: std :: mem :: size_of :: < ImVec4_Simple > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( ImVec4_Simple ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < ImVec4_Simple > ( ) , 4usize , concat ! ( "Alignment of " , stringify ! ( ImVec4_Simple ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImVec4_Simple > ( ) ) ) . x as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( ImVec4_Simple ) , "::" , stringify ! ( x ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImVec4_Simple > ( ) ) ) . y as * const _ as usize } , 4usize , concat ! ( "Offset of field: " , stringify ! ( ImVec4_Simple ) , "::" , stringify ! ( y ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImVec4_Simple > ( ) ) ) . z as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( ImVec4_Simple ) , "::" , stringify ! ( z ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImVec4_Simple > ( ) ) ) . w as * const _ as usize } , 12usize , concat ! ( "Offset of field: " , stringify ! ( ImVec4_Simple ) , "::" , stringify ! ( w ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct ImColor_Simple { pub Value : ImVec4_Simple , } # [ test ] fn bindgen_test_layout_ImColor_Simple ( ) { assert_eq ! ( :: std :: mem :: size_of :: < ImColor_Simple > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( ImColor_Simple ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < ImColor_Simple > ( ) , 4usize , concat ! ( "Alignment of " , stringify ! ( ImColor_Simple ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImColor_Simple > ( ) ) ) . Value as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( ImColor_Simple ) , "::" , stringify ! ( Value ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct ImGuiContext { _unused : [ u8 ; 0 ] , } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct ImDrawListSharedData { _unused : [ u8 ; 0 ] , } pub type ImTextureID = * mut :: std :: os :: raw :: c_void ; pub type ImGuiID = :: std :: os :: raw :: c_uint ; pub type ImWchar = :: std :: os :: raw :: c_ushort ; pub type ImGuiCol = :: std :: os :: raw :: c_int ; pub type ImGuiCond = :: std :: os :: raw :: c_int ; pub type ImGuiDataType = :: std :: os :: raw :: c_int ; pub type ImGuiDir = :: std :: os :: raw :: c_int ; pub type ImGuiKey = :: std :: os :: raw :: c_int ; pub type ImGuiNavInput = :: std :: os :: raw :: c_int ; pub type ImGuiMouseCursor = :: std :: os :: raw :: c_int ; pub type ImGuiStyleVar = :: std :: os :: raw :: c_int ; pub type ImDrawCornerFlags = :: std :: os :: raw :: c_int ; pub type ImDrawListFlags = :: std :: os :: raw :: c_int ; pub type ImFontAtlasFlags = :: std :: os :: raw :: c_int ; pub type ImGuiBackendFlags = :: std :: os :: raw :: c_int ; pub type ImGuiColorEditFlags = :: std :: os :: raw :: c_int ; pub type ImGuiColumnsFlags = :: std :: os :: raw :: c_int ; pub type ImGuiConfigFlags = :: std :: os :: raw :: c_int ; pub type ImGuiComboFlags = :: std :: os :: raw :: c_int ; pub type ImGuiDragDropFlags = :: std :: os :: raw :: c_int ; pub type ImGuiFocusedFlags = :: std :: os :: raw :: c_int ; pub type ImGuiHoveredFlags = :: std :: os :: raw :: c_int ; pub type ImGuiInputTextFlags = :: std :: os :: raw :: c_int ; pub type ImGuiSelectableFlags = :: std :: os :: raw :: c_int ; pub type ImGuiTabBarFlags = :: std :: os :: raw :: c_int ; pub type ImGuiTabItemFlags = :: std :: os :: raw :: c_int ; pub type ImGuiTreeNodeFlags = :: std :: os :: raw :: c_int ; pub type ImGuiWindowFlags = :: std :: os :: raw :: c_int ; pub type ImGuiInputTextCallback = :: std :: option :: Option < unsafe extern "C" fn ( data : * mut ImGuiInputTextCallbackData ) -> :: std :: os :: raw :: c_int > ; pub type ImGuiSizeCallback = :: std :: option :: Option < unsafe extern "C" fn ( data : * mut ImGuiSizeCallbackData ) > ; pub type ImS8 = :: std :: os :: raw :: c_schar ; pub type ImU8 = :: std :: os :: raw :: c_uchar ; pub type ImS16 = :: std :: os :: raw :: c_short ; pub type ImU16 = :: std :: os :: raw :: c_ushort ; pub type ImS32 = :: std :: os :: raw :: c_int ; pub type ImU32 = :: std :: os :: raw :: c_uint ; pub type ImS64 = i64 ; pub type ImDrawCallback = :: std :: option :: Option < unsafe extern "C" fn ( parent_list : * const ImDrawList , cmd : * const ImDrawCmd ) > ; pub type ImDrawIdx = :: std :: os :: raw :: c_ushort ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct ImVector { pub Size : :: std :: os :: raw :: c_int , pub Capacity : :: std :: os :: raw :: c_int , pub Data : * mut :: std :: os :: raw :: c_void , } # [ test ] fn bindgen_test_layout_ImVector ( ) { assert_eq ! ( :: std :: mem :: size_of :: < ImVector > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( ImVector ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < ImVector > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( ImVector ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImVector > ( ) ) ) . Size as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( ImVector ) , "::" , stringify ! ( Size ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImVector > ( ) ) ) . Capacity as * const _ as usize } , 4usize , concat ! ( "Offset of field: " , stringify ! ( ImVector ) , "::" , stringify ! ( Capacity ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImVector > ( ) ) ) . Data as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( ImVector ) , "::" , stringify ! ( Data ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct ImVector_float { pub Size : :: std :: os :: raw :: c_int , pub Capacity : :: std :: os :: raw :: c_int , pub Data : * mut f32 , } # [ test ] fn bindgen_test_layout_ImVector_float ( ) { assert_eq ! ( :: std :: mem :: size_of :: < ImVector_float > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( ImVector_float ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < ImVector_float > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( ImVector_float ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImVector_float > ( ) ) ) . Size as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( ImVector_float ) , "::" , stringify ! ( Size ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImVector_float > ( ) ) ) . Capacity as * const _ as usize } , 4usize , concat ! ( "Offset of field: " , stringify ! ( ImVector_float ) , "::" , stringify ! ( Capacity ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImVector_float > ( ) ) ) . Data as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( ImVector_float ) , "::" , stringify ! ( Data ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct ImVector_ImWchar { pub Size : :: std :: os :: raw :: c_int , pub Capacity : :: std :: os :: raw :: c_int , pub Data : * mut ImWchar , } # [ test ] fn bindgen_test_layout_ImVector_ImWchar ( ) { assert_eq ! ( :: std :: mem :: size_of :: < ImVector_ImWchar > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( ImVector_ImWchar ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < ImVector_ImWchar > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( ImVector_ImWchar ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImVector_ImWchar > ( ) ) ) . Size as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( ImVector_ImWchar ) , "::" , stringify ! ( Size ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImVector_ImWchar > ( ) ) ) . Capacity as * const _ as usize } , 4usize , concat ! ( "Offset of field: " , stringify ! ( ImVector_ImWchar ) , "::" , stringify ! ( Capacity ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImVector_ImWchar > ( ) ) ) . Data as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( ImVector_ImWchar ) , "::" , stringify ! ( Data ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct ImVector_ImFontConfig { pub Size : :: std :: os :: raw :: c_int , pub Capacity : :: std :: os :: raw :: c_int , pub Data : * mut ImFontConfig , } # [ test ] fn bindgen_test_layout_ImVector_ImFontConfig ( ) { assert_eq ! ( :: std :: mem :: size_of :: < ImVector_ImFontConfig > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( ImVector_ImFontConfig ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < ImVector_ImFontConfig > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( ImVector_ImFontConfig ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImVector_ImFontConfig > ( ) ) ) . Size as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( ImVector_ImFontConfig ) , "::" , stringify ! ( Size ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImVector_ImFontConfig > ( ) ) ) . Capacity as * const _ as usize } , 4usize , concat ! ( "Offset of field: " , stringify ! ( ImVector_ImFontConfig ) , "::" , stringify ! ( Capacity ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImVector_ImFontConfig > ( ) ) ) . Data as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( ImVector_ImFontConfig ) , "::" , stringify ! ( Data ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct ImVector_ImFontGlyph { pub Size : :: std :: os :: raw :: c_int , pub Capacity : :: std :: os :: raw :: c_int , pub Data : * mut ImFontGlyph , } # [ test ] fn bindgen_test_layout_ImVector_ImFontGlyph ( ) { assert_eq ! ( :: std :: mem :: size_of :: < ImVector_ImFontGlyph > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( ImVector_ImFontGlyph ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < ImVector_ImFontGlyph > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( ImVector_ImFontGlyph ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImVector_ImFontGlyph > ( ) ) ) . Size as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( ImVector_ImFontGlyph ) , "::" , stringify ! ( Size ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImVector_ImFontGlyph > ( ) ) ) . Capacity as * const _ as usize } , 4usize , concat ! ( "Offset of field: " , stringify ! ( ImVector_ImFontGlyph ) , "::" , stringify ! ( Capacity ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImVector_ImFontGlyph > ( ) ) ) . Data as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( ImVector_ImFontGlyph ) , "::" , stringify ! ( Data ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct ImVector_TextRange { pub Size : :: std :: os :: raw :: c_int , pub Capacity : :: std :: os :: raw :: c_int , pub Data : * mut TextRange , } # [ test ] fn bindgen_test_layout_ImVector_TextRange ( ) { assert_eq ! ( :: std :: mem :: size_of :: < ImVector_TextRange > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( ImVector_TextRange ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < ImVector_TextRange > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( ImVector_TextRange ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImVector_TextRange > ( ) ) ) . Size as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( ImVector_TextRange ) , "::" , stringify ! ( Size ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImVector_TextRange > ( ) ) ) . Capacity as * const _ as usize } , 4usize , concat ! ( "Offset of field: " , stringify ! ( ImVector_TextRange ) , "::" , stringify ! ( Capacity ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImVector_TextRange > ( ) ) ) . Data as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( ImVector_TextRange ) , "::" , stringify ! ( Data ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct ImVector_CustomRect { pub Size : :: std :: os :: raw :: c_int , pub Capacity : :: std :: os :: raw :: c_int , pub Data : * mut CustomRect , } # [ test ] fn bindgen_test_layout_ImVector_CustomRect ( ) { assert_eq ! ( :: std :: mem :: size_of :: < ImVector_CustomRect > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( ImVector_CustomRect ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < ImVector_CustomRect > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( ImVector_CustomRect ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImVector_CustomRect > ( ) ) ) . Size as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( ImVector_CustomRect ) , "::" , stringify ! ( Size ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImVector_CustomRect > ( ) ) ) . Capacity as * const _ as usize } , 4usize , concat ! ( "Offset of field: " , stringify ! ( ImVector_CustomRect ) , "::" , stringify ! ( Capacity ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImVector_CustomRect > ( ) ) ) . Data as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( ImVector_CustomRect ) , "::" , stringify ! ( Data ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct ImVector_ImDrawChannel { pub Size : :: std :: os :: raw :: c_int , pub Capacity : :: std :: os :: raw :: c_int , pub Data : * mut ImDrawChannel , } # [ test ] fn bindgen_test_layout_ImVector_ImDrawChannel ( ) { assert_eq ! ( :: std :: mem :: size_of :: < ImVector_ImDrawChannel > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( ImVector_ImDrawChannel ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < ImVector_ImDrawChannel > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( ImVector_ImDrawChannel ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImVector_ImDrawChannel > ( ) ) ) . Size as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( ImVector_ImDrawChannel ) , "::" , stringify ! ( Size ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImVector_ImDrawChannel > ( ) ) ) . Capacity as * const _ as usize } , 4usize , concat ! ( "Offset of field: " , stringify ! ( ImVector_ImDrawChannel ) , "::" , stringify ! ( Capacity ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImVector_ImDrawChannel > ( ) ) ) . Data as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( ImVector_ImDrawChannel ) , "::" , stringify ! ( Data ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct ImVector_char { pub Size : :: std :: os :: raw :: c_int , pub Capacity : :: std :: os :: raw :: c_int , pub Data : * mut :: std :: os :: raw :: c_char , } # [ test ] fn bindgen_test_layout_ImVector_char ( ) { assert_eq ! ( :: std :: mem :: size_of :: < ImVector_char > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( ImVector_char ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < ImVector_char > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( ImVector_char ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImVector_char > ( ) ) ) . Size as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( ImVector_char ) , "::" , stringify ! ( Size ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImVector_char > ( ) ) ) . Capacity as * const _ as usize } , 4usize , concat ! ( "Offset of field: " , stringify ! ( ImVector_char ) , "::" , stringify ! ( Capacity ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImVector_char > ( ) ) ) . Data as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( ImVector_char ) , "::" , stringify ! ( Data ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct ImVector_ImTextureID { pub Size : :: std :: os :: raw :: c_int , pub Capacity : :: std :: os :: raw :: c_int , pub Data : * mut ImTextureID , } # [ test ] fn bindgen_test_layout_ImVector_ImTextureID ( ) { assert_eq ! ( :: std :: mem :: size_of :: < ImVector_ImTextureID > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( ImVector_ImTextureID ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < ImVector_ImTextureID > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( ImVector_ImTextureID ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImVector_ImTextureID > ( ) ) ) . Size as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( ImVector_ImTextureID ) , "::" , stringify ! ( Size ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImVector_ImTextureID > ( ) ) ) . Capacity as * const _ as usize } , 4usize , concat ! ( "Offset of field: " , stringify ! ( ImVector_ImTextureID ) , "::" , stringify ! ( Capacity ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImVector_ImTextureID > ( ) ) ) . Data as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( ImVector_ImTextureID ) , "::" , stringify ! ( Data ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct ImVector_ImDrawVert { pub Size : :: std :: os :: raw :: c_int , pub Capacity : :: std :: os :: raw :: c_int , pub Data : * mut ImDrawVert , } # [ test ] fn bindgen_test_layout_ImVector_ImDrawVert ( ) { assert_eq ! ( :: std :: mem :: size_of :: < ImVector_ImDrawVert > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( ImVector_ImDrawVert ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < ImVector_ImDrawVert > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( ImVector_ImDrawVert ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImVector_ImDrawVert > ( ) ) ) . Size as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( ImVector_ImDrawVert ) , "::" , stringify ! ( Size ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImVector_ImDrawVert > ( ) ) ) . Capacity as * const _ as usize } , 4usize , concat ! ( "Offset of field: " , stringify ! ( ImVector_ImDrawVert ) , "::" , stringify ! ( Capacity ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImVector_ImDrawVert > ( ) ) ) . Data as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( ImVector_ImDrawVert ) , "::" , stringify ! ( Data ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct ImVector_int { pub Size : :: std :: os :: raw :: c_int , pub Capacity : :: std :: os :: raw :: c_int , pub Data : * mut :: std :: os :: raw :: c_int , } # [ test ] fn bindgen_test_layout_ImVector_int ( ) { assert_eq ! ( :: std :: mem :: size_of :: < ImVector_int > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( ImVector_int ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < ImVector_int > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( ImVector_int ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImVector_int > ( ) ) ) . Size as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( ImVector_int ) , "::" , stringify ! ( Size ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImVector_int > ( ) ) ) . Capacity as * const _ as usize } , 4usize , concat ! ( "Offset of field: " , stringify ! ( ImVector_int ) , "::" , stringify ! ( Capacity ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImVector_int > ( ) ) ) . Data as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( ImVector_int ) , "::" , stringify ! ( Data ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct ImVector_Pair { pub Size : :: std :: os :: raw :: c_int , pub Capacity : :: std :: os :: raw :: c_int , pub Data : * mut Pair , } # [ test ] fn bindgen_test_layout_ImVector_Pair ( ) { assert_eq ! ( :: std :: mem :: size_of :: < ImVector_Pair > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( ImVector_Pair ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < ImVector_Pair > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( ImVector_Pair ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImVector_Pair > ( ) ) ) . Size as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( ImVector_Pair ) , "::" , stringify ! ( Size ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImVector_Pair > ( ) ) ) . Capacity as * const _ as usize } , 4usize , concat ! ( "Offset of field: " , stringify ! ( ImVector_Pair ) , "::" , stringify ! ( Capacity ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImVector_Pair > ( ) ) ) . Data as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( ImVector_Pair ) , "::" , stringify ! ( Data ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct ImVector_ImFontPtr { pub Size : :: std :: os :: raw :: c_int , pub Capacity : :: std :: os :: raw :: c_int , pub Data : * mut * mut ImFont , } # [ test ] fn bindgen_test_layout_ImVector_ImFontPtr ( ) { assert_eq ! ( :: std :: mem :: size_of :: < ImVector_ImFontPtr > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( ImVector_ImFontPtr ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < ImVector_ImFontPtr > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( ImVector_ImFontPtr ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImVector_ImFontPtr > ( ) ) ) . Size as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( ImVector_ImFontPtr ) , "::" , stringify ! ( Size ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImVector_ImFontPtr > ( ) ) ) . Capacity as * const _ as usize } , 4usize , concat ! ( "Offset of field: " , stringify ! ( ImVector_ImFontPtr ) , "::" , stringify ! ( Capacity ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImVector_ImFontPtr > ( ) ) ) . Data as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( ImVector_ImFontPtr ) , "::" , stringify ! ( Data ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct ImVector_ImVec4 { pub Size : :: std :: os :: raw :: c_int , pub Capacity : :: std :: os :: raw :: c_int , pub Data : * mut ImVec4 , } # [ test ] fn bindgen_test_layout_ImVector_ImVec4 ( ) { assert_eq ! ( :: std :: mem :: size_of :: < ImVector_ImVec4 > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( ImVector_ImVec4 ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < ImVector_ImVec4 > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( ImVector_ImVec4 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImVector_ImVec4 > ( ) ) ) . Size as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( ImVector_ImVec4 ) , "::" , stringify ! ( Size ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImVector_ImVec4 > ( ) ) ) . Capacity as * const _ as usize } , 4usize , concat ! ( "Offset of field: " , stringify ! ( ImVector_ImVec4 ) , "::" , stringify ! ( Capacity ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImVector_ImVec4 > ( ) ) ) . Data as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( ImVector_ImVec4 ) , "::" , stringify ! ( Data ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct ImVector_ImDrawCmd { pub Size : :: std :: os :: raw :: c_int , pub Capacity : :: std :: os :: raw :: c_int , pub Data : * mut ImDrawCmd , } # [ test ] fn bindgen_test_layout_ImVector_ImDrawCmd ( ) { assert_eq ! ( :: std :: mem :: size_of :: < ImVector_ImDrawCmd > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( ImVector_ImDrawCmd ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < ImVector_ImDrawCmd > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( ImVector_ImDrawCmd ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImVector_ImDrawCmd > ( ) ) ) . Size as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( ImVector_ImDrawCmd ) , "::" , stringify ! ( Size ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImVector_ImDrawCmd > ( ) ) ) . Capacity as * const _ as usize } , 4usize , concat ! ( "Offset of field: " , stringify ! ( ImVector_ImDrawCmd ) , "::" , stringify ! ( Capacity ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImVector_ImDrawCmd > ( ) ) ) . Data as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( ImVector_ImDrawCmd ) , "::" , stringify ! ( Data ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct ImVector_ImDrawIdx { pub Size : :: std :: os :: raw :: c_int , pub Capacity : :: std :: os :: raw :: c_int , pub Data : * mut ImDrawIdx , } # [ test ] fn bindgen_test_layout_ImVector_ImDrawIdx ( ) { assert_eq ! ( :: std :: mem :: size_of :: < ImVector_ImDrawIdx > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( ImVector_ImDrawIdx ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < ImVector_ImDrawIdx > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( ImVector_ImDrawIdx ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImVector_ImDrawIdx > ( ) ) ) . Size as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( ImVector_ImDrawIdx ) , "::" , stringify ! ( Size ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImVector_ImDrawIdx > ( ) ) ) . Capacity as * const _ as usize } , 4usize , concat ! ( "Offset of field: " , stringify ! ( ImVector_ImDrawIdx ) , "::" , stringify ! ( Capacity ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImVector_ImDrawIdx > ( ) ) ) . Data as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( ImVector_ImDrawIdx ) , "::" , stringify ! ( Data ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct ImVector_ImVec2 { pub Size : :: std :: os :: raw :: c_int , pub Capacity : :: std :: os :: raw :: c_int , pub Data : * mut ImVec2 , } # [ test ] fn bindgen_test_layout_ImVector_ImVec2 ( ) { assert_eq ! ( :: std :: mem :: size_of :: < ImVector_ImVec2 > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( ImVector_ImVec2 ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < ImVector_ImVec2 > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( ImVector_ImVec2 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImVector_ImVec2 > ( ) ) ) . Size as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( ImVector_ImVec2 ) , "::" , stringify ! ( Size ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImVector_ImVec2 > ( ) ) ) . Capacity as * const _ as usize } , 4usize , concat ! ( "Offset of field: " , stringify ! ( ImVector_ImVec2 ) , "::" , stringify ! ( Capacity ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImVector_ImVec2 > ( ) ) ) . Data as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( ImVector_ImVec2 ) , "::" , stringify ! ( Data ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct ImVec2 { pub x : f32 , pub y : f32 , } # [ test ] fn bindgen_test_layout_ImVec2 ( ) { assert_eq ! ( :: std :: mem :: size_of :: < ImVec2 > ( ) , 8usize , concat ! ( "Size of: " , stringify ! ( ImVec2 ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < ImVec2 > ( ) , 4usize , concat ! ( "Alignment of " , stringify ! ( ImVec2 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImVec2 > ( ) ) ) . x as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( ImVec2 ) , "::" , stringify ! ( x ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImVec2 > ( ) ) ) . y as * const _ as usize } , 4usize , concat ! ( "Offset of field: " , stringify ! ( ImVec2 ) , "::" , stringify ! ( y ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct ImVec4 { pub x : f32 , pub y : f32 , pub z : f32 , pub w : f32 , } # [ test ] fn bindgen_test_layout_ImVec4 ( ) { assert_eq ! ( :: std :: mem :: size_of :: < ImVec4 > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( ImVec4 ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < ImVec4 > ( ) , 4usize , concat ! ( "Alignment of " , stringify ! ( ImVec4 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImVec4 > ( ) ) ) . x as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( ImVec4 ) , "::" , stringify ! ( x ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImVec4 > ( ) ) ) . y as * const _ as usize } , 4usize , concat ! ( "Offset of field: " , stringify ! ( ImVec4 ) , "::" , stringify ! ( y ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImVec4 > ( ) ) ) . z as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( ImVec4 ) , "::" , stringify ! ( z ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImVec4 > ( ) ) ) . w as * const _ as usize } , 12usize , concat ! ( "Offset of field: " , stringify ! ( ImVec4 ) , "::" , stringify ! ( w ) ) ) ; } pub const ImGuiWindowFlags__ImGuiWindowFlags_None : ImGuiWindowFlags_ = 0 ; pub const ImGuiWindowFlags__ImGuiWindowFlags_NoTitleBar : ImGuiWindowFlags_ = 1 ; pub const ImGuiWindowFlags__ImGuiWindowFlags_NoResize : ImGuiWindowFlags_ = 2 ; pub const ImGuiWindowFlags__ImGuiWindowFlags_NoMove : ImGuiWindowFlags_ = 4 ; pub const ImGuiWindowFlags__ImGuiWindowFlags_NoScrollbar : ImGuiWindowFlags_ = 8 ; pub const ImGuiWindowFlags__ImGuiWindowFlags_NoScrollWithMouse : ImGuiWindowFlags_ = 16 ; pub const ImGuiWindowFlags__ImGuiWindowFlags_NoCollapse : ImGuiWindowFlags_ = 32 ; pub const ImGuiWindowFlags__ImGuiWindowFlags_AlwaysAutoResize : ImGuiWindowFlags_ = 64 ; pub const ImGuiWindowFlags__ImGuiWindowFlags_NoBackground : ImGuiWindowFlags_ = 128 ; pub const ImGuiWindowFlags__ImGuiWindowFlags_NoSavedSettings : ImGuiWindowFlags_ = 256 ; pub const ImGuiWindowFlags__ImGuiWindowFlags_NoMouseInputs : ImGuiWindowFlags_ = 512 ; pub const ImGuiWindowFlags__ImGuiWindowFlags_MenuBar : ImGuiWindowFlags_ = 1024 ; pub const ImGuiWindowFlags__ImGuiWindowFlags_HorizontalScrollbar : ImGuiWindowFlags_ = 2048 ; pub const ImGuiWindowFlags__ImGuiWindowFlags_NoFocusOnAppearing : ImGuiWindowFlags_ = 4096 ; pub const ImGuiWindowFlags__ImGuiWindowFlags_NoBringToFrontOnFocus : ImGuiWindowFlags_ = 8192 ; pub const ImGuiWindowFlags__ImGuiWindowFlags_AlwaysVerticalScrollbar : ImGuiWindowFlags_ = 16384 ; pub const ImGuiWindowFlags__ImGuiWindowFlags_AlwaysHorizontalScrollbar : ImGuiWindowFlags_ = 32768 ; pub const ImGuiWindowFlags__ImGuiWindowFlags_AlwaysUseWindowPadding : ImGuiWindowFlags_ = 65536 ; pub const ImGuiWindowFlags__ImGuiWindowFlags_NoNavInputs : ImGuiWindowFlags_ = 262144 ; pub const ImGuiWindowFlags__ImGuiWindowFlags_NoNavFocus : ImGuiWindowFlags_ = 524288 ; pub const ImGuiWindowFlags__ImGuiWindowFlags_UnsavedDocument : ImGuiWindowFlags_ = 1048576 ; pub const ImGuiWindowFlags__ImGuiWindowFlags_NoNav : ImGuiWindowFlags_ = 786432 ; pub const ImGuiWindowFlags__ImGuiWindowFlags_NoDecoration : ImGuiWindowFlags_ = 43 ; pub const ImGuiWindowFlags__ImGuiWindowFlags_NoInputs : ImGuiWindowFlags_ = 786944 ; pub const ImGuiWindowFlags__ImGuiWindowFlags_NavFlattened : ImGuiWindowFlags_ = 8388608 ; pub const ImGuiWindowFlags__ImGuiWindowFlags_ChildWindow : ImGuiWindowFlags_ = 16777216 ; pub const ImGuiWindowFlags__ImGuiWindowFlags_Tooltip : ImGuiWindowFlags_ = 33554432 ; pub const ImGuiWindowFlags__ImGuiWindowFlags_Popup : ImGuiWindowFlags_ = 67108864 ; pub const ImGuiWindowFlags__ImGuiWindowFlags_Modal : ImGuiWindowFlags_ = 134217728 ; pub const ImGuiWindowFlags__ImGuiWindowFlags_ChildMenu : ImGuiWindowFlags_ = 268435456 ; pub type ImGuiWindowFlags_ = i32 ; pub const ImGuiInputTextFlags__ImGuiInputTextFlags_None : ImGuiInputTextFlags_ = 0 ; pub const ImGuiInputTextFlags__ImGuiInputTextFlags_CharsDecimal : ImGuiInputTextFlags_ = 1 ; pub const ImGuiInputTextFlags__ImGuiInputTextFlags_CharsHexadecimal : ImGuiInputTextFlags_ = 2 ; pub const ImGuiInputTextFlags__ImGuiInputTextFlags_CharsUppercase : ImGuiInputTextFlags_ = 4 ; pub const ImGuiInputTextFlags__ImGuiInputTextFlags_CharsNoBlank : ImGuiInputTextFlags_ = 8 ; pub const ImGuiInputTextFlags__ImGuiInputTextFlags_AutoSelectAll : ImGuiInputTextFlags_ = 16 ; pub const ImGuiInputTextFlags__ImGuiInputTextFlags_EnterReturnsTrue : ImGuiInputTextFlags_ = 32 ; pub const ImGuiInputTextFlags__ImGuiInputTextFlags_CallbackCompletion : ImGuiInputTextFlags_ = 64 ; pub const ImGuiInputTextFlags__ImGuiInputTextFlags_CallbackHistory : ImGuiInputTextFlags_ = 128 ; pub const ImGuiInputTextFlags__ImGuiInputTextFlags_CallbackAlways : ImGuiInputTextFlags_ = 256 ; pub const ImGuiInputTextFlags__ImGuiInputTextFlags_CallbackCharFilter : ImGuiInputTextFlags_ = 512 ; pub const ImGuiInputTextFlags__ImGuiInputTextFlags_AllowTabInput : ImGuiInputTextFlags_ = 1024 ; pub const ImGuiInputTextFlags__ImGuiInputTextFlags_CtrlEnterForNewLine : ImGuiInputTextFlags_ = 2048 ; pub const ImGuiInputTextFlags__ImGuiInputTextFlags_NoHorizontalScroll : ImGuiInputTextFlags_ = 4096 ; pub const ImGuiInputTextFlags__ImGuiInputTextFlags_AlwaysInsertMode : ImGuiInputTextFlags_ = 8192 ; pub const ImGuiInputTextFlags__ImGuiInputTextFlags_ReadOnly : ImGuiInputTextFlags_ = 16384 ; pub const ImGuiInputTextFlags__ImGuiInputTextFlags_Password : ImGuiInputTextFlags_ = 32768 ; pub const ImGuiInputTextFlags__ImGuiInputTextFlags_NoUndoRedo : ImGuiInputTextFlags_ = 65536 ; pub const ImGuiInputTextFlags__ImGuiInputTextFlags_CharsScientific : ImGuiInputTextFlags_ = 131072 ; pub const ImGuiInputTextFlags__ImGuiInputTextFlags_CallbackResize : ImGuiInputTextFlags_ = 262144 ; pub const ImGuiInputTextFlags__ImGuiInputTextFlags_Multiline : ImGuiInputTextFlags_ = 1048576 ; pub type ImGuiInputTextFlags_ = i32 ; pub const ImGuiTreeNodeFlags__ImGuiTreeNodeFlags_None : ImGuiTreeNodeFlags_ = 0 ; pub const ImGuiTreeNodeFlags__ImGuiTreeNodeFlags_Selected : ImGuiTreeNodeFlags_ = 1 ; pub const ImGuiTreeNodeFlags__ImGuiTreeNodeFlags_Framed : ImGuiTreeNodeFlags_ = 2 ; pub const ImGuiTreeNodeFlags__ImGuiTreeNodeFlags_AllowItemOverlap : ImGuiTreeNodeFlags_ = 4 ; pub const ImGuiTreeNodeFlags__ImGuiTreeNodeFlags_NoTreePushOnOpen : ImGuiTreeNodeFlags_ = 8 ; pub const ImGuiTreeNodeFlags__ImGuiTreeNodeFlags_NoAutoOpenOnLog : ImGuiTreeNodeFlags_ = 16 ; pub const ImGuiTreeNodeFlags__ImGuiTreeNodeFlags_DefaultOpen : ImGuiTreeNodeFlags_ = 32 ; pub const ImGuiTreeNodeFlags__ImGuiTreeNodeFlags_OpenOnDoubleClick : ImGuiTreeNodeFlags_ = 64 ; pub const ImGuiTreeNodeFlags__ImGuiTreeNodeFlags_OpenOnArrow : ImGuiTreeNodeFlags_ = 128 ; pub const ImGuiTreeNodeFlags__ImGuiTreeNodeFlags_Leaf : ImGuiTreeNodeFlags_ = 256 ; pub const ImGuiTreeNodeFlags__ImGuiTreeNodeFlags_Bullet : ImGuiTreeNodeFlags_ = 512 ; pub const ImGuiTreeNodeFlags__ImGuiTreeNodeFlags_FramePadding : ImGuiTreeNodeFlags_ = 1024 ; pub const ImGuiTreeNodeFlags__ImGuiTreeNodeFlags_NavLeftJumpsBackHere : ImGuiTreeNodeFlags_ = 8192 ; pub const ImGuiTreeNodeFlags__ImGuiTreeNodeFlags_CollapsingHeader : ImGuiTreeNodeFlags_ = 26 ; pub type ImGuiTreeNodeFlags_ = i32 ; pub const ImGuiSelectableFlags__ImGuiSelectableFlags_None : ImGuiSelectableFlags_ = 0 ; pub const ImGuiSelectableFlags__ImGuiSelectableFlags_DontClosePopups : ImGuiSelectableFlags_ = 1 ; pub const ImGuiSelectableFlags__ImGuiSelectableFlags_SpanAllColumns : ImGuiSelectableFlags_ = 2 ; pub const ImGuiSelectableFlags__ImGuiSelectableFlags_AllowDoubleClick : ImGuiSelectableFlags_ = 4 ; pub const ImGuiSelectableFlags__ImGuiSelectableFlags_Disabled : ImGuiSelectableFlags_ = 8 ; pub type ImGuiSelectableFlags_ = i32 ; pub const ImGuiComboFlags__ImGuiComboFlags_None : ImGuiComboFlags_ = 0 ; pub const ImGuiComboFlags__ImGuiComboFlags_PopupAlignLeft : ImGuiComboFlags_ = 1 ; pub const ImGuiComboFlags__ImGuiComboFlags_HeightSmall : ImGuiComboFlags_ = 2 ; pub const ImGuiComboFlags__ImGuiComboFlags_HeightRegular : ImGuiComboFlags_ = 4 ; pub const ImGuiComboFlags__ImGuiComboFlags_HeightLarge : ImGuiComboFlags_ = 8 ; pub const ImGuiComboFlags__ImGuiComboFlags_HeightLargest : ImGuiComboFlags_ = 16 ; pub const ImGuiComboFlags__ImGuiComboFlags_NoArrowButton : ImGuiComboFlags_ = 32 ; pub const ImGuiComboFlags__ImGuiComboFlags_NoPreview : ImGuiComboFlags_ = 64 ; pub const ImGuiComboFlags__ImGuiComboFlags_HeightMask_ : ImGuiComboFlags_ = 30 ; pub type ImGuiComboFlags_ = i32 ; pub const ImGuiTabBarFlags__ImGuiTabBarFlags_None : ImGuiTabBarFlags_ = 0 ; pub const ImGuiTabBarFlags__ImGuiTabBarFlags_Reorderable : ImGuiTabBarFlags_ = 1 ; pub const ImGuiTabBarFlags__ImGuiTabBarFlags_AutoSelectNewTabs : ImGuiTabBarFlags_ = 2 ; pub const ImGuiTabBarFlags__ImGuiTabBarFlags_TabListPopupButton : ImGuiTabBarFlags_ = 4 ; pub const ImGuiTabBarFlags__ImGuiTabBarFlags_NoCloseWithMiddleMouseButton : ImGuiTabBarFlags_ = 8 ; pub const ImGuiTabBarFlags__ImGuiTabBarFlags_NoTabListScrollingButtons : ImGuiTabBarFlags_ = 16 ; pub const ImGuiTabBarFlags__ImGuiTabBarFlags_NoTooltip : ImGuiTabBarFlags_ = 32 ; pub const ImGuiTabBarFlags__ImGuiTabBarFlags_FittingPolicyResizeDown : ImGuiTabBarFlags_ = 64 ; pub const ImGuiTabBarFlags__ImGuiTabBarFlags_FittingPolicyScroll : ImGuiTabBarFlags_ = 128 ; pub const ImGuiTabBarFlags__ImGuiTabBarFlags_FittingPolicyMask_ : ImGuiTabBarFlags_ = 192 ; pub const ImGuiTabBarFlags__ImGuiTabBarFlags_FittingPolicyDefault_ : ImGuiTabBarFlags_ = 64 ; pub type ImGuiTabBarFlags_ = i32 ; pub const ImGuiTabItemFlags__ImGuiTabItemFlags_None : ImGuiTabItemFlags_ = 0 ; pub const ImGuiTabItemFlags__ImGuiTabItemFlags_UnsavedDocument : ImGuiTabItemFlags_ = 1 ; pub const ImGuiTabItemFlags__ImGuiTabItemFlags_SetSelected : ImGuiTabItemFlags_ = 2 ; pub const ImGuiTabItemFlags__ImGuiTabItemFlags_NoCloseWithMiddleMouseButton : ImGuiTabItemFlags_ = 4 ; pub const ImGuiTabItemFlags__ImGuiTabItemFlags_NoPushId : ImGuiTabItemFlags_ = 8 ; pub type ImGuiTabItemFlags_ = i32 ; pub const ImGuiFocusedFlags__ImGuiFocusedFlags_None : ImGuiFocusedFlags_ = 0 ; pub const ImGuiFocusedFlags__ImGuiFocusedFlags_ChildWindows : ImGuiFocusedFlags_ = 1 ; pub const ImGuiFocusedFlags__ImGuiFocusedFlags_RootWindow : ImGuiFocusedFlags_ = 2 ; pub const ImGuiFocusedFlags__ImGuiFocusedFlags_AnyWindow : ImGuiFocusedFlags_ = 4 ; pub const ImGuiFocusedFlags__ImGuiFocusedFlags_RootAndChildWindows : ImGuiFocusedFlags_ = 3 ; pub type ImGuiFocusedFlags_ = i32 ; pub const ImGuiHoveredFlags__ImGuiHoveredFlags_None : ImGuiHoveredFlags_ = 0 ; pub const ImGuiHoveredFlags__ImGuiHoveredFlags_ChildWindows : ImGuiHoveredFlags_ = 1 ; pub const ImGuiHoveredFlags__ImGuiHoveredFlags_RootWindow : ImGuiHoveredFlags_ = 2 ; pub const ImGuiHoveredFlags__ImGuiHoveredFlags_AnyWindow : ImGuiHoveredFlags_ = 4 ; pub const ImGuiHoveredFlags__ImGuiHoveredFlags_AllowWhenBlockedByPopup : ImGuiHoveredFlags_ = 8 ; pub const ImGuiHoveredFlags__ImGuiHoveredFlags_AllowWhenBlockedByActiveItem : ImGuiHoveredFlags_ = 32 ; pub const ImGuiHoveredFlags__ImGuiHoveredFlags_AllowWhenOverlapped : ImGuiHoveredFlags_ = 64 ; pub const ImGuiHoveredFlags__ImGuiHoveredFlags_AllowWhenDisabled : ImGuiHoveredFlags_ = 128 ; pub const ImGuiHoveredFlags__ImGuiHoveredFlags_RectOnly : ImGuiHoveredFlags_ = 104 ; pub const ImGuiHoveredFlags__ImGuiHoveredFlags_RootAndChildWindows : ImGuiHoveredFlags_ = 3 ; pub type ImGuiHoveredFlags_ = i32 ; pub const ImGuiDragDropFlags__ImGuiDragDropFlags_None : ImGuiDragDropFlags_ = 0 ; pub const ImGuiDragDropFlags__ImGuiDragDropFlags_SourceNoPreviewTooltip : ImGuiDragDropFlags_ = 1 ; pub const ImGuiDragDropFlags__ImGuiDragDropFlags_SourceNoDisableHover : ImGuiDragDropFlags_ = 2 ; pub const ImGuiDragDropFlags__ImGuiDragDropFlags_SourceNoHoldToOpenOthers : ImGuiDragDropFlags_ = 4 ; pub const ImGuiDragDropFlags__ImGuiDragDropFlags_SourceAllowNullID : ImGuiDragDropFlags_ = 8 ; pub const ImGuiDragDropFlags__ImGuiDragDropFlags_SourceExtern : ImGuiDragDropFlags_ = 16 ; pub const ImGuiDragDropFlags__ImGuiDragDropFlags_SourceAutoExpirePayload : ImGuiDragDropFlags_ = 32 ; pub const ImGuiDragDropFlags__ImGuiDragDropFlags_AcceptBeforeDelivery : ImGuiDragDropFlags_ = 1024 ; pub const ImGuiDragDropFlags__ImGuiDragDropFlags_AcceptNoDrawDefaultRect : ImGuiDragDropFlags_ = 2048 ; pub const ImGuiDragDropFlags__ImGuiDragDropFlags_AcceptNoPreviewTooltip : ImGuiDragDropFlags_ = 4096 ; pub const ImGuiDragDropFlags__ImGuiDragDropFlags_AcceptPeekOnly : ImGuiDragDropFlags_ = 3072 ; pub type ImGuiDragDropFlags_ = i32 ; pub const ImGuiDataType__ImGuiDataType_S8 : ImGuiDataType_ = 0 ; pub const ImGuiDataType__ImGuiDataType_U8 : ImGuiDataType_ = 1 ; pub const ImGuiDataType__ImGuiDataType_S16 : ImGuiDataType_ = 2 ; pub const ImGuiDataType__ImGuiDataType_U16 : ImGuiDataType_ = 3 ; pub const ImGuiDataType__ImGuiDataType_S32 : ImGuiDataType_ = 4 ; pub const ImGuiDataType__ImGuiDataType_U32 : ImGuiDataType_ = 5 ; pub const ImGuiDataType__ImGuiDataType_S64 : ImGuiDataType_ = 6 ; pub const ImGuiDataType__ImGuiDataType_U64 : ImGuiDataType_ = 7 ; pub const ImGuiDataType__ImGuiDataType_Float : ImGuiDataType_ = 8 ; pub const ImGuiDataType__ImGuiDataType_Double : ImGuiDataType_ = 9 ; pub const ImGuiDataType__ImGuiDataType_COUNT : ImGuiDataType_ = 10 ; pub type ImGuiDataType_ = i32 ; pub const ImGuiDir__ImGuiDir_None : ImGuiDir_ = -1 ; pub const ImGuiDir__ImGuiDir_Left : ImGuiDir_ = 0 ; pub const ImGuiDir__ImGuiDir_Right : ImGuiDir_ = 1 ; pub const ImGuiDir__ImGuiDir_Up : ImGuiDir_ = 2 ; pub const ImGuiDir__ImGuiDir_Down : ImGuiDir_ = 3 ; pub const ImGuiDir__ImGuiDir_COUNT : ImGuiDir_ = 4 ; pub type ImGuiDir_ = i32 ; pub const ImGuiKey__ImGuiKey_Tab : ImGuiKey_ = 0 ; pub const ImGuiKey__ImGuiKey_LeftArrow : ImGuiKey_ = 1 ; pub const ImGuiKey__ImGuiKey_RightArrow : ImGuiKey_ = 2 ; pub const ImGuiKey__ImGuiKey_UpArrow : ImGuiKey_ = 3 ; pub const ImGuiKey__ImGuiKey_DownArrow : ImGuiKey_ = 4 ; pub const ImGuiKey__ImGuiKey_PageUp : ImGuiKey_ = 5 ; pub const ImGuiKey__ImGuiKey_PageDown : ImGuiKey_ = 6 ; pub const ImGuiKey__ImGuiKey_Home : ImGuiKey_ = 7 ; pub const ImGuiKey__ImGuiKey_End : ImGuiKey_ = 8 ; pub const ImGuiKey__ImGuiKey_Insert : ImGuiKey_ = 9 ; pub const ImGuiKey__ImGuiKey_Delete : ImGuiKey_ = 10 ; pub const ImGuiKey__ImGuiKey_Backspace : ImGuiKey_ = 11 ; pub const ImGuiKey__ImGuiKey_Space : ImGuiKey_ = 12 ; pub const ImGuiKey__ImGuiKey_Enter : ImGuiKey_ = 13 ; pub const ImGuiKey__ImGuiKey_Escape : ImGuiKey_ = 14 ; pub const ImGuiKey__ImGuiKey_A : ImGuiKey_ = 15 ; pub const ImGuiKey__ImGuiKey_C : ImGuiKey_ = 16 ; pub const ImGuiKey__ImGuiKey_V : ImGuiKey_ = 17 ; pub const ImGuiKey__ImGuiKey_X : ImGuiKey_ = 18 ; pub const ImGuiKey__ImGuiKey_Y : ImGuiKey_ = 19 ; pub const ImGuiKey__ImGuiKey_Z : ImGuiKey_ = 20 ; pub const ImGuiKey__ImGuiKey_COUNT : ImGuiKey_ = 21 ; pub type ImGuiKey_ = i32 ; pub const ImGuiNavInput__ImGuiNavInput_Activate : ImGuiNavInput_ = 0 ; pub const ImGuiNavInput__ImGuiNavInput_Cancel : ImGuiNavInput_ = 1 ; pub const ImGuiNavInput__ImGuiNavInput_Input : ImGuiNavInput_ = 2 ; pub const ImGuiNavInput__ImGuiNavInput_Menu : ImGuiNavInput_ = 3 ; pub const ImGuiNavInput__ImGuiNavInput_DpadLeft : ImGuiNavInput_ = 4 ; pub const ImGuiNavInput__ImGuiNavInput_DpadRight : ImGuiNavInput_ = 5 ; pub const ImGuiNavInput__ImGuiNavInput_DpadUp : ImGuiNavInput_ = 6 ; pub const ImGuiNavInput__ImGuiNavInput_DpadDown : ImGuiNavInput_ = 7 ; pub const ImGuiNavInput__ImGuiNavInput_LStickLeft : ImGuiNavInput_ = 8 ; pub const ImGuiNavInput__ImGuiNavInput_LStickRight : ImGuiNavInput_ = 9 ; pub const ImGuiNavInput__ImGuiNavInput_LStickUp : ImGuiNavInput_ = 10 ; pub const ImGuiNavInput__ImGuiNavInput_LStickDown : ImGuiNavInput_ = 11 ; pub const ImGuiNavInput__ImGuiNavInput_FocusPrev : ImGuiNavInput_ = 12 ; pub const ImGuiNavInput__ImGuiNavInput_FocusNext : ImGuiNavInput_ = 13 ; pub const ImGuiNavInput__ImGuiNavInput_TweakSlow : ImGuiNavInput_ = 14 ; pub const ImGuiNavInput__ImGuiNavInput_TweakFast : ImGuiNavInput_ = 15 ; pub const ImGuiNavInput__ImGuiNavInput_KeyMenu_ : ImGuiNavInput_ = 16 ; pub const ImGuiNavInput__ImGuiNavInput_KeyTab_ : ImGuiNavInput_ = 17 ; pub const ImGuiNavInput__ImGuiNavInput_KeyLeft_ : ImGuiNavInput_ = 18 ; pub const ImGuiNavInput__ImGuiNavInput_KeyRight_ : ImGuiNavInput_ = 19 ; pub const ImGuiNavInput__ImGuiNavInput_KeyUp_ : ImGuiNavInput_ = 20 ; pub const ImGuiNavInput__ImGuiNavInput_KeyDown_ : ImGuiNavInput_ = 21 ; pub const ImGuiNavInput__ImGuiNavInput_COUNT : ImGuiNavInput_ = 22 ; pub const ImGuiNavInput__ImGuiNavInput_InternalStart_ : ImGuiNavInput_ = 16 ; pub type ImGuiNavInput_ = i32 ; pub const ImGuiConfigFlags__ImGuiConfigFlags_None : ImGuiConfigFlags_ = 0 ; pub const ImGuiConfigFlags__ImGuiConfigFlags_NavEnableKeyboard : ImGuiConfigFlags_ = 1 ; pub const ImGuiConfigFlags__ImGuiConfigFlags_NavEnableGamepad : ImGuiConfigFlags_ = 2 ; pub const ImGuiConfigFlags__ImGuiConfigFlags_NavEnableSetMousePos : ImGuiConfigFlags_ = 4 ; pub const ImGuiConfigFlags__ImGuiConfigFlags_NavNoCaptureKeyboard : ImGuiConfigFlags_ = 8 ; pub const ImGuiConfigFlags__ImGuiConfigFlags_NoMouse : ImGuiConfigFlags_ = 16 ; pub const ImGuiConfigFlags__ImGuiConfigFlags_NoMouseCursorChange : ImGuiConfigFlags_ = 32 ; pub const ImGuiConfigFlags__ImGuiConfigFlags_IsSRGB : ImGuiConfigFlags_ = 1048576 ; pub const ImGuiConfigFlags__ImGuiConfigFlags_IsTouchScreen : ImGuiConfigFlags_ = 2097152 ; pub type ImGuiConfigFlags_ = i32 ; pub const ImGuiBackendFlags__ImGuiBackendFlags_None : ImGuiBackendFlags_ = 0 ; pub const ImGuiBackendFlags__ImGuiBackendFlags_HasGamepad : ImGuiBackendFlags_ = 1 ; pub const ImGuiBackendFlags__ImGuiBackendFlags_HasMouseCursors : ImGuiBackendFlags_ = 2 ; pub const ImGuiBackendFlags__ImGuiBackendFlags_HasSetMousePos : ImGuiBackendFlags_ = 4 ; pub type ImGuiBackendFlags_ = i32 ; pub const ImGuiCol__ImGuiCol_Text : ImGuiCol_ = 0 ; pub const ImGuiCol__ImGuiCol_TextDisabled : ImGuiCol_ = 1 ; pub const ImGuiCol__ImGuiCol_WindowBg : ImGuiCol_ = 2 ; pub const ImGuiCol__ImGuiCol_ChildBg : ImGuiCol_ = 3 ; pub const ImGuiCol__ImGuiCol_PopupBg : ImGuiCol_ = 4 ; pub const ImGuiCol__ImGuiCol_Border : ImGuiCol_ = 5 ; pub const ImGuiCol__ImGuiCol_BorderShadow : ImGuiCol_ = 6 ; pub const ImGuiCol__ImGuiCol_FrameBg : ImGuiCol_ = 7 ; pub const ImGuiCol__ImGuiCol_FrameBgHovered : ImGuiCol_ = 8 ; pub const ImGuiCol__ImGuiCol_FrameBgActive : ImGuiCol_ = 9 ; pub const ImGuiCol__ImGuiCol_TitleBg : ImGuiCol_ = 10 ; pub const ImGuiCol__ImGuiCol_TitleBgActive : ImGuiCol_ = 11 ; pub const ImGuiCol__ImGuiCol_TitleBgCollapsed : ImGuiCol_ = 12 ; pub const ImGuiCol__ImGuiCol_MenuBarBg : ImGuiCol_ = 13 ; pub const ImGuiCol__ImGuiCol_ScrollbarBg : ImGuiCol_ = 14 ; pub const ImGuiCol__ImGuiCol_ScrollbarGrab : ImGuiCol_ = 15 ; pub const ImGuiCol__ImGuiCol_ScrollbarGrabHovered : ImGuiCol_ = 16 ; pub const ImGuiCol__ImGuiCol_ScrollbarGrabActive : ImGuiCol_ = 17 ; pub const ImGuiCol__ImGuiCol_CheckMark : ImGuiCol_ = 18 ; pub const ImGuiCol__ImGuiCol_SliderGrab : ImGuiCol_ = 19 ; pub const ImGuiCol__ImGuiCol_SliderGrabActive : ImGuiCol_ = 20 ; pub const ImGuiCol__ImGuiCol_Button : ImGuiCol_ = 21 ; pub const ImGuiCol__ImGuiCol_ButtonHovered : ImGuiCol_ = 22 ; pub const ImGuiCol__ImGuiCol_ButtonActive : ImGuiCol_ = 23 ; pub const ImGuiCol__ImGuiCol_Header : ImGuiCol_ = 24 ; pub const ImGuiCol__ImGuiCol_HeaderHovered : ImGuiCol_ = 25 ; pub const ImGuiCol__ImGuiCol_HeaderActive : ImGuiCol_ = 26 ; pub const ImGuiCol__ImGuiCol_Separator : ImGuiCol_ = 27 ; pub const ImGuiCol__ImGuiCol_SeparatorHovered : ImGuiCol_ = 28 ; pub const ImGuiCol__ImGuiCol_SeparatorActive : ImGuiCol_ = 29 ; pub const ImGuiCol__ImGuiCol_ResizeGrip : ImGuiCol_ = 30 ; pub const ImGuiCol__ImGuiCol_ResizeGripHovered : ImGuiCol_ = 31 ; pub const ImGuiCol__ImGuiCol_ResizeGripActive : ImGuiCol_ = 32 ; pub const ImGuiCol__ImGuiCol_Tab : ImGuiCol_ = 33 ; pub const ImGuiCol__ImGuiCol_TabHovered : ImGuiCol_ = 34 ; pub const ImGuiCol__ImGuiCol_TabActive : ImGuiCol_ = 35 ; pub const ImGuiCol__ImGuiCol_TabUnfocused : ImGuiCol_ = 36 ; pub const ImGuiCol__ImGuiCol_TabUnfocusedActive : ImGuiCol_ = 37 ; pub const ImGuiCol__ImGuiCol_PlotLines : ImGuiCol_ = 38 ; pub const ImGuiCol__ImGuiCol_PlotLinesHovered : ImGuiCol_ = 39 ; pub const ImGuiCol__ImGuiCol_PlotHistogram : ImGuiCol_ = 40 ; pub const ImGuiCol__ImGuiCol_PlotHistogramHovered : ImGuiCol_ = 41 ; pub const ImGuiCol__ImGuiCol_TextSelectedBg : ImGuiCol_ = 42 ; pub const ImGuiCol__ImGuiCol_DragDropTarget : ImGuiCol_ = 43 ; pub const ImGuiCol__ImGuiCol_NavHighlight : ImGuiCol_ = 44 ; pub const ImGuiCol__ImGuiCol_NavWindowingHighlight : ImGuiCol_ = 45 ; pub const ImGuiCol__ImGuiCol_NavWindowingDimBg : ImGuiCol_ = 46 ; pub const ImGuiCol__ImGuiCol_ModalWindowDimBg : ImGuiCol_ = 47 ; pub const ImGuiCol__ImGuiCol_COUNT : ImGuiCol_ = 48 ; pub type ImGuiCol_ = i32 ; pub const ImGuiStyleVar__ImGuiStyleVar_Alpha : ImGuiStyleVar_ = 0 ; pub const ImGuiStyleVar__ImGuiStyleVar_WindowPadding : ImGuiStyleVar_ = 1 ; pub const ImGuiStyleVar__ImGuiStyleVar_WindowRounding : ImGuiStyleVar_ = 2 ; pub const ImGuiStyleVar__ImGuiStyleVar_WindowBorderSize : ImGuiStyleVar_ = 3 ; pub const ImGuiStyleVar__ImGuiStyleVar_WindowMinSize : ImGuiStyleVar_ = 4 ; pub const ImGuiStyleVar__ImGuiStyleVar_WindowTitleAlign : ImGuiStyleVar_ = 5 ; pub const ImGuiStyleVar__ImGuiStyleVar_ChildRounding : ImGuiStyleVar_ = 6 ; pub const ImGuiStyleVar__ImGuiStyleVar_ChildBorderSize : ImGuiStyleVar_ = 7 ; pub const ImGuiStyleVar__ImGuiStyleVar_PopupRounding : ImGuiStyleVar_ = 8 ; pub const ImGuiStyleVar__ImGuiStyleVar_PopupBorderSize : ImGuiStyleVar_ = 9 ; pub const ImGuiStyleVar__ImGuiStyleVar_FramePadding : ImGuiStyleVar_ = 10 ; pub const ImGuiStyleVar__ImGuiStyleVar_FrameRounding : ImGuiStyleVar_ = 11 ; pub const ImGuiStyleVar__ImGuiStyleVar_FrameBorderSize : ImGuiStyleVar_ = 12 ; pub const ImGuiStyleVar__ImGuiStyleVar_ItemSpacing : ImGuiStyleVar_ = 13 ; pub const ImGuiStyleVar__ImGuiStyleVar_ItemInnerSpacing : ImGuiStyleVar_ = 14 ; pub const ImGuiStyleVar__ImGuiStyleVar_IndentSpacing : ImGuiStyleVar_ = 15 ; pub const ImGuiStyleVar__ImGuiStyleVar_ScrollbarSize : ImGuiStyleVar_ = 16 ; pub const ImGuiStyleVar__ImGuiStyleVar_ScrollbarRounding : ImGuiStyleVar_ = 17 ; pub const ImGuiStyleVar__ImGuiStyleVar_GrabMinSize : ImGuiStyleVar_ = 18 ; pub const ImGuiStyleVar__ImGuiStyleVar_GrabRounding : ImGuiStyleVar_ = 19 ; pub const ImGuiStyleVar__ImGuiStyleVar_TabRounding : ImGuiStyleVar_ = 20 ; pub const ImGuiStyleVar__ImGuiStyleVar_ButtonTextAlign : ImGuiStyleVar_ = 21 ; pub const ImGuiStyleVar__ImGuiStyleVar_SelectableTextAlign : ImGuiStyleVar_ = 22 ; pub const ImGuiStyleVar__ImGuiStyleVar_COUNT : ImGuiStyleVar_ = 23 ; pub type ImGuiStyleVar_ = i32 ; pub const ImGuiColorEditFlags__ImGuiColorEditFlags_None : ImGuiColorEditFlags_ = 0 ; pub const ImGuiColorEditFlags__ImGuiColorEditFlags_NoAlpha : ImGuiColorEditFlags_ = 2 ; pub const ImGuiColorEditFlags__ImGuiColorEditFlags_NoPicker : ImGuiColorEditFlags_ = 4 ; pub const ImGuiColorEditFlags__ImGuiColorEditFlags_NoOptions : ImGuiColorEditFlags_ = 8 ; pub const ImGuiColorEditFlags__ImGuiColorEditFlags_NoSmallPreview : ImGuiColorEditFlags_ = 16 ; pub const ImGuiColorEditFlags__ImGuiColorEditFlags_NoInputs : ImGuiColorEditFlags_ = 32 ; pub const ImGuiColorEditFlags__ImGuiColorEditFlags_NoTooltip : ImGuiColorEditFlags_ = 64 ; pub const ImGuiColorEditFlags__ImGuiColorEditFlags_NoLabel : ImGuiColorEditFlags_ = 128 ; pub const ImGuiColorEditFlags__ImGuiColorEditFlags_NoSidePreview : ImGuiColorEditFlags_ = 256 ; pub const ImGuiColorEditFlags__ImGuiColorEditFlags_NoDragDrop : ImGuiColorEditFlags_ = 512 ; pub const ImGuiColorEditFlags__ImGuiColorEditFlags_AlphaBar : ImGuiColorEditFlags_ = 65536 ; pub const ImGuiColorEditFlags__ImGuiColorEditFlags_AlphaPreview : ImGuiColorEditFlags_ = 131072 ; pub const ImGuiColorEditFlags__ImGuiColorEditFlags_AlphaPreviewHalf : ImGuiColorEditFlags_ = 262144 ; pub const ImGuiColorEditFlags__ImGuiColorEditFlags_HDR : ImGuiColorEditFlags_ = 524288 ; pub const ImGuiColorEditFlags__ImGuiColorEditFlags_DisplayRGB : ImGuiColorEditFlags_ = 1048576 ; pub const ImGuiColorEditFlags__ImGuiColorEditFlags_DisplayHSV : ImGuiColorEditFlags_ = 2097152 ; pub const ImGuiColorEditFlags__ImGuiColorEditFlags_DisplayHex : ImGuiColorEditFlags_ = 4194304 ; pub const ImGuiColorEditFlags__ImGuiColorEditFlags_Uint8 : ImGuiColorEditFlags_ = 8388608 ; pub const ImGuiColorEditFlags__ImGuiColorEditFlags_Float : ImGuiColorEditFlags_ = 16777216 ; pub const ImGuiColorEditFlags__ImGuiColorEditFlags_PickerHueBar : ImGuiColorEditFlags_ = 33554432 ; pub const ImGuiColorEditFlags__ImGuiColorEditFlags_PickerHueWheel : ImGuiColorEditFlags_ = 67108864 ; pub const ImGuiColorEditFlags__ImGuiColorEditFlags_InputRGB : ImGuiColorEditFlags_ = 134217728 ; pub const ImGuiColorEditFlags__ImGuiColorEditFlags_InputHSV : ImGuiColorEditFlags_ = 268435456 ; pub const ImGuiColorEditFlags__ImGuiColorEditFlags__OptionsDefault : ImGuiColorEditFlags_ = 177209344 ; pub const ImGuiColorEditFlags__ImGuiColorEditFlags__DisplayMask : ImGuiColorEditFlags_ = 7340032 ; pub const ImGuiColorEditFlags__ImGuiColorEditFlags__DataTypeMask : ImGuiColorEditFlags_ = 25165824 ; pub const ImGuiColorEditFlags__ImGuiColorEditFlags__PickerMask : ImGuiColorEditFlags_ = 100663296 ; pub const ImGuiColorEditFlags__ImGuiColorEditFlags__InputMask : ImGuiColorEditFlags_ = 402653184 ; pub type ImGuiColorEditFlags_ = i32 ; pub const ImGuiMouseCursor__ImGuiMouseCursor_None : ImGuiMouseCursor_ = -1 ; pub const ImGuiMouseCursor__ImGuiMouseCursor_Arrow : ImGuiMouseCursor_ = 0 ; pub const ImGuiMouseCursor__ImGuiMouseCursor_TextInput : ImGuiMouseCursor_ = 1 ; pub const ImGuiMouseCursor__ImGuiMouseCursor_ResizeAll : ImGuiMouseCursor_ = 2 ; pub const ImGuiMouseCursor__ImGuiMouseCursor_ResizeNS : ImGuiMouseCursor_ = 3 ; pub const ImGuiMouseCursor__ImGuiMouseCursor_ResizeEW : ImGuiMouseCursor_ = 4 ; pub const ImGuiMouseCursor__ImGuiMouseCursor_ResizeNESW : ImGuiMouseCursor_ = 5 ; pub const ImGuiMouseCursor__ImGuiMouseCursor_ResizeNWSE : ImGuiMouseCursor_ = 6 ; pub const ImGuiMouseCursor__ImGuiMouseCursor_Hand : ImGuiMouseCursor_ = 7 ; pub const ImGuiMouseCursor__ImGuiMouseCursor_COUNT : ImGuiMouseCursor_ = 8 ; pub type ImGuiMouseCursor_ = i32 ; pub const ImGuiCond__ImGuiCond_Always : ImGuiCond_ = 1 ; pub const ImGuiCond__ImGuiCond_Once : ImGuiCond_ = 2 ; pub const ImGuiCond__ImGuiCond_FirstUseEver : ImGuiCond_ = 4 ; pub const ImGuiCond__ImGuiCond_Appearing : ImGuiCond_ = 8 ; pub type ImGuiCond_ = i32 ; # [ repr ( C ) ] # [ derive ( Copy , Clone ) ] pub struct ImGuiStyle { pub Alpha : f32 , pub WindowPadding : ImVec2 , pub WindowRounding : f32 , pub WindowBorderSize : f32 , pub WindowMinSize : ImVec2 , pub WindowTitleAlign : ImVec2 , pub ChildRounding : f32 , pub ChildBorderSize : f32 , pub PopupRounding : f32 , pub PopupBorderSize : f32 , pub FramePadding : ImVec2 , pub FrameRounding : f32 , pub FrameBorderSize : f32 , pub ItemSpacing : ImVec2 , pub ItemInnerSpacing : ImVec2 , pub TouchExtraPadding : ImVec2 , pub IndentSpacing : f32 , pub ColumnsMinSpacing : f32 , pub ScrollbarSize : f32 , pub ScrollbarRounding : f32 , pub GrabMinSize : f32 , pub GrabRounding : f32 , pub TabRounding : f32 , pub TabBorderSize : f32 , pub ButtonTextAlign : ImVec2 , pub SelectableTextAlign : ImVec2 , pub DisplayWindowPadding : ImVec2 , pub DisplaySafeAreaPadding : ImVec2 , pub MouseCursorScale : f32 , pub AntiAliasedLines : bool , pub AntiAliasedFill : bool , pub CurveTessellationTol : f32 , pub Colors : [ ImVec4 ; 48usize ] , } # [ test ] fn bindgen_test_layout_ImGuiStyle ( ) { assert_eq ! ( :: std :: mem :: size_of :: < ImGuiStyle > ( ) , 936usize , concat ! ( "Size of: " , stringify ! ( ImGuiStyle ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < ImGuiStyle > ( ) , 4usize , concat ! ( "Alignment of " , stringify ! ( ImGuiStyle ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImGuiStyle > ( ) ) ) . Alpha as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( ImGuiStyle ) , "::" , stringify ! ( Alpha ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImGuiStyle > ( ) ) ) . WindowPadding as * const _ as usize } , 4usize , concat ! ( "Offset of field: " , stringify ! ( ImGuiStyle ) , "::" , stringify ! ( WindowPadding ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImGuiStyle > ( ) ) ) . WindowRounding as * const _ as usize } , 12usize , concat ! ( "Offset of field: " , stringify ! ( ImGuiStyle ) , "::" , stringify ! ( WindowRounding ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImGuiStyle > ( ) ) ) . WindowBorderSize as * const _ as usize } , 16usize , concat ! ( "Offset of field: " , stringify ! ( ImGuiStyle ) , "::" , stringify ! ( WindowBorderSize ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImGuiStyle > ( ) ) ) . WindowMinSize as * const _ as usize } , 20usize , concat ! ( "Offset of field: " , stringify ! ( ImGuiStyle ) , "::" , stringify ! ( WindowMinSize ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImGuiStyle > ( ) ) ) . WindowTitleAlign as * const _ as usize } , 28usize , concat ! ( "Offset of field: " , stringify ! ( ImGuiStyle ) , "::" , stringify ! ( WindowTitleAlign ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImGuiStyle > ( ) ) ) . ChildRounding as * const _ as usize } , 36usize , concat ! ( "Offset of field: " , stringify ! ( ImGuiStyle ) , "::" , stringify ! ( ChildRounding ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImGuiStyle > ( ) ) ) . ChildBorderSize as * const _ as usize } , 40usize , concat ! ( "Offset of field: " , stringify ! ( ImGuiStyle ) , "::" , stringify ! ( ChildBorderSize ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImGuiStyle > ( ) ) ) . PopupRounding as * const _ as usize } , 44usize , concat ! ( "Offset of field: " , stringify ! ( ImGuiStyle ) , "::" , stringify ! ( PopupRounding ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImGuiStyle > ( ) ) ) . PopupBorderSize as * const _ as usize } , 48usize , concat ! ( "Offset of field: " , stringify ! ( ImGuiStyle ) , "::" , stringify ! ( PopupBorderSize ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImGuiStyle > ( ) ) ) . FramePadding as * const _ as usize } , 52usize , concat ! ( "Offset of field: " , stringify ! ( ImGuiStyle ) , "::" , stringify ! ( FramePadding ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImGuiStyle > ( ) ) ) . FrameRounding as * const _ as usize } , 60usize , concat ! ( "Offset of field: " , stringify ! ( ImGuiStyle ) , "::" , stringify ! ( FrameRounding ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImGuiStyle > ( ) ) ) . FrameBorderSize as * const _ as usize } , 64usize , concat ! ( "Offset of field: " , stringify ! ( ImGuiStyle ) , "::" , stringify ! ( FrameBorderSize ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImGuiStyle > ( ) ) ) . ItemSpacing as * const _ as usize } , 68usize , concat ! ( "Offset of field: " , stringify ! ( ImGuiStyle ) , "::" , stringify ! ( ItemSpacing ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImGuiStyle > ( ) ) ) . ItemInnerSpacing as * const _ as usize } , 76usize , concat ! ( "Offset of field: " , stringify ! ( ImGuiStyle ) , "::" , stringify ! ( ItemInnerSpacing ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImGuiStyle > ( ) ) ) . TouchExtraPadding as * const _ as usize } , 84usize , concat ! ( "Offset of field: " , stringify ! ( ImGuiStyle ) , "::" , stringify ! ( TouchExtraPadding ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImGuiStyle > ( ) ) ) . IndentSpacing as * const _ as usize } , 92usize , concat ! ( "Offset of field: " , stringify ! ( ImGuiStyle ) , "::" , stringify ! ( IndentSpacing ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImGuiStyle > ( ) ) ) . ColumnsMinSpacing as * const _ as usize } , 96usize , concat ! ( "Offset of field: " , stringify ! ( ImGuiStyle ) , "::" , stringify ! ( ColumnsMinSpacing ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImGuiStyle > ( ) ) ) . ScrollbarSize as * const _ as usize } , 100usize , concat ! ( "Offset of field: " , stringify ! ( ImGuiStyle ) , "::" , stringify ! ( ScrollbarSize ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImGuiStyle > ( ) ) ) . ScrollbarRounding as * const _ as usize } , 104usize , concat ! ( "Offset of field: " , stringify ! ( ImGuiStyle ) , "::" , stringify ! ( ScrollbarRounding ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImGuiStyle > ( ) ) ) . GrabMinSize as * const _ as usize } , 108usize , concat ! ( "Offset of field: " , stringify ! ( ImGuiStyle ) , "::" , stringify ! ( GrabMinSize ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImGuiStyle > ( ) ) ) . GrabRounding as * const _ as usize } , 112usize , concat ! ( "Offset of field: " , stringify ! ( ImGuiStyle ) , "::" , stringify ! ( GrabRounding ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImGuiStyle > ( ) ) ) . TabRounding as * const _ as usize } , 116usize , concat ! ( "Offset of field: " , stringify ! ( ImGuiStyle ) , "::" , stringify ! ( TabRounding ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImGuiStyle > ( ) ) ) . TabBorderSize as * const _ as usize } , 120usize , concat ! ( "Offset of field: " , stringify ! ( ImGuiStyle ) , "::" , stringify ! ( TabBorderSize ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImGuiStyle > ( ) ) ) . ButtonTextAlign as * const _ as usize } , 124usize , concat ! ( "Offset of field: " , stringify ! ( ImGuiStyle ) , "::" , stringify ! ( ButtonTextAlign ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImGuiStyle > ( ) ) ) . SelectableTextAlign as * const _ as usize } , 132usize , concat ! ( "Offset of field: " , stringify ! ( ImGuiStyle ) , "::" , stringify ! ( SelectableTextAlign ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImGuiStyle > ( ) ) ) . DisplayWindowPadding as * const _ as usize } , 140usize , concat ! ( "Offset of field: " , stringify ! ( ImGuiStyle ) , "::" , stringify ! ( DisplayWindowPadding ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImGuiStyle > ( ) ) ) . DisplaySafeAreaPadding as * const _ as usize } , 148usize , concat ! ( "Offset of field: " , stringify ! ( ImGuiStyle ) , "::" , stringify ! ( DisplaySafeAreaPadding ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImGuiStyle > ( ) ) ) . MouseCursorScale as * const _ as usize } , 156usize , concat ! ( "Offset of field: " , stringify ! ( ImGuiStyle ) , "::" , stringify ! ( MouseCursorScale ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImGuiStyle > ( ) ) ) . AntiAliasedLines as * const _ as usize } , 160usize , concat ! ( "Offset of field: " , stringify ! ( ImGuiStyle ) , "::" , stringify ! ( AntiAliasedLines ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImGuiStyle > ( ) ) ) . AntiAliasedFill as * const _ as usize } , 161usize , concat ! ( "Offset of field: " , stringify ! ( ImGuiStyle ) , "::" , stringify ! ( AntiAliasedFill ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImGuiStyle > ( ) ) ) . CurveTessellationTol as * const _ as usize } , 164usize , concat ! ( "Offset of field: " , stringify ! ( ImGuiStyle ) , "::" , stringify ! ( CurveTessellationTol ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImGuiStyle > ( ) ) ) . Colors as * const _ as usize } , 168usize , concat ! ( "Offset of field: " , stringify ! ( ImGuiStyle ) , "::" , stringify ! ( Colors ) ) ) ; } # [ repr ( C ) ] # [ derive ( Copy , Clone ) ] pub struct ImGuiIO { pub ConfigFlags : ImGuiConfigFlags , pub BackendFlags : ImGuiBackendFlags , pub DisplaySize : ImVec2 , pub DeltaTime : f32 , pub IniSavingRate : f32 , pub IniFilename : * const :: std :: os :: raw :: c_char , pub LogFilename : * const :: std :: os :: raw :: c_char , pub MouseDoubleClickTime : f32 , pub MouseDoubleClickMaxDist : f32 , pub MouseDragThreshold : f32 , pub KeyMap : [ :: std :: os :: raw :: c_int ; 21usize ] , pub KeyRepeatDelay : f32 , pub KeyRepeatRate : f32 , pub UserData : * mut :: std :: os :: raw :: c_void , pub Fonts : * mut ImFontAtlas , pub FontGlobalScale : f32 , pub FontAllowUserScaling : bool , pub FontDefault : * mut ImFont , pub DisplayFramebufferScale : ImVec2 , pub MouseDrawCursor : bool , pub ConfigMacOSXBehaviors : bool , pub ConfigInputTextCursorBlink : bool , pub ConfigWindowsResizeFromEdges : bool , pub ConfigWindowsMoveFromTitleBarOnly : bool , pub BackendPlatformName : * const :: std :: os :: raw :: c_char , pub BackendRendererName : * const :: std :: os :: raw :: c_char , pub BackendPlatformUserData : * mut :: std :: os :: raw :: c_void , pub BackendRendererUserData : * mut :: std :: os :: raw :: c_void , pub BackendLanguageUserData : * mut :: std :: os :: raw :: c_void , pub GetClipboardTextFn : :: std :: option :: Option < unsafe extern "C" fn ( user_data : * mut :: std :: os :: raw :: c_void ) -> * const :: std :: os :: raw :: c_char > , pub SetClipboardTextFn : :: std :: option :: Option < unsafe extern "C" fn ( user_data : * mut :: std :: os :: raw :: c_void , text : * const :: std :: os :: raw :: c_char ) > , pub ClipboardUserData : * mut :: std :: os :: raw :: c_void , pub ImeSetInputScreenPosFn : :: std :: option :: Option < unsafe extern "C" fn ( x : :: std :: os :: raw :: c_int , y : :: std :: os :: raw :: c_int ) > , pub ImeWindowHandle : * mut :: std :: os :: raw :: c_void , pub RenderDrawListsFnUnused : * mut :: std :: os :: raw :: c_void , pub MousePos : ImVec2 , pub MouseDown : [ bool ; 5usize ] , pub MouseWheel : f32 , pub MouseWheelH : f32 , pub KeyCtrl : bool , pub KeyShift : bool , pub KeyAlt : bool , pub KeySuper : bool , pub KeysDown : [ bool ; 512usize ] , pub NavInputs : [ f32 ; 22usize ] , pub WantCaptureMouse : bool , pub WantCaptureKeyboard : bool , pub WantTextInput : bool , pub WantSetMousePos : bool , pub WantSaveIniSettings : bool , pub NavActive : bool , pub NavVisible : bool , pub Framerate : f32 , pub MetricsRenderVertices : :: std :: os :: raw :: c_int , pub MetricsRenderIndices : :: std :: os :: raw :: c_int , pub MetricsRenderWindows : :: std :: os :: raw :: c_int , pub MetricsActiveWindows : :: std :: os :: raw :: c_int , pub MetricsActiveAllocations : :: std :: os :: raw :: c_int , pub MouseDelta : ImVec2 , pub MousePosPrev : ImVec2 , pub MouseClickedPos : [ ImVec2 ; 5usize ] , pub MouseClickedTime : [ f64 ; 5usize ] , pub MouseClicked : [ bool ; 5usize ] , pub MouseDoubleClicked : [ bool ; 5usize ] , pub MouseReleased : [ bool ; 5usize ] , pub MouseDownOwned : [ bool ; 5usize ] , pub MouseDownWasDoubleClick : [ bool ; 5usize ] , pub MouseDownDuration : [ f32 ; 5usize ] , pub MouseDownDurationPrev : [ f32 ; 5usize ] , pub MouseDragMaxDistanceAbs : [ ImVec2 ; 5usize ] , pub MouseDragMaxDistanceSqr : [ f32 ; 5usize ] , pub KeysDownDuration : [ f32 ; 512usize ] , pub KeysDownDurationPrev : [ f32 ; 512usize ] , pub NavInputsDownDuration : [ f32 ; 22usize ] , pub NavInputsDownDurationPrev : [ f32 ; 22usize ] , pub InputQueueCharacters : ImVector_ImWchar , } # [ test ] fn bindgen_test_layout_ImGuiIO ( ) { assert_eq ! ( :: std :: mem :: size_of :: < ImGuiIO > ( ) , 5456usize , concat ! ( "Size of: " , stringify ! ( ImGuiIO ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < ImGuiIO > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( ImGuiIO ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImGuiIO > ( ) ) ) . ConfigFlags as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( ImGuiIO ) , "::" , stringify ! ( ConfigFlags ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImGuiIO > ( ) ) ) . BackendFlags as * const _ as usize } , 4usize , concat ! ( "Offset of field: " , stringify ! ( ImGuiIO ) , "::" , stringify ! ( BackendFlags ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImGuiIO > ( ) ) ) . DisplaySize as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( ImGuiIO ) , "::" , stringify ! ( DisplaySize ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImGuiIO > ( ) ) ) . DeltaTime as * const _ as usize } , 16usize , concat ! ( "Offset of field: " , stringify ! ( ImGuiIO ) , "::" , stringify ! ( DeltaTime ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImGuiIO > ( ) ) ) . IniSavingRate as * const _ as usize } , 20usize , concat ! ( "Offset of field: " , stringify ! ( ImGuiIO ) , "::" , stringify ! ( IniSavingRate ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImGuiIO > ( ) ) ) . IniFilename as * const _ as usize } , 24usize , concat ! ( "Offset of field: " , stringify ! ( ImGuiIO ) , "::" , stringify ! ( IniFilename ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImGuiIO > ( ) ) ) . LogFilename as * const _ as usize } , 32usize , concat ! ( "Offset of field: " , stringify ! ( ImGuiIO ) , "::" , stringify ! ( LogFilename ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImGuiIO > ( ) ) ) . MouseDoubleClickTime as * const _ as usize } , 40usize , concat ! ( "Offset of field: " , stringify ! ( ImGuiIO ) , "::" , stringify ! ( MouseDoubleClickTime ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImGuiIO > ( ) ) ) . MouseDoubleClickMaxDist as * const _ as usize } , 44usize , concat ! ( "Offset of field: " , stringify ! ( ImGuiIO ) , "::" , stringify ! ( MouseDoubleClickMaxDist ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImGuiIO > ( ) ) ) . MouseDragThreshold as * const _ as usize } , 48usize , concat ! ( "Offset of field: " , stringify ! ( ImGuiIO ) , "::" , stringify ! ( MouseDragThreshold ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImGuiIO > ( ) ) ) . KeyMap as * const _ as usize } , 52usize , concat ! ( "Offset of field: " , stringify ! ( ImGuiIO ) , "::" , stringify ! ( KeyMap ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImGuiIO > ( ) ) ) . KeyRepeatDelay as * const _ as usize } , 136usize , concat ! ( "Offset of field: " , stringify ! ( ImGuiIO ) , "::" , stringify ! ( KeyRepeatDelay ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImGuiIO > ( ) ) ) . KeyRepeatRate as * const _ as usize } , 140usize , concat ! ( "Offset of field: " , stringify ! ( ImGuiIO ) , "::" , stringify ! ( KeyRepeatRate ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImGuiIO > ( ) ) ) . UserData as * const _ as usize } , 144usize , concat ! ( "Offset of field: " , stringify ! ( ImGuiIO ) , "::" , stringify ! ( UserData ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImGuiIO > ( ) ) ) . Fonts as * const _ as usize } , 152usize , concat ! ( "Offset of field: " , stringify ! ( ImGuiIO ) , "::" , stringify ! ( Fonts ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImGuiIO > ( ) ) ) . FontGlobalScale as * const _ as usize } , 160usize , concat ! ( "Offset of field: " , stringify ! ( ImGuiIO ) , "::" , stringify ! ( FontGlobalScale ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImGuiIO > ( ) ) ) . FontAllowUserScaling as * const _ as usize } , 164usize , concat ! ( "Offset of field: " , stringify ! ( ImGuiIO ) , "::" , stringify ! ( FontAllowUserScaling ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImGuiIO > ( ) ) ) . FontDefault as * const _ as usize } , 168usize , concat ! ( "Offset of field: " , stringify ! ( ImGuiIO ) , "::" , stringify ! ( FontDefault ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImGuiIO > ( ) ) ) . DisplayFramebufferScale as * const _ as usize } , 176usize , concat ! ( "Offset of field: " , stringify ! ( ImGuiIO ) , "::" , stringify ! ( DisplayFramebufferScale ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImGuiIO > ( ) ) ) . MouseDrawCursor as * const _ as usize } , 184usize , concat ! ( "Offset of field: " , stringify ! ( ImGuiIO ) , "::" , stringify ! ( MouseDrawCursor ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImGuiIO > ( ) ) ) . ConfigMacOSXBehaviors as * const _ as usize } , 185usize , concat ! ( "Offset of field: " , stringify ! ( ImGuiIO ) , "::" , stringify ! ( ConfigMacOSXBehaviors ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImGuiIO > ( ) ) ) . ConfigInputTextCursorBlink as * const _ as usize } , 186usize , concat ! ( "Offset of field: " , stringify ! ( ImGuiIO ) , "::" , stringify ! ( ConfigInputTextCursorBlink ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImGuiIO > ( ) ) ) . ConfigWindowsResizeFromEdges as * const _ as usize } , 187usize , concat ! ( "Offset of field: " , stringify ! ( ImGuiIO ) , "::" , stringify ! ( ConfigWindowsResizeFromEdges ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImGuiIO > ( ) ) ) . ConfigWindowsMoveFromTitleBarOnly as * const _ as usize } , 188usize , concat ! ( "Offset of field: " , stringify ! ( ImGuiIO ) , "::" , stringify ! ( ConfigWindowsMoveFromTitleBarOnly ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImGuiIO > ( ) ) ) . BackendPlatformName as * const _ as usize } , 192usize , concat ! ( "Offset of field: " , stringify ! ( ImGuiIO ) , "::" , stringify ! ( BackendPlatformName ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImGuiIO > ( ) ) ) . BackendRendererName as * const _ as usize } , 200usize , concat ! ( "Offset of field: " , stringify ! ( ImGuiIO ) , "::" , stringify ! ( BackendRendererName ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImGuiIO > ( ) ) ) . BackendPlatformUserData as * const _ as usize } , 208usize , concat ! ( "Offset of field: " , stringify ! ( ImGuiIO ) , "::" , stringify ! ( BackendPlatformUserData ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImGuiIO > ( ) ) ) . BackendRendererUserData as * const _ as usize } , 216usize , concat ! ( "Offset of field: " , stringify ! ( ImGuiIO ) , "::" , stringify ! ( BackendRendererUserData ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImGuiIO > ( ) ) ) . BackendLanguageUserData as * const _ as usize } , 224usize , concat ! ( "Offset of field: " , stringify ! ( ImGuiIO ) , "::" , stringify ! ( BackendLanguageUserData ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImGuiIO > ( ) ) ) . GetClipboardTextFn as * const _ as usize } , 232usize , concat ! ( "Offset of field: " , stringify ! ( ImGuiIO ) , "::" , stringify ! ( GetClipboardTextFn ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImGuiIO > ( ) ) ) . SetClipboardTextFn as * const _ as usize } , 240usize , concat ! ( "Offset of field: " , stringify ! ( ImGuiIO ) , "::" , stringify ! ( SetClipboardTextFn ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImGuiIO > ( ) ) ) . ClipboardUserData as * const _ as usize } , 248usize , concat ! ( "Offset of field: " , stringify ! ( ImGuiIO ) , "::" , stringify ! ( ClipboardUserData ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImGuiIO > ( ) ) ) . ImeSetInputScreenPosFn as * const _ as usize } , 256usize , concat ! ( "Offset of field: " , stringify ! ( ImGuiIO ) , "::" , stringify ! ( ImeSetInputScreenPosFn ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImGuiIO > ( ) ) ) . ImeWindowHandle as * const _ as usize } , 264usize , concat ! ( "Offset of field: " , stringify ! ( ImGuiIO ) , "::" , stringify ! ( ImeWindowHandle ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImGuiIO > ( ) ) ) . RenderDrawListsFnUnused as * const _ as usize } , 272usize , concat ! ( "Offset of field: " , stringify ! ( ImGuiIO ) , "::" , stringify ! ( RenderDrawListsFnUnused ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImGuiIO > ( ) ) ) . MousePos as * const _ as usize } , 280usize , concat ! ( "Offset of field: " , stringify ! ( ImGuiIO ) , "::" , stringify ! ( MousePos ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImGuiIO > ( ) ) ) . MouseDown as * const _ as usize } , 288usize , concat ! ( "Offset of field: " , stringify ! ( ImGuiIO ) , "::" , stringify ! ( MouseDown ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImGuiIO > ( ) ) ) . MouseWheel as * const _ as usize } , 296usize , concat ! ( "Offset of field: " , stringify ! ( ImGuiIO ) , "::" , stringify ! ( MouseWheel ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImGuiIO > ( ) ) ) . MouseWheelH as * const _ as usize } , 300usize , concat ! ( "Offset of field: " , stringify ! ( ImGuiIO ) , "::" , stringify ! ( MouseWheelH ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImGuiIO > ( ) ) ) . KeyCtrl as * const _ as usize } , 304usize , concat ! ( "Offset of field: " , stringify ! ( ImGuiIO ) , "::" , stringify ! ( KeyCtrl ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImGuiIO > ( ) ) ) . KeyShift as * const _ as usize } , 305usize , concat ! ( "Offset of field: " , stringify ! ( ImGuiIO ) , "::" , stringify ! ( KeyShift ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImGuiIO > ( ) ) ) . KeyAlt as * const _ as usize } , 306usize , concat ! ( "Offset of field: " , stringify ! ( ImGuiIO ) , "::" , stringify ! ( KeyAlt ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImGuiIO > ( ) ) ) . KeySuper as * const _ as usize } , 307usize , concat ! ( "Offset of field: " , stringify ! ( ImGuiIO ) , "::" , stringify ! ( KeySuper ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImGuiIO > ( ) ) ) . KeysDown as * const _ as usize } , 308usize , concat ! ( "Offset of field: " , stringify ! ( ImGuiIO ) , "::" , stringify ! ( KeysDown ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImGuiIO > ( ) ) ) . NavInputs as * const _ as usize } , 820usize , concat ! ( "Offset of field: " , stringify ! ( ImGuiIO ) , "::" , stringify ! ( NavInputs ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImGuiIO > ( ) ) ) . WantCaptureMouse as * const _ as usize } , 908usize , concat ! ( "Offset of field: " , stringify ! ( ImGuiIO ) , "::" , stringify ! ( WantCaptureMouse ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImGuiIO > ( ) ) ) . WantCaptureKeyboard as * const _ as usize } , 909usize , concat ! ( "Offset of field: " , stringify ! ( ImGuiIO ) , "::" , stringify ! ( WantCaptureKeyboard ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImGuiIO > ( ) ) ) . WantTextInput as * const _ as usize } , 910usize , concat ! ( "Offset of field: " , stringify ! ( ImGuiIO ) , "::" , stringify ! ( WantTextInput ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImGuiIO > ( ) ) ) . WantSetMousePos as * const _ as usize } , 911usize , concat ! ( "Offset of field: " , stringify ! ( ImGuiIO ) , "::" , stringify ! ( WantSetMousePos ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImGuiIO > ( ) ) ) . WantSaveIniSettings as * const _ as usize } , 912usize , concat ! ( "Offset of field: " , stringify ! ( ImGuiIO ) , "::" , stringify ! ( WantSaveIniSettings ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImGuiIO > ( ) ) ) . NavActive as * const _ as usize } , 913usize , concat ! ( "Offset of field: " , stringify ! ( ImGuiIO ) , "::" , stringify ! ( NavActive ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImGuiIO > ( ) ) ) . NavVisible as * const _ as usize } , 914usize , concat ! ( "Offset of field: " , stringify ! ( ImGuiIO ) , "::" , stringify ! ( NavVisible ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImGuiIO > ( ) ) ) . Framerate as * const _ as usize } , 916usize , concat ! ( "Offset of field: " , stringify ! ( ImGuiIO ) , "::" , stringify ! ( Framerate ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImGuiIO > ( ) ) ) . MetricsRenderVertices as * const _ as usize } , 920usize , concat ! ( "Offset of field: " , stringify ! ( ImGuiIO ) , "::" , stringify ! ( MetricsRenderVertices ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImGuiIO > ( ) ) ) . MetricsRenderIndices as * const _ as usize } , 924usize , concat ! ( "Offset of field: " , stringify ! ( ImGuiIO ) , "::" , stringify ! ( MetricsRenderIndices ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImGuiIO > ( ) ) ) . MetricsRenderWindows as * const _ as usize } , 928usize , concat ! ( "Offset of field: " , stringify ! ( ImGuiIO ) , "::" , stringify ! ( MetricsRenderWindows ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImGuiIO > ( ) ) ) . MetricsActiveWindows as * const _ as usize } , 932usize , concat ! ( "Offset of field: " , stringify ! ( ImGuiIO ) , "::" , stringify ! ( MetricsActiveWindows ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImGuiIO > ( ) ) ) . MetricsActiveAllocations as * const _ as usize } , 936usize , concat ! ( "Offset of field: " , stringify ! ( ImGuiIO ) , "::" , stringify ! ( MetricsActiveAllocations ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImGuiIO > ( ) ) ) . MouseDelta as * const _ as usize } , 940usize , concat ! ( "Offset of field: " , stringify ! ( ImGuiIO ) , "::" , stringify ! ( MouseDelta ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImGuiIO > ( ) ) ) . MousePosPrev as * const _ as usize } , 948usize , concat ! ( "Offset of field: " , stringify ! ( ImGuiIO ) , "::" , stringify ! ( MousePosPrev ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImGuiIO > ( ) ) ) . MouseClickedPos as * const _ as usize } , 956usize , concat ! ( "Offset of field: " , stringify ! ( ImGuiIO ) , "::" , stringify ! ( MouseClickedPos ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImGuiIO > ( ) ) ) . MouseClickedTime as * const _ as usize } , 1000usize , concat ! ( "Offset of field: " , stringify ! ( ImGuiIO ) , "::" , stringify ! ( MouseClickedTime ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImGuiIO > ( ) ) ) . MouseClicked as * const _ as usize } , 1040usize , concat ! ( "Offset of field: " , stringify ! ( ImGuiIO ) , "::" , stringify ! ( MouseClicked ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImGuiIO > ( ) ) ) . MouseDoubleClicked as * const _ as usize } , 1045usize , concat ! ( "Offset of field: " , stringify ! ( ImGuiIO ) , "::" , stringify ! ( MouseDoubleClicked ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImGuiIO > ( ) ) ) . MouseReleased as * const _ as usize } , 1050usize , concat ! ( "Offset of field: " , stringify ! ( ImGuiIO ) , "::" , stringify ! ( MouseReleased ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImGuiIO > ( ) ) ) . MouseDownOwned as * const _ as usize } , 1055usize , concat ! ( "Offset of field: " , stringify ! ( ImGuiIO ) , "::" , stringify ! ( MouseDownOwned ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImGuiIO > ( ) ) ) . MouseDownWasDoubleClick as * const _ as usize } , 1060usize , concat ! ( "Offset of field: " , stringify ! ( ImGuiIO ) , "::" , stringify ! ( MouseDownWasDoubleClick ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImGuiIO > ( ) ) ) . MouseDownDuration as * const _ as usize } , 1068usize , concat ! ( "Offset of field: " , stringify ! ( ImGuiIO ) , "::" , stringify ! ( MouseDownDuration ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImGuiIO > ( ) ) ) . MouseDownDurationPrev as * const _ as usize } , 1088usize , concat ! ( "Offset of field: " , stringify ! ( ImGuiIO ) , "::" , stringify ! ( MouseDownDurationPrev ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImGuiIO > ( ) ) ) . MouseDragMaxDistanceAbs as * const _ as usize } , 1108usize , concat ! ( "Offset of field: " , stringify ! ( ImGuiIO ) , "::" , stringify ! ( MouseDragMaxDistanceAbs ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImGuiIO > ( ) ) ) . MouseDragMaxDistanceSqr as * const _ as usize } , 1148usize , concat ! ( "Offset of field: " , stringify ! ( ImGuiIO ) , "::" , stringify ! ( MouseDragMaxDistanceSqr ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImGuiIO > ( ) ) ) . KeysDownDuration as * const _ as usize } , 1168usize , concat ! ( "Offset of field: " , stringify ! ( ImGuiIO ) , "::" , stringify ! ( KeysDownDuration ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImGuiIO > ( ) ) ) . KeysDownDurationPrev as * const _ as usize } , 3216usize , concat ! ( "Offset of field: " , stringify ! ( ImGuiIO ) , "::" , stringify ! ( KeysDownDurationPrev ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImGuiIO > ( ) ) ) . NavInputsDownDuration as * const _ as usize } , 5264usize , concat ! ( "Offset of field: " , stringify ! ( ImGuiIO ) , "::" , stringify ! ( NavInputsDownDuration ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImGuiIO > ( ) ) ) . NavInputsDownDurationPrev as * const _ as usize } , 5352usize , concat ! ( "Offset of field: " , stringify ! ( ImGuiIO ) , "::" , stringify ! ( NavInputsDownDurationPrev ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImGuiIO > ( ) ) ) . InputQueueCharacters as * const _ as usize } , 5440usize , concat ! ( "Offset of field: " , stringify ! ( ImGuiIO ) , "::" , stringify ! ( InputQueueCharacters ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct ImGuiInputTextCallbackData { pub EventFlag : ImGuiInputTextFlags , pub Flags : ImGuiInputTextFlags , pub UserData : * mut :: std :: os :: raw :: c_void , pub EventChar : ImWchar , pub EventKey : ImGuiKey , pub Buf : * mut :: std :: os :: raw :: c_char , pub BufTextLen : :: std :: os :: raw :: c_int , pub BufSize : :: std :: os :: raw :: c_int , pub BufDirty : bool , pub CursorPos : :: std :: os :: raw :: c_int , pub SelectionStart : :: std :: os :: raw :: c_int , pub SelectionEnd : :: std :: os :: raw :: c_int , } # [ test ] fn bindgen_test_layout_ImGuiInputTextCallbackData ( ) { assert_eq ! ( :: std :: mem :: size_of :: < ImGuiInputTextCallbackData > ( ) , 56usize , concat ! ( "Size of: " , stringify ! ( ImGuiInputTextCallbackData ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < ImGuiInputTextCallbackData > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( ImGuiInputTextCallbackData ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImGuiInputTextCallbackData > ( ) ) ) . EventFlag as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( ImGuiInputTextCallbackData ) , "::" , stringify ! ( EventFlag ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImGuiInputTextCallbackData > ( ) ) ) . Flags as * const _ as usize } , 4usize , concat ! ( "Offset of field: " , stringify ! ( ImGuiInputTextCallbackData ) , "::" , stringify ! ( Flags ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImGuiInputTextCallbackData > ( ) ) ) . UserData as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( ImGuiInputTextCallbackData ) , "::" , stringify ! ( UserData ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImGuiInputTextCallbackData > ( ) ) ) . EventChar as * const _ as usize } , 16usize , concat ! ( "Offset of field: " , stringify ! ( ImGuiInputTextCallbackData ) , "::" , stringify ! ( EventChar ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImGuiInputTextCallbackData > ( ) ) ) . EventKey as * const _ as usize } , 20usize , concat ! ( "Offset of field: " , stringify ! ( ImGuiInputTextCallbackData ) , "::" , stringify ! ( EventKey ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImGuiInputTextCallbackData > ( ) ) ) . Buf as * const _ as usize } , 24usize , concat ! ( "Offset of field: " , stringify ! ( ImGuiInputTextCallbackData ) , "::" , stringify ! ( Buf ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImGuiInputTextCallbackData > ( ) ) ) . BufTextLen as * const _ as usize } , 32usize , concat ! ( "Offset of field: " , stringify ! ( ImGuiInputTextCallbackData ) , "::" , stringify ! ( BufTextLen ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImGuiInputTextCallbackData > ( ) ) ) . BufSize as * const _ as usize } , 36usize , concat ! ( "Offset of field: " , stringify ! ( ImGuiInputTextCallbackData ) , "::" , stringify ! ( BufSize ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImGuiInputTextCallbackData > ( ) ) ) . BufDirty as * const _ as usize } , 40usize , concat ! ( "Offset of field: " , stringify ! ( ImGuiInputTextCallbackData ) , "::" , stringify ! ( BufDirty ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImGuiInputTextCallbackData > ( ) ) ) . CursorPos as * const _ as usize } , 44usize , concat ! ( "Offset of field: " , stringify ! ( ImGuiInputTextCallbackData ) , "::" , stringify ! ( CursorPos ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImGuiInputTextCallbackData > ( ) ) ) . SelectionStart as * const _ as usize } , 48usize , concat ! ( "Offset of field: " , stringify ! ( ImGuiInputTextCallbackData ) , "::" , stringify ! ( SelectionStart ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImGuiInputTextCallbackData > ( ) ) ) . SelectionEnd as * const _ as usize } , 52usize , concat ! ( "Offset of field: " , stringify ! ( ImGuiInputTextCallbackData ) , "::" , stringify ! ( SelectionEnd ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct ImGuiSizeCallbackData { pub UserData : * mut :: std :: os :: raw :: c_void , pub Pos : ImVec2 , pub CurrentSize : ImVec2 , pub DesiredSize : ImVec2 , } # [ test ] fn bindgen_test_layout_ImGuiSizeCallbackData ( ) { assert_eq ! ( :: std :: mem :: size_of :: < ImGuiSizeCallbackData > ( ) , 32usize , concat ! ( "Size of: " , stringify ! ( ImGuiSizeCallbackData ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < ImGuiSizeCallbackData > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( ImGuiSizeCallbackData ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImGuiSizeCallbackData > ( ) ) ) . UserData as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( ImGuiSizeCallbackData ) , "::" , stringify ! ( UserData ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImGuiSizeCallbackData > ( ) ) ) . Pos as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( ImGuiSizeCallbackData ) , "::" , stringify ! ( Pos ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImGuiSizeCallbackData > ( ) ) ) . CurrentSize as * const _ as usize } , 16usize , concat ! ( "Offset of field: " , stringify ! ( ImGuiSizeCallbackData ) , "::" , stringify ! ( CurrentSize ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImGuiSizeCallbackData > ( ) ) ) . DesiredSize as * const _ as usize } , 24usize , concat ! ( "Offset of field: " , stringify ! ( ImGuiSizeCallbackData ) , "::" , stringify ! ( DesiredSize ) ) ) ; } # [ repr ( C ) ] # [ derive ( Copy , Clone ) ] pub struct ImGuiPayload { pub Data : * mut :: std :: os :: raw :: c_void , pub DataSize : :: std :: os :: raw :: c_int , pub SourceId : ImGuiID , pub SourceParentId : ImGuiID , pub DataFrameCount : :: std :: os :: raw :: c_int , pub DataType : [ :: std :: os :: raw :: c_char ; 33usize ] , pub Preview : bool , pub Delivery : bool , } # [ test ] fn bindgen_test_layout_ImGuiPayload ( ) { assert_eq ! ( :: std :: mem :: size_of :: < ImGuiPayload > ( ) , 64usize , concat ! ( "Size of: " , stringify ! ( ImGuiPayload ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < ImGuiPayload > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( ImGuiPayload ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImGuiPayload > ( ) ) ) . Data as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( ImGuiPayload ) , "::" , stringify ! ( Data ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImGuiPayload > ( ) ) ) . DataSize as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( ImGuiPayload ) , "::" , stringify ! ( DataSize ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImGuiPayload > ( ) ) ) . SourceId as * const _ as usize } , 12usize , concat ! ( "Offset of field: " , stringify ! ( ImGuiPayload ) , "::" , stringify ! ( SourceId ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImGuiPayload > ( ) ) ) . SourceParentId as * const _ as usize } , 16usize , concat ! ( "Offset of field: " , stringify ! ( ImGuiPayload ) , "::" , stringify ! ( SourceParentId ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImGuiPayload > ( ) ) ) . DataFrameCount as * const _ as usize } , 20usize , concat ! ( "Offset of field: " , stringify ! ( ImGuiPayload ) , "::" , stringify ! ( DataFrameCount ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImGuiPayload > ( ) ) ) . DataType as * const _ as usize } , 24usize , concat ! ( "Offset of field: " , stringify ! ( ImGuiPayload ) , "::" , stringify ! ( DataType ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImGuiPayload > ( ) ) ) . Preview as * const _ as usize } , 57usize , concat ! ( "Offset of field: " , stringify ! ( ImGuiPayload ) , "::" , stringify ! ( Preview ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImGuiPayload > ( ) ) ) . Delivery as * const _ as usize } , 58usize , concat ! ( "Offset of field: " , stringify ! ( ImGuiPayload ) , "::" , stringify ! ( Delivery ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct ImGuiOnceUponAFrame { pub RefFrame : :: std :: os :: raw :: c_int , } # [ test ] fn bindgen_test_layout_ImGuiOnceUponAFrame ( ) { assert_eq ! ( :: std :: mem :: size_of :: < ImGuiOnceUponAFrame > ( ) , 4usize , concat ! ( "Size of: " , stringify ! ( ImGuiOnceUponAFrame ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < ImGuiOnceUponAFrame > ( ) , 4usize , concat ! ( "Alignment of " , stringify ! ( ImGuiOnceUponAFrame ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImGuiOnceUponAFrame > ( ) ) ) . RefFrame as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( ImGuiOnceUponAFrame ) , "::" , stringify ! ( RefFrame ) ) ) ; } # [ repr ( C ) ] # [ derive ( Copy , Clone ) ] pub struct ImGuiTextFilter { pub InputBuf : [ :: std :: os :: raw :: c_char ; 256usize ] , pub Filters : ImVector_TextRange , pub CountGrep : :: std :: os :: raw :: c_int , } # [ test ] fn bindgen_test_layout_ImGuiTextFilter ( ) { assert_eq ! ( :: std :: mem :: size_of :: < ImGuiTextFilter > ( ) , 280usize , concat ! ( "Size of: " , stringify ! ( ImGuiTextFilter ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < ImGuiTextFilter > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( ImGuiTextFilter ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImGuiTextFilter > ( ) ) ) . InputBuf as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( ImGuiTextFilter ) , "::" , stringify ! ( InputBuf ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImGuiTextFilter > ( ) ) ) . Filters as * const _ as usize } , 256usize , concat ! ( "Offset of field: " , stringify ! ( ImGuiTextFilter ) , "::" , stringify ! ( Filters ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImGuiTextFilter > ( ) ) ) . CountGrep as * const _ as usize } , 272usize , concat ! ( "Offset of field: " , stringify ! ( ImGuiTextFilter ) , "::" , stringify ! ( CountGrep ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct ImGuiTextBuffer { pub Buf : ImVector_char , } # [ test ] fn bindgen_test_layout_ImGuiTextBuffer ( ) { assert_eq ! ( :: std :: mem :: size_of :: < ImGuiTextBuffer > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( ImGuiTextBuffer ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < ImGuiTextBuffer > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( ImGuiTextBuffer ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImGuiTextBuffer > ( ) ) ) . Buf as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( ImGuiTextBuffer ) , "::" , stringify ! ( Buf ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct ImGuiStorage { pub Data : ImVector_Pair , } # [ test ] fn bindgen_test_layout_ImGuiStorage ( ) { assert_eq ! ( :: std :: mem :: size_of :: < ImGuiStorage > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( ImGuiStorage ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < ImGuiStorage > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( ImGuiStorage ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImGuiStorage > ( ) ) ) . Data as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( ImGuiStorage ) , "::" , stringify ! ( Data ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct ImGuiListClipper { pub StartPosY : f32 , pub ItemsHeight : f32 , pub ItemsCount : :: std :: os :: raw :: c_int , pub StepNo : :: std :: os :: raw :: c_int , pub DisplayStart : :: std :: os :: raw :: c_int , pub DisplayEnd : :: std :: os :: raw :: c_int , } # [ test ] fn bindgen_test_layout_ImGuiListClipper ( ) { assert_eq ! ( :: std :: mem :: size_of :: < ImGuiListClipper > ( ) , 24usize , concat ! ( "Size of: " , stringify ! ( ImGuiListClipper ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < ImGuiListClipper > ( ) , 4usize , concat ! ( "Alignment of " , stringify ! ( ImGuiListClipper ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImGuiListClipper > ( ) ) ) . StartPosY as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( ImGuiListClipper ) , "::" , stringify ! ( StartPosY ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImGuiListClipper > ( ) ) ) . ItemsHeight as * const _ as usize } , 4usize , concat ! ( "Offset of field: " , stringify ! ( ImGuiListClipper ) , "::" , stringify ! ( ItemsHeight ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImGuiListClipper > ( ) ) ) . ItemsCount as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( ImGuiListClipper ) , "::" , stringify ! ( ItemsCount ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImGuiListClipper > ( ) ) ) . StepNo as * const _ as usize } , 12usize , concat ! ( "Offset of field: " , stringify ! ( ImGuiListClipper ) , "::" , stringify ! ( StepNo ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImGuiListClipper > ( ) ) ) . DisplayStart as * const _ as usize } , 16usize , concat ! ( "Offset of field: " , stringify ! ( ImGuiListClipper ) , "::" , stringify ! ( DisplayStart ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImGuiListClipper > ( ) ) ) . DisplayEnd as * const _ as usize } , 20usize , concat ! ( "Offset of field: " , stringify ! ( ImGuiListClipper ) , "::" , stringify ! ( DisplayEnd ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct ImColor { pub Value : ImVec4 , } # [ test ] fn bindgen_test_layout_ImColor ( ) { assert_eq ! ( :: std :: mem :: size_of :: < ImColor > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( ImColor ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < ImColor > ( ) , 4usize , concat ! ( "Alignment of " , stringify ! ( ImColor ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImColor > ( ) ) ) . Value as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( ImColor ) , "::" , stringify ! ( Value ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct ImDrawCmd { pub ElemCount : :: std :: os :: raw :: c_uint , pub ClipRect : ImVec4 , pub TextureId : ImTextureID , pub UserCallback : ImDrawCallback , pub UserCallbackData : * mut :: std :: os :: raw :: c_void , } # [ test ] fn bindgen_test_layout_ImDrawCmd ( ) { assert_eq ! ( :: std :: mem :: size_of :: < ImDrawCmd > ( ) , 48usize , concat ! ( "Size of: " , stringify ! ( ImDrawCmd ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < ImDrawCmd > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( ImDrawCmd ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImDrawCmd > ( ) ) ) . ElemCount as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( ImDrawCmd ) , "::" , stringify ! ( ElemCount ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImDrawCmd > ( ) ) ) . ClipRect as * const _ as usize } , 4usize , concat ! ( "Offset of field: " , stringify ! ( ImDrawCmd ) , "::" , stringify ! ( ClipRect ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImDrawCmd > ( ) ) ) . TextureId as * const _ as usize } , 24usize , concat ! ( "Offset of field: " , stringify ! ( ImDrawCmd ) , "::" , stringify ! ( TextureId ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImDrawCmd > ( ) ) ) . UserCallback as * const _ as usize } , 32usize , concat ! ( "Offset of field: " , stringify ! ( ImDrawCmd ) , "::" , stringify ! ( UserCallback ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImDrawCmd > ( ) ) ) . UserCallbackData as * const _ as usize } , 40usize , concat ! ( "Offset of field: " , stringify ! ( ImDrawCmd ) , "::" , stringify ! ( UserCallbackData ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct ImDrawVert { pub pos : ImVec2 , pub uv : ImVec2 , pub col : ImU32 , } # [ test ] fn bindgen_test_layout_ImDrawVert ( ) { assert_eq ! ( :: std :: mem :: size_of :: < ImDrawVert > ( ) , 20usize , concat ! ( "Size of: " , stringify ! ( ImDrawVert ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < ImDrawVert > ( ) , 4usize , concat ! ( "Alignment of " , stringify ! ( ImDrawVert ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImDrawVert > ( ) ) ) . pos as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( ImDrawVert ) , "::" , stringify ! ( pos ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImDrawVert > ( ) ) ) . uv as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( ImDrawVert ) , "::" , stringify ! ( uv ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImDrawVert > ( ) ) ) . col as * const _ as usize } , 16usize , concat ! ( "Offset of field: " , stringify ! ( ImDrawVert ) , "::" , stringify ! ( col ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct ImDrawChannel { pub CmdBuffer : ImVector_ImDrawCmd , pub IdxBuffer : ImVector_ImDrawIdx , } # [ test ] fn bindgen_test_layout_ImDrawChannel ( ) { assert_eq ! ( :: std :: mem :: size_of :: < ImDrawChannel > ( ) , 32usize , concat ! ( "Size of: " , stringify ! ( ImDrawChannel ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < ImDrawChannel > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( ImDrawChannel ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImDrawChannel > ( ) ) ) . CmdBuffer as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( ImDrawChannel ) , "::" , stringify ! ( CmdBuffer ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImDrawChannel > ( ) ) ) . IdxBuffer as * const _ as usize } , 16usize , concat ! ( "Offset of field: " , stringify ! ( ImDrawChannel ) , "::" , stringify ! ( IdxBuffer ) ) ) ; } pub const ImDrawCornerFlags__ImDrawCornerFlags_TopLeft : ImDrawCornerFlags_ = 1 ; pub const ImDrawCornerFlags__ImDrawCornerFlags_TopRight : ImDrawCornerFlags_ = 2 ; pub const ImDrawCornerFlags__ImDrawCornerFlags_BotLeft : ImDrawCornerFlags_ = 4 ; pub const ImDrawCornerFlags__ImDrawCornerFlags_BotRight : ImDrawCornerFlags_ = 8 ; pub const ImDrawCornerFlags__ImDrawCornerFlags_Top : ImDrawCornerFlags_ = 3 ; pub const ImDrawCornerFlags__ImDrawCornerFlags_Bot : ImDrawCornerFlags_ = 12 ; pub const ImDrawCornerFlags__ImDrawCornerFlags_Left : ImDrawCornerFlags_ = 5 ; pub const ImDrawCornerFlags__ImDrawCornerFlags_Right : ImDrawCornerFlags_ = 10 ; pub const ImDrawCornerFlags__ImDrawCornerFlags_All : ImDrawCornerFlags_ = 15 ; pub type ImDrawCornerFlags_ = i32 ; pub const ImDrawListFlags__ImDrawListFlags_None : ImDrawListFlags_ = 0 ; pub const ImDrawListFlags__ImDrawListFlags_AntiAliasedLines : ImDrawListFlags_ = 1 ; pub const ImDrawListFlags__ImDrawListFlags_AntiAliasedFill : ImDrawListFlags_ = 2 ; pub type ImDrawListFlags_ = i32 ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct ImDrawList { pub CmdBuffer : ImVector_ImDrawCmd , pub IdxBuffer : ImVector_ImDrawIdx , pub VtxBuffer : ImVector_ImDrawVert , pub Flags : ImDrawListFlags , pub _Data : * const ImDrawListSharedData , pub _OwnerName : * const :: std :: os :: raw :: c_char , pub _VtxCurrentIdx : :: std :: os :: raw :: c_uint , pub _VtxWritePtr : * mut ImDrawVert , pub _IdxWritePtr : * mut ImDrawIdx , pub _ClipRectStack : ImVector_ImVec4 , pub _TextureIdStack : ImVector_ImTextureID , pub _Path : ImVector_ImVec2 , pub _ChannelsCurrent : :: std :: os :: raw :: c_int , pub _ChannelsCount : :: std :: os :: raw :: c_int , pub _Channels : ImVector_ImDrawChannel , } # [ test ] fn bindgen_test_layout_ImDrawList ( ) { assert_eq ! ( :: std :: mem :: size_of :: < ImDrawList > ( ) , 168usize , concat ! ( "Size of: " , stringify ! ( ImDrawList ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < ImDrawList > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( ImDrawList ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImDrawList > ( ) ) ) . CmdBuffer as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( ImDrawList ) , "::" , stringify ! ( CmdBuffer ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImDrawList > ( ) ) ) . IdxBuffer as * const _ as usize } , 16usize , concat ! ( "Offset of field: " , stringify ! ( ImDrawList ) , "::" , stringify ! ( IdxBuffer ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImDrawList > ( ) ) ) . VtxBuffer as * const _ as usize } , 32usize , concat ! ( "Offset of field: " , stringify ! ( ImDrawList ) , "::" , stringify ! ( VtxBuffer ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImDrawList > ( ) ) ) . Flags as * const _ as usize } , 48usize , concat ! ( "Offset of field: " , stringify ! ( ImDrawList ) , "::" , stringify ! ( Flags ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImDrawList > ( ) ) ) . _Data as * const _ as usize } , 56usize , concat ! ( "Offset of field: " , stringify ! ( ImDrawList ) , "::" , stringify ! ( _Data ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImDrawList > ( ) ) ) . _OwnerName as * const _ as usize } , 64usize , concat ! ( "Offset of field: " , stringify ! ( ImDrawList ) , "::" , stringify ! ( _OwnerName ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImDrawList > ( ) ) ) . _VtxCurrentIdx as * const _ as usize } , 72usize , concat ! ( "Offset of field: " , stringify ! ( ImDrawList ) , "::" , stringify ! ( _VtxCurrentIdx ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImDrawList > ( ) ) ) . _VtxWritePtr as * const _ as usize } , 80usize , concat ! ( "Offset of field: " , stringify ! ( ImDrawList ) , "::" , stringify ! ( _VtxWritePtr ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImDrawList > ( ) ) ) . _IdxWritePtr as * const _ as usize } , 88usize , concat ! ( "Offset of field: " , stringify ! ( ImDrawList ) , "::" , stringify ! ( _IdxWritePtr ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImDrawList > ( ) ) ) . _ClipRectStack as * const _ as usize } , 96usize , concat ! ( "Offset of field: " , stringify ! ( ImDrawList ) , "::" , stringify ! ( _ClipRectStack ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImDrawList > ( ) ) ) . _TextureIdStack as * const _ as usize } , 112usize , concat ! ( "Offset of field: " , stringify ! ( ImDrawList ) , "::" , stringify ! ( _TextureIdStack ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImDrawList > ( ) ) ) . _Path as * const _ as usize } , 128usize , concat ! ( "Offset of field: " , stringify ! ( ImDrawList ) , "::" , stringify ! ( _Path ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImDrawList > ( ) ) ) . _ChannelsCurrent as * const _ as usize } , 144usize , concat ! ( "Offset of field: " , stringify ! ( ImDrawList ) , "::" , stringify ! ( _ChannelsCurrent ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImDrawList > ( ) ) ) . _ChannelsCount as * const _ as usize } , 148usize , concat ! ( "Offset of field: " , stringify ! ( ImDrawList ) , "::" , stringify ! ( _ChannelsCount ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImDrawList > ( ) ) ) . _Channels as * const _ as usize } , 152usize , concat ! ( "Offset of field: " , stringify ! ( ImDrawList ) , "::" , stringify ! ( _Channels ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct ImDrawData { pub Valid : bool , pub CmdLists : * mut * mut ImDrawList , pub CmdListsCount : :: std :: os :: raw :: c_int , pub TotalIdxCount : :: std :: os :: raw :: c_int , pub TotalVtxCount : :: std :: os :: raw :: c_int , pub DisplayPos : ImVec2 , pub DisplaySize : ImVec2 , pub FramebufferScale : ImVec2 , } # [ test ] fn bindgen_test_layout_ImDrawData ( ) { assert_eq ! ( :: std :: mem :: size_of :: < ImDrawData > ( ) , 56usize , concat ! ( "Size of: " , stringify ! ( ImDrawData ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < ImDrawData > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( ImDrawData ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImDrawData > ( ) ) ) . Valid as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( ImDrawData ) , "::" , stringify ! ( Valid ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImDrawData > ( ) ) ) . CmdLists as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( ImDrawData ) , "::" , stringify ! ( CmdLists ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImDrawData > ( ) ) ) . CmdListsCount as * const _ as usize } , 16usize , concat ! ( "Offset of field: " , stringify ! ( ImDrawData ) , "::" , stringify ! ( CmdListsCount ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImDrawData > ( ) ) ) . TotalIdxCount as * const _ as usize } , 20usize , concat ! ( "Offset of field: " , stringify ! ( ImDrawData ) , "::" , stringify ! ( TotalIdxCount ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImDrawData > ( ) ) ) . TotalVtxCount as * const _ as usize } , 24usize , concat ! ( "Offset of field: " , stringify ! ( ImDrawData ) , "::" , stringify ! ( TotalVtxCount ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImDrawData > ( ) ) ) . DisplayPos as * const _ as usize } , 28usize , concat ! ( "Offset of field: " , stringify ! ( ImDrawData ) , "::" , stringify ! ( DisplayPos ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImDrawData > ( ) ) ) . DisplaySize as * const _ as usize } , 36usize , concat ! ( "Offset of field: " , stringify ! ( ImDrawData ) , "::" , stringify ! ( DisplaySize ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImDrawData > ( ) ) ) . FramebufferScale as * const _ as usize } , 44usize , concat ! ( "Offset of field: " , stringify ! ( ImDrawData ) , "::" , stringify ! ( FramebufferScale ) ) ) ; } # [ repr ( C ) ] # [ derive ( Copy , Clone ) ] pub struct ImFontConfig { pub FontData : * mut :: std :: os :: raw :: c_void , pub FontDataSize : :: std :: os :: raw :: c_int , pub FontDataOwnedByAtlas : bool , pub FontNo : :: std :: os :: raw :: c_int , pub SizePixels : f32 , pub OversampleH : :: std :: os :: raw :: c_int , pub OversampleV : :: std :: os :: raw :: c_int , pub PixelSnapH : bool , pub GlyphExtraSpacing : ImVec2 , pub GlyphOffset : ImVec2 , pub GlyphRanges : * const ImWchar , pub GlyphMinAdvanceX : f32 , pub GlyphMaxAdvanceX : f32 , pub MergeMode : bool , pub RasterizerFlags : :: std :: os :: raw :: c_uint , pub RasterizerMultiply : f32 , pub Name : [ :: std :: os :: raw :: c_char ; 40usize ] , pub DstFont : * mut ImFont , } # [ test ] fn bindgen_test_layout_ImFontConfig ( ) { assert_eq ! ( :: std :: mem :: size_of :: < ImFontConfig > ( ) , 136usize , concat ! ( "Size of: " , stringify ! ( ImFontConfig ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < ImFontConfig > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( ImFontConfig ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImFontConfig > ( ) ) ) . FontData as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( ImFontConfig ) , "::" , stringify ! ( FontData ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImFontConfig > ( ) ) ) . FontDataSize as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( ImFontConfig ) , "::" , stringify ! ( FontDataSize ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImFontConfig > ( ) ) ) . FontDataOwnedByAtlas as * const _ as usize } , 12usize , concat ! ( "Offset of field: " , stringify ! ( ImFontConfig ) , "::" , stringify ! ( FontDataOwnedByAtlas ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImFontConfig > ( ) ) ) . FontNo as * const _ as usize } , 16usize , concat ! ( "Offset of field: " , stringify ! ( ImFontConfig ) , "::" , stringify ! ( FontNo ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImFontConfig > ( ) ) ) . SizePixels as * const _ as usize } , 20usize , concat ! ( "Offset of field: " , stringify ! ( ImFontConfig ) , "::" , stringify ! ( SizePixels ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImFontConfig > ( ) ) ) . OversampleH as * const _ as usize } , 24usize , concat ! ( "Offset of field: " , stringify ! ( ImFontConfig ) , "::" , stringify ! ( OversampleH ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImFontConfig > ( ) ) ) . OversampleV as * const _ as usize } , 28usize , concat ! ( "Offset of field: " , stringify ! ( ImFontConfig ) , "::" , stringify ! ( OversampleV ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImFontConfig > ( ) ) ) . PixelSnapH as * const _ as usize } , 32usize , concat ! ( "Offset of field: " , stringify ! ( ImFontConfig ) , "::" , stringify ! ( PixelSnapH ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImFontConfig > ( ) ) ) . GlyphExtraSpacing as * const _ as usize } , 36usize , concat ! ( "Offset of field: " , stringify ! ( ImFontConfig ) , "::" , stringify ! ( GlyphExtraSpacing ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImFontConfig > ( ) ) ) . GlyphOffset as * const _ as usize } , 44usize , concat ! ( "Offset of field: " , stringify ! ( ImFontConfig ) , "::" , stringify ! ( GlyphOffset ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImFontConfig > ( ) ) ) . GlyphRanges as * const _ as usize } , 56usize , concat ! ( "Offset of field: " , stringify ! ( ImFontConfig ) , "::" , stringify ! ( GlyphRanges ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImFontConfig > ( ) ) ) . GlyphMinAdvanceX as * const _ as usize } , 64usize , concat ! ( "Offset of field: " , stringify ! ( ImFontConfig ) , "::" , stringify ! ( GlyphMinAdvanceX ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImFontConfig > ( ) ) ) . GlyphMaxAdvanceX as * const _ as usize } , 68usize , concat ! ( "Offset of field: " , stringify ! ( ImFontConfig ) , "::" , stringify ! ( GlyphMaxAdvanceX ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImFontConfig > ( ) ) ) . MergeMode as * const _ as usize } , 72usize , concat ! ( "Offset of field: " , stringify ! ( ImFontConfig ) , "::" , stringify ! ( MergeMode ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImFontConfig > ( ) ) ) . RasterizerFlags as * const _ as usize } , 76usize , concat ! ( "Offset of field: " , stringify ! ( ImFontConfig ) , "::" , stringify ! ( RasterizerFlags ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImFontConfig > ( ) ) ) . RasterizerMultiply as * const _ as usize } , 80usize , concat ! ( "Offset of field: " , stringify ! ( ImFontConfig ) , "::" , stringify ! ( RasterizerMultiply ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImFontConfig > ( ) ) ) . Name as * const _ as usize } , 84usize , concat ! ( "Offset of field: " , stringify ! ( ImFontConfig ) , "::" , stringify ! ( Name ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImFontConfig > ( ) ) ) . DstFont as * const _ as usize } , 128usize , concat ! ( "Offset of field: " , stringify ! ( ImFontConfig ) , "::" , stringify ! ( DstFont ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct ImFontGlyph { pub Codepoint : ImWchar , pub AdvanceX : f32 , pub X0 : f32 , pub Y0 : f32 , pub X1 : f32 , pub Y1 : f32 , pub U0 : f32 , pub V0 : f32 , pub U1 : f32 , pub V1 : f32 , } # [ test ] fn bindgen_test_layout_ImFontGlyph ( ) { assert_eq ! ( :: std :: mem :: size_of :: < ImFontGlyph > ( ) , 40usize , concat ! ( "Size of: " , stringify ! ( ImFontGlyph ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < ImFontGlyph > ( ) , 4usize , concat ! ( "Alignment of " , stringify ! ( ImFontGlyph ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImFontGlyph > ( ) ) ) . Codepoint as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( ImFontGlyph ) , "::" , stringify ! ( Codepoint ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImFontGlyph > ( ) ) ) . AdvanceX as * const _ as usize } , 4usize , concat ! ( "Offset of field: " , stringify ! ( ImFontGlyph ) , "::" , stringify ! ( AdvanceX ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImFontGlyph > ( ) ) ) . X0 as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( ImFontGlyph ) , "::" , stringify ! ( X0 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImFontGlyph > ( ) ) ) . Y0 as * const _ as usize } , 12usize , concat ! ( "Offset of field: " , stringify ! ( ImFontGlyph ) , "::" , stringify ! ( Y0 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImFontGlyph > ( ) ) ) . X1 as * const _ as usize } , 16usize , concat ! ( "Offset of field: " , stringify ! ( ImFontGlyph ) , "::" , stringify ! ( X1 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImFontGlyph > ( ) ) ) . Y1 as * const _ as usize } , 20usize , concat ! ( "Offset of field: " , stringify ! ( ImFontGlyph ) , "::" , stringify ! ( Y1 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImFontGlyph > ( ) ) ) . U0 as * const _ as usize } , 24usize , concat ! ( "Offset of field: " , stringify ! ( ImFontGlyph ) , "::" , stringify ! ( U0 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImFontGlyph > ( ) ) ) . V0 as * const _ as usize } , 28usize , concat ! ( "Offset of field: " , stringify ! ( ImFontGlyph ) , "::" , stringify ! ( V0 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImFontGlyph > ( ) ) ) . U1 as * const _ as usize } , 32usize , concat ! ( "Offset of field: " , stringify ! ( ImFontGlyph ) , "::" , stringify ! ( U1 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImFontGlyph > ( ) ) ) . V1 as * const _ as usize } , 36usize , concat ! ( "Offset of field: " , stringify ! ( ImFontGlyph ) , "::" , stringify ! ( V1 ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct ImFontGlyphRangesBuilder { pub UsedChars : ImVector_int , } # [ test ] fn bindgen_test_layout_ImFontGlyphRangesBuilder ( ) { assert_eq ! ( :: std :: mem :: size_of :: < ImFontGlyphRangesBuilder > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( ImFontGlyphRangesBuilder ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < ImFontGlyphRangesBuilder > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( ImFontGlyphRangesBuilder ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImFontGlyphRangesBuilder > ( ) ) ) . UsedChars as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( ImFontGlyphRangesBuilder ) , "::" , stringify ! ( UsedChars ) ) ) ; } pub const ImFontAtlasFlags__ImFontAtlasFlags_None : ImFontAtlasFlags_ = 0 ; pub const ImFontAtlasFlags__ImFontAtlasFlags_NoPowerOfTwoHeight : ImFontAtlasFlags_ = 1 ; pub const ImFontAtlasFlags__ImFontAtlasFlags_NoMouseCursors : ImFontAtlasFlags_ = 2 ; pub type ImFontAtlasFlags_ = i32 ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct ImFontAtlas { pub Locked : bool , pub Flags : ImFontAtlasFlags , pub TexID : ImTextureID , pub TexDesiredWidth : :: std :: os :: raw :: c_int , pub TexGlyphPadding : :: std :: os :: raw :: c_int , pub TexPixelsAlpha8 : * mut :: std :: os :: raw :: c_uchar , pub TexPixelsRGBA32 : * mut :: std :: os :: raw :: c_uint , pub TexWidth : :: std :: os :: raw :: c_int , pub TexHeight : :: std :: os :: raw :: c_int , pub TexUvScale : ImVec2 , pub TexUvWhitePixel : ImVec2 , pub Fonts : ImVector_ImFontPtr , pub CustomRects : ImVector_CustomRect , pub ConfigData : ImVector_ImFontConfig , pub CustomRectIds : [ :: std :: os :: raw :: c_int ; 1usize ] , } # [ test ] fn bindgen_test_layout_ImFontAtlas ( ) { assert_eq ! ( :: std :: mem :: size_of :: < ImFontAtlas > ( ) , 120usize , concat ! ( "Size of: " , stringify ! ( ImFontAtlas ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < ImFontAtlas > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( ImFontAtlas ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImFontAtlas > ( ) ) ) . Locked as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( ImFontAtlas ) , "::" , stringify ! ( Locked ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImFontAtlas > ( ) ) ) . Flags as * const _ as usize } , 4usize , concat ! ( "Offset of field: " , stringify ! ( ImFontAtlas ) , "::" , stringify ! ( Flags ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImFontAtlas > ( ) ) ) . TexID as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( ImFontAtlas ) , "::" , stringify ! ( TexID ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImFontAtlas > ( ) ) ) . TexDesiredWidth as * const _ as usize } , 16usize , concat ! ( "Offset of field: " , stringify ! ( ImFontAtlas ) , "::" , stringify ! ( TexDesiredWidth ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImFontAtlas > ( ) ) ) . TexGlyphPadding as * const _ as usize } , 20usize , concat ! ( "Offset of field: " , stringify ! ( ImFontAtlas ) , "::" , stringify ! ( TexGlyphPadding ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImFontAtlas > ( ) ) ) . TexPixelsAlpha8 as * const _ as usize } , 24usize , concat ! ( "Offset of field: " , stringify ! ( ImFontAtlas ) , "::" , stringify ! ( TexPixelsAlpha8 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImFontAtlas > ( ) ) ) . TexPixelsRGBA32 as * const _ as usize } , 32usize , concat ! ( "Offset of field: " , stringify ! ( ImFontAtlas ) , "::" , stringify ! ( TexPixelsRGBA32 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImFontAtlas > ( ) ) ) . TexWidth as * const _ as usize } , 40usize , concat ! ( "Offset of field: " , stringify ! ( ImFontAtlas ) , "::" , stringify ! ( TexWidth ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImFontAtlas > ( ) ) ) . TexHeight as * const _ as usize } , 44usize , concat ! ( "Offset of field: " , stringify ! ( ImFontAtlas ) , "::" , stringify ! ( TexHeight ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImFontAtlas > ( ) ) ) . TexUvScale as * const _ as usize } , 48usize , concat ! ( "Offset of field: " , stringify ! ( ImFontAtlas ) , "::" , stringify ! ( TexUvScale ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImFontAtlas > ( ) ) ) . TexUvWhitePixel as * const _ as usize } , 56usize , concat ! ( "Offset of field: " , stringify ! ( ImFontAtlas ) , "::" , stringify ! ( TexUvWhitePixel ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImFontAtlas > ( ) ) ) . Fonts as * const _ as usize } , 64usize , concat ! ( "Offset of field: " , stringify ! ( ImFontAtlas ) , "::" , stringify ! ( Fonts ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImFontAtlas > ( ) ) ) . CustomRects as * const _ as usize } , 80usize , concat ! ( "Offset of field: " , stringify ! ( ImFontAtlas ) , "::" , stringify ! ( CustomRects ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImFontAtlas > ( ) ) ) . ConfigData as * const _ as usize } , 96usize , concat ! ( "Offset of field: " , stringify ! ( ImFontAtlas ) , "::" , stringify ! ( ConfigData ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImFontAtlas > ( ) ) ) . CustomRectIds as * const _ as usize } , 112usize , concat ! ( "Offset of field: " , stringify ! ( ImFontAtlas ) , "::" , stringify ! ( CustomRectIds ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct ImFont { pub IndexAdvanceX : ImVector_float , pub FallbackAdvanceX : f32 , pub FontSize : f32 , pub IndexLookup : ImVector_ImWchar , pub Glyphs : ImVector_ImFontGlyph , pub FallbackGlyph : * const ImFontGlyph , pub DisplayOffset : ImVec2 , pub ContainerAtlas : * mut ImFontAtlas , pub ConfigData : * const ImFontConfig , pub ConfigDataCount : :: std :: os :: raw :: c_short , pub FallbackChar : ImWchar , pub Scale : f32 , pub Ascent : f32 , pub Descent : f32 , pub MetricsTotalSurface : :: std :: os :: raw :: c_int , pub DirtyLookupTables : bool , } # [ test ] fn bindgen_test_layout_ImFont ( ) { assert_eq ! ( :: std :: mem :: size_of :: < ImFont > ( ) , 112usize , concat ! ( "Size of: " , stringify ! ( ImFont ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < ImFont > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( ImFont ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImFont > ( ) ) ) . IndexAdvanceX as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( ImFont ) , "::" , stringify ! ( IndexAdvanceX ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImFont > ( ) ) ) . FallbackAdvanceX as * const _ as usize } , 16usize , concat ! ( "Offset of field: " , stringify ! ( ImFont ) , "::" , stringify ! ( FallbackAdvanceX ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImFont > ( ) ) ) . FontSize as * const _ as usize } , 20usize , concat ! ( "Offset of field: " , stringify ! ( ImFont ) , "::" , stringify ! ( FontSize ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImFont > ( ) ) ) . IndexLookup as * const _ as usize } , 24usize , concat ! ( "Offset of field: " , stringify ! ( ImFont ) , "::" , stringify ! ( IndexLookup ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImFont > ( ) ) ) . Glyphs as * const _ as usize } , 40usize , concat ! ( "Offset of field: " , stringify ! ( ImFont ) , "::" , stringify ! ( Glyphs ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImFont > ( ) ) ) . FallbackGlyph as * const _ as usize } , 56usize , concat ! ( "Offset of field: " , stringify ! ( ImFont ) , "::" , stringify ! ( FallbackGlyph ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImFont > ( ) ) ) . DisplayOffset as * const _ as usize } , 64usize , concat ! ( "Offset of field: " , stringify ! ( ImFont ) , "::" , stringify ! ( DisplayOffset ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImFont > ( ) ) ) . ContainerAtlas as * const _ as usize } , 72usize , concat ! ( "Offset of field: " , stringify ! ( ImFont ) , "::" , stringify ! ( ContainerAtlas ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImFont > ( ) ) ) . ConfigData as * const _ as usize } , 80usize , concat ! ( "Offset of field: " , stringify ! ( ImFont ) , "::" , stringify ! ( ConfigData ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImFont > ( ) ) ) . ConfigDataCount as * const _ as usize } , 88usize , concat ! ( "Offset of field: " , stringify ! ( ImFont ) , "::" , stringify ! ( ConfigDataCount ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImFont > ( ) ) ) . FallbackChar as * const _ as usize } , 90usize , concat ! ( "Offset of field: " , stringify ! ( ImFont ) , "::" , stringify ! ( FallbackChar ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImFont > ( ) ) ) . Scale as * const _ as usize } , 92usize , concat ! ( "Offset of field: " , stringify ! ( ImFont ) , "::" , stringify ! ( Scale ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImFont > ( ) ) ) . Ascent as * const _ as usize } , 96usize , concat ! ( "Offset of field: " , stringify ! ( ImFont ) , "::" , stringify ! ( Ascent ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImFont > ( ) ) ) . Descent as * const _ as usize } , 100usize , concat ! ( "Offset of field: " , stringify ! ( ImFont ) , "::" , stringify ! ( Descent ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImFont > ( ) ) ) . MetricsTotalSurface as * const _ as usize } , 104usize , concat ! ( "Offset of field: " , stringify ! ( ImFont ) , "::" , stringify ! ( MetricsTotalSurface ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ImFont > ( ) ) ) . DirtyLookupTables as * const _ as usize } , 108usize , concat ! ( "Offset of field: " , stringify ! ( ImFont ) , "::" , stringify ! ( DirtyLookupTables ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct TextRange { pub b : * const :: std :: os :: raw :: c_char , pub e : * const :: std :: os :: raw :: c_char , } # [ test ] fn bindgen_test_layout_TextRange ( ) { assert_eq ! ( :: std :: mem :: size_of :: < TextRange > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( TextRange ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < TextRange > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( TextRange ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < TextRange > ( ) ) ) . b as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( TextRange ) , "::" , stringify ! ( b ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < TextRange > ( ) ) ) . e as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( TextRange ) , "::" , stringify ! ( e ) ) ) ; } # [ repr ( C ) ] # [ derive ( Copy , Clone ) ] pub struct Pair { pub key : ImGuiID , pub __bindgen_anon_1 : Pair__bindgen_ty_1 , } # [ repr ( C ) ] # [ derive ( Copy , Clone ) ] pub union Pair__bindgen_ty_1 { pub val_i : :: std :: os :: raw :: c_int , pub val_f : f32 , pub val_p : * mut :: std :: os :: raw :: c_void , _bindgen_union_align : u64 , } # [ test ] fn bindgen_test_layout_Pair__bindgen_ty_1 ( ) { assert_eq ! ( :: std :: mem :: size_of :: < Pair__bindgen_ty_1 > ( ) , 8usize , concat ! ( "Size of: " , stringify ! ( Pair__bindgen_ty_1 ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < Pair__bindgen_ty_1 > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( Pair__bindgen_ty_1 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < Pair__bindgen_ty_1 > ( ) ) ) . val_i as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( Pair__bindgen_ty_1 ) , "::" , stringify ! ( val_i ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < Pair__bindgen_ty_1 > ( ) ) ) . val_f as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( Pair__bindgen_ty_1 ) , "::" , stringify ! ( val_f ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < Pair__bindgen_ty_1 > ( ) ) ) . val_p as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( Pair__bindgen_ty_1 ) , "::" , stringify ! ( val_p ) ) ) ; } # [ test ] fn bindgen_test_layout_Pair ( ) { assert_eq ! ( :: std :: mem :: size_of :: < Pair > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( Pair ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < Pair > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( Pair ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < Pair > ( ) ) ) . key as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( Pair ) , "::" , stringify ! ( key ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct CustomRect { pub ID : :: std :: os :: raw :: c_uint , pub Width : :: std :: os :: raw :: c_ushort , pub Height : :: std :: os :: raw :: c_ushort , pub X : :: std :: os :: raw :: c_ushort , pub Y : :: std :: os :: raw :: c_ushort , pub GlyphAdvanceX : f32 , pub GlyphOffset : ImVec2 , pub Font : * mut ImFont , } # [ test ] fn bindgen_test_layout_CustomRect ( ) { assert_eq ! ( :: std :: mem :: size_of :: < CustomRect > ( ) , 32usize , concat ! ( "Size of: " , stringify ! ( CustomRect ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < CustomRect > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( CustomRect ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < CustomRect > ( ) ) ) . ID as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( CustomRect ) , "::" , stringify ! ( ID ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < CustomRect > ( ) ) ) . Width as * const _ as usize } , 4usize , concat ! ( "Offset of field: " , stringify ! ( CustomRect ) , "::" , stringify ! ( Width ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < CustomRect > ( ) ) ) . Height as * const _ as usize } , 6usize , concat ! ( "Offset of field: " , stringify ! ( CustomRect ) , "::" , stringify ! ( Height ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < CustomRect > ( ) ) ) . X as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( CustomRect ) , "::" , stringify ! ( X ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < CustomRect > ( ) ) ) . Y as * const _ as usize } , 10usize , concat ! ( "Offset of field: " , stringify ! ( CustomRect ) , "::" , stringify ! ( Y ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < CustomRect > ( ) ) ) . GlyphAdvanceX as * const _ as usize } , 12usize , concat ! ( "Offset of field: " , stringify ! ( CustomRect ) , "::" , stringify ! ( GlyphAdvanceX ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < CustomRect > ( ) ) ) . GlyphOffset as * const _ as usize } , 16usize , concat ! ( "Offset of field: " , stringify ! ( CustomRect ) , "::" , stringify ! ( GlyphOffset ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < CustomRect > ( ) ) ) . Font as * const _ as usize } , 24usize , concat ! ( "Offset of field: " , stringify ! ( CustomRect ) , "::" , stringify ! ( Font ) ) ) ; } extern "C" { pub fn ImVec2_ImVec2 ( ) -> * mut ImVec2 ; } extern "C" { pub fn ImVec2_destroy ( self_ : * mut ImVec2 ) ; } extern "C" { pub fn ImVec2_ImVec2Float ( _x : f32 , _y : f32 ) -> * mut ImVec2 ; } extern "C" { pub fn ImVec4_ImVec4 ( ) -> * mut ImVec4 ; } extern "C" { pub fn ImVec4_destroy ( self_ : * mut ImVec4 ) ; } extern "C" { pub fn ImVec4_ImVec4Float ( _x : f32 , _y : f32 , _z : f32 , _w : f32 ) -> * mut ImVec4 ; } extern "C" { pub fn igCreateContext ( shared_font_atlas : * mut ImFontAtlas ) -> * mut ImGuiContext ; } extern "C" { pub fn igDestroyContext ( ctx : * mut ImGuiContext ) ; } extern "C" { pub fn igGetCurrentContext ( ) -> * mut ImGuiContext ; } extern "C" { pub fn igSetCurrentContext ( ctx : * mut ImGuiContext ) ; } extern "C" { pub fn igDebugCheckVersionAndDataLayout ( version_str : * const :: std :: os :: raw :: c_char , sz_io : usize , sz_style : usize , sz_vec2 : usize , sz_vec4 : usize , sz_drawvert : usize , sz_drawidx : usize ) -> bool ; } extern "C" { pub fn igGetIO ( ) -> * mut ImGuiIO ; } extern "C" { pub fn igGetStyle ( ) -> * mut ImGuiStyle ; } extern "C" { pub fn igNewFrame ( ) ; } extern "C" { pub fn igEndFrame ( ) ; } extern "C" { pub fn igRender ( ) ; } extern "C" { pub fn igGetDrawData ( ) -> * mut ImDrawData ; } extern "C" { pub fn igShowDemoWindow ( p_open : * mut bool ) ; } extern "C" { pub fn igShowAboutWindow ( p_open : * mut bool ) ; } extern "C" { pub fn igShowMetricsWindow ( p_open : * mut bool ) ; } extern "C" { pub fn igShowStyleEditor ( ref_ : * mut ImGuiStyle ) ; } extern "C" { pub fn igShowStyleSelector ( label : * const :: std :: os :: raw :: c_char ) -> bool ; } extern "C" { pub fn igShowFontSelector ( label : * const :: std :: os :: raw :: c_char ) ; } extern "C" { pub fn igShowUserGuide ( ) ; } extern "C" { pub fn igGetVersion ( ) -> * const :: std :: os :: raw :: c_char ; } extern "C" { pub fn igStyleColorsDark ( dst : * mut ImGuiStyle ) ; } extern "C" { pub fn igStyleColorsClassic ( dst : * mut ImGuiStyle ) ; } extern "C" { pub fn igStyleColorsLight ( dst : * mut ImGuiStyle ) ; } extern "C" { pub fn igBegin ( name : * const :: std :: os :: raw :: c_char , p_open : * mut bool , flags : ImGuiWindowFlags ) -> bool ; } extern "C" { pub fn igEnd ( ) ; } extern "C" { pub fn igBeginChild ( str_id : * const :: std :: os :: raw :: c_char , size : ImVec2 , border : bool , flags : ImGuiWindowFlags ) -> bool ; } extern "C" { pub fn igBeginChildID ( id : ImGuiID , size : ImVec2 , border : bool , flags : ImGuiWindowFlags ) -> bool ; } extern "C" { pub fn igEndChild ( ) ; } extern "C" { pub fn igIsWindowAppearing ( ) -> bool ; } extern "C" { pub fn igIsWindowCollapsed ( ) -> bool ; } extern "C" { pub fn igIsWindowFocused ( flags : ImGuiFocusedFlags ) -> bool ; } extern "C" { pub fn igIsWindowHovered ( flags : ImGuiHoveredFlags ) -> bool ; } extern "C" { pub fn igGetWindowDrawList ( ) -> * mut ImDrawList ; } extern "C" { pub fn igGetWindowPos ( ) -> ImVec2 ; } extern "C" { pub fn igGetWindowSize ( ) -> ImVec2 ; } extern "C" { pub fn igGetWindowWidth ( ) -> f32 ; } extern "C" { pub fn igGetWindowHeight ( ) -> f32 ; } extern "C" { pub fn igSetNextWindowPos ( pos : ImVec2 , cond : ImGuiCond , pivot : ImVec2 ) ; } extern "C" { pub fn igSetNextWindowSize ( size : ImVec2 , cond : ImGuiCond ) ; } extern "C" { pub fn igSetNextWindowSizeConstraints ( size_min : ImVec2 , size_max : ImVec2 , custom_callback : ImGuiSizeCallback , custom_callback_data : * mut :: std :: os :: raw :: c_void ) ; } extern "C" { pub fn igSetNextWindowContentSize ( size : ImVec2 ) ; } extern "C" { pub fn igSetNextWindowCollapsed ( collapsed : bool , cond : ImGuiCond ) ; } extern "C" { pub fn igSetNextWindowFocus ( ) ; } extern "C" { pub fn igSetNextWindowBgAlpha ( alpha : f32 ) ; } extern "C" { pub fn igSetWindowPosVec2 ( pos : ImVec2 , cond : ImGuiCond ) ; } extern "C" { pub fn igSetWindowSizeVec2 ( size : ImVec2 , cond : ImGuiCond ) ; } extern "C" { pub fn igSetWindowCollapsedBool ( collapsed : bool , cond : ImGuiCond ) ; } extern "C" { pub fn igSetWindowFocus ( ) ; } extern "C" { pub fn igSetWindowFontScale ( scale : f32 ) ; } extern "C" { pub fn igSetWindowPosStr ( name : * const :: std :: os :: raw :: c_char , pos : ImVec2 , cond : ImGuiCond ) ; } extern "C" { pub fn igSetWindowSizeStr ( name : * const :: std :: os :: raw :: c_char , size : ImVec2 , cond : ImGuiCond ) ; } extern "C" { pub fn igSetWindowCollapsedStr ( name : * const :: std :: os :: raw :: c_char , collapsed : bool , cond : ImGuiCond ) ; } extern "C" { pub fn igSetWindowFocusStr ( name : * const :: std :: os :: raw :: c_char ) ; } extern "C" { pub fn igGetContentRegionMax ( ) -> ImVec2 ; } extern "C" { pub fn igGetContentRegionAvail ( ) -> ImVec2 ; } extern "C" { pub fn igGetWindowContentRegionMin ( ) -> ImVec2 ; } extern "C" { pub fn igGetWindowContentRegionMax ( ) -> ImVec2 ; } extern "C" { pub fn igGetWindowContentRegionWidth ( ) -> f32 ; } extern "C" { pub fn igGetScrollX ( ) -> f32 ; } extern "C" { pub fn igGetScrollY ( ) -> f32 ; } extern "C" { pub fn igGetScrollMaxX ( ) -> f32 ; } extern "C" { pub fn igGetScrollMaxY ( ) -> f32 ; } extern "C" { pub fn igSetScrollX ( scroll_x : f32 ) ; } extern "C" { pub fn igSetScrollY ( scroll_y : f32 ) ; } extern "C" { pub fn igSetScrollHereY ( center_y_ratio : f32 ) ; } extern "C" { pub fn igSetScrollFromPosY ( local_y : f32 , center_y_ratio : f32 ) ; } extern "C" { pub fn igPushFont ( font : * mut ImFont ) ; } extern "C" { pub fn igPopFont ( ) ; } extern "C" { pub fn igPushStyleColorU32 ( idx : ImGuiCol , col : ImU32 ) ; } extern "C" { pub fn igPushStyleColor ( idx : ImGuiCol , col : ImVec4 ) ; } extern "C" { pub fn igPopStyleColor ( count : :: std :: os :: raw :: c_int ) ; } extern "C" { pub fn igPushStyleVarFloat ( idx : ImGuiStyleVar , val : f32 ) ; } extern "C" { pub fn igPushStyleVarVec2 ( idx : ImGuiStyleVar , val : ImVec2 ) ; } extern "C" { pub fn igPopStyleVar ( count : :: std :: os :: raw :: c_int ) ; } extern "C" { pub fn igGetStyleColorVec4 ( idx : ImGuiCol ) -> * const ImVec4 ; } extern "C" { pub fn igGetFont ( ) -> * mut ImFont ; } extern "C" { pub fn igGetFontSize ( ) -> f32 ; } extern "C" { pub fn igGetFontTexUvWhitePixel ( ) -> ImVec2 ; } extern "C" { pub fn igGetColorU32 ( idx : ImGuiCol , alpha_mul : f32 ) -> ImU32 ; } extern "C" { pub fn igGetColorU32Vec4 ( col : ImVec4 ) -> ImU32 ; } extern "C" { pub fn igGetColorU32U32 ( col : ImU32 ) -> ImU32 ; } extern "C" { pub fn igPushItemWidth ( item_width : f32 ) ; } extern "C" { pub fn igPopItemWidth ( ) ; } extern "C" { pub fn igSetNextItemWidth ( item_width : f32 ) ; } extern "C" { pub fn igCalcItemWidth ( ) -> f32 ; } extern "C" { pub fn igPushTextWrapPos ( wrap_local_pos_x : f32 ) ; } extern "C" { pub fn igPopTextWrapPos ( ) ; } extern "C" { pub fn igPushAllowKeyboardFocus ( allow_keyboard_focus : bool ) ; } extern "C" { pub fn igPopAllowKeyboardFocus ( ) ; } extern "C" { pub fn igPushButtonRepeat ( repeat : bool ) ; } extern "C" { pub fn igPopButtonRepeat ( ) ; } extern "C" { pub fn igSeparator ( ) ; } extern "C" { pub fn igSameLine ( offset_from_start_x : f32 , spacing : f32 ) ; } extern "C" { pub fn igNewLine ( ) ; } extern "C" { pub fn igSpacing ( ) ; } extern "C" { pub fn igDummy ( size : ImVec2 ) ; } extern "C" { pub fn igIndent ( indent_w : f32 ) ; } extern "C" { pub fn igUnindent ( indent_w : f32 ) ; } extern "C" { pub fn igBeginGroup ( ) ; } extern "C" { pub fn igEndGroup ( ) ; } extern "C" { pub fn igGetCursorPos ( ) -> ImVec2 ; } extern "C" { pub fn igGetCursorPosX ( ) -> f32 ; } extern "C" { pub fn igGetCursorPosY ( ) -> f32 ; } extern "C" { pub fn igSetCursorPos ( local_pos : ImVec2 ) ; } extern "C" { pub fn igSetCursorPosX ( local_x : f32 ) ; } extern "C" { pub fn igSetCursorPosY ( local_y : f32 ) ; } extern "C" { pub fn igGetCursorStartPos ( ) -> ImVec2 ; } extern "C" { pub fn igGetCursorScreenPos ( ) -> ImVec2 ; } extern "C" { pub fn igSetCursorScreenPos ( pos : ImVec2 ) ; } extern "C" { pub fn igAlignTextToFramePadding ( ) ; } extern "C" { pub fn igGetTextLineHeight ( ) -> f32 ; } extern "C" { pub fn igGetTextLineHeightWithSpacing ( ) -> f32 ; } extern "C" { pub fn igGetFrameHeight ( ) -> f32 ; } extern "C" { pub fn igGetFrameHeightWithSpacing ( ) -> f32 ; } extern "C" { pub fn igPushIDStr ( str_id : * const :: std :: os :: raw :: c_char ) ; } extern "C" { pub fn igPushIDRange ( str_id_begin : * const :: std :: os :: raw :: c_char , str_id_end : * const :: std :: os :: raw :: c_char ) ; } extern "C" { pub fn igPushIDPtr ( ptr_id : * const :: std :: os :: raw :: c_void ) ; } extern "C" { pub fn igPushIDInt ( int_id : :: std :: os :: raw :: c_int ) ; } extern "C" { pub fn igPopID ( ) ; } extern "C" { pub fn igGetIDStr ( str_id : * const :: std :: os :: raw :: c_char ) -> ImGuiID ; } extern "C" { pub fn igGetIDRange ( str_id_begin : * const :: std :: os :: raw :: c_char , str_id_end : * const :: std :: os :: raw :: c_char ) -> ImGuiID ; } extern "C" { pub fn igGetIDPtr ( ptr_id : * const :: std :: os :: raw :: c_void ) -> ImGuiID ; } extern "C" { pub fn igTextUnformatted ( text : * const :: std :: os :: raw :: c_char , text_end : * const :: std :: os :: raw :: c_char ) ; } extern "C" { pub fn igText ( fmt : * const :: std :: os :: raw :: c_char , ... ) ; } extern "C" { pub fn igTextV ( fmt : * const :: std :: os :: raw :: c_char , args : va_list ) ; } extern "C" { pub fn igTextColored ( col : ImVec4 , fmt : * const :: std :: os :: raw :: c_char , ... ) ; } extern "C" { pub fn igTextColoredV ( col : ImVec4 , fmt : * const :: std :: os :: raw :: c_char , args : va_list ) ; } extern "C" { pub fn igTextDisabled ( fmt : * const :: std :: os :: raw :: c_char , ... ) ; } extern "C" { pub fn igTextDisabledV ( fmt : * const :: std :: os :: raw :: c_char , args : va_list ) ; } extern "C" { pub fn igTextWrapped ( fmt : * const :: std :: os :: raw :: c_char , ... ) ; } extern "C" { pub fn igTextWrappedV ( fmt : * const :: std :: os :: raw :: c_char , args : va_list ) ; } extern "C" { pub fn igLabelText ( label : * const :: std :: os :: raw :: c_char , fmt : * const :: std :: os :: raw :: c_char , ... ) ; } extern "C" { pub fn igLabelTextV ( label : * const :: std :: os :: raw :: c_char , fmt : * const :: std :: os :: raw :: c_char , args : va_list ) ; } extern "C" { pub fn igBulletText ( fmt : * const :: std :: os :: raw :: c_char , ... ) ; } extern "C" { pub fn igBulletTextV ( fmt : * const :: std :: os :: raw :: c_char , args : va_list ) ; } extern "C" { pub fn igButton ( label : * const :: std :: os :: raw :: c_char , size : ImVec2 ) -> bool ; } extern "C" { pub fn igSmallButton ( label : * const :: std :: os :: raw :: c_char ) -> bool ; } extern "C" { pub fn igInvisibleButton ( str_id : * const :: std :: os :: raw :: c_char , size : ImVec2 ) -> bool ; } extern "C" { pub fn igArrowButton ( str_id : * const :: std :: os :: raw :: c_char , dir : ImGuiDir ) -> bool ; } extern "C" { pub fn igImage ( user_texture_id : ImTextureID , size : ImVec2 , uv0 : ImVec2 , uv1 : ImVec2 , tint_col : ImVec4 , border_col : ImVec4 ) ; } extern "C" { pub fn igImageButton ( user_texture_id : ImTextureID , size : ImVec2 , uv0 : ImVec2 , uv1 : ImVec2 , frame_padding : :: std :: os :: raw :: c_int , bg_col : ImVec4 , tint_col : ImVec4 ) -> bool ; } extern "C" { pub fn igCheckbox ( label : * const :: std :: os :: raw :: c_char , v : * mut bool ) -> bool ; } extern "C" { pub fn igCheckboxFlags ( label : * const :: std :: os :: raw :: c_char , flags : * mut :: std :: os :: raw :: c_uint , flags_value : :: std :: os :: raw :: c_uint ) -> bool ; } extern "C" { pub fn igRadioButtonBool ( label : * const :: std :: os :: raw :: c_char , active : bool ) -> bool ; } extern "C" { pub fn igRadioButtonIntPtr ( label : * const :: std :: os :: raw :: c_char , v : * mut :: std :: os :: raw :: c_int , v_button : :: std :: os :: raw :: c_int ) -> bool ; } extern "C" { pub fn igProgressBar ( fraction : f32 , size_arg : ImVec2 , overlay : * const :: std :: os :: raw :: c_char ) ; } extern "C" { pub fn igBullet ( ) ; } extern "C" { pub fn igBeginCombo ( label : * const :: std :: os :: raw :: c_char , preview_value : * const :: std :: os :: raw :: c_char , flags : ImGuiComboFlags ) -> bool ; } extern "C" { pub fn igEndCombo ( ) ; } extern "C" { pub fn igCombo ( label : * const :: std :: os :: raw :: c_char , current_item : * mut :: std :: os :: raw :: c_int , items : * const * const :: std :: os :: raw :: c_char , items_count : :: std :: os :: raw :: c_int , popup_max_height_in_items : :: std :: os :: raw :: c_int ) -> bool ; } extern "C" { pub fn igComboStr ( label : * const :: std :: os :: raw :: c_char , current_item : * mut :: std :: os :: raw :: c_int , items_separated_by_zeros : * const :: std :: os :: raw :: c_char , popup_max_height_in_items : :: std :: os :: raw :: c_int ) -> bool ; } extern "C" { pub fn igComboFnPtr ( label : * const :: std :: os :: raw :: c_char , current_item : * mut :: std :: os :: raw :: c_int , items_getter : :: std :: option :: Option < unsafe extern "C" fn ( data : * mut :: std :: os :: raw :: c_void , idx : :: std :: os :: raw :: c_int , out_text : * mut * const :: std :: os :: raw :: c_char ) -> bool > , data : * mut :: std :: os :: raw :: c_void , items_count : :: std :: os :: raw :: c_int , popup_max_height_in_items : :: std :: os :: raw :: c_int ) -> bool ; } extern "C" { pub fn igDragFloat ( label : * const :: std :: os :: raw :: c_char , v : * mut f32 , v_speed : f32 , v_min : f32 , v_max : f32 , format : * const :: std :: os :: raw :: c_char , power : f32 ) -> bool ; } extern "C" { pub fn igDragFloat2 ( label : * const :: std :: os :: raw :: c_char , v : * mut f32 , v_speed : f32 , v_min : f32 , v_max : f32 , format : * const :: std :: os :: raw :: c_char , power : f32 ) -> bool ; } extern "C" { pub fn igDragFloat3 ( label : * const :: std :: os :: raw :: c_char , v : * mut f32 , v_speed : f32 , v_min : f32 , v_max : f32 , format : * const :: std :: os :: raw :: c_char , power : f32 ) -> bool ; } extern "C" { pub fn igDragFloat4 ( label : * const :: std :: os :: raw :: c_char , v : * mut f32 , v_speed : f32 , v_min : f32 , v_max : f32 , format : * const :: std :: os :: raw :: c_char , power : f32 ) -> bool ; } extern "C" { pub fn igDragFloatRange2 ( label : * const :: std :: os :: raw :: c_char , v_current_min : * mut f32 , v_current_max : * mut f32 , v_speed : f32 , v_min : f32 , v_max : f32 , format : * const :: std :: os :: raw :: c_char , format_max : * const :: std :: os :: raw :: c_char , power : f32 ) -> bool ; } extern "C" { pub fn igDragInt ( label : * const :: std :: os :: raw :: c_char , v : * mut :: std :: os :: raw :: c_int , v_speed : f32 , v_min : :: std :: os :: raw :: c_int , v_max : :: std :: os :: raw :: c_int , format : * const :: std :: os :: raw :: c_char ) -> bool ; } extern "C" { pub fn igDragInt2 ( label : * const :: std :: os :: raw :: c_char , v : * mut :: std :: os :: raw :: c_int , v_speed : f32 , v_min : :: std :: os :: raw :: c_int , v_max : :: std :: os :: raw :: c_int , format : * const :: std :: os :: raw :: c_char ) -> bool ; } extern "C" { pub fn igDragInt3 ( label : * const :: std :: os :: raw :: c_char , v : * mut :: std :: os :: raw :: c_int , v_speed : f32 , v_min : :: std :: os :: raw :: c_int , v_max : :: std :: os :: raw :: c_int , format : * const :: std :: os :: raw :: c_char ) -> bool ; } extern "C" { pub fn igDragInt4 ( label : * const :: std :: os :: raw :: c_char , v : * mut :: std :: os :: raw :: c_int , v_speed : f32 , v_min : :: std :: os :: raw :: c_int , v_max : :: std :: os :: raw :: c_int , format : * const :: std :: os :: raw :: c_char ) -> bool ; } extern "C" { pub fn igDragIntRange2 ( label : * const :: std :: os :: raw :: c_char , v_current_min : * mut :: std :: os :: raw :: c_int , v_current_max : * mut :: std :: os :: raw :: c_int , v_speed : f32 , v_min : :: std :: os :: raw :: c_int , v_max : :: std :: os :: raw :: c_int , format : * const :: std :: os :: raw :: c_char , format_max : * const :: std :: os :: raw :: c_char ) -> bool ; } extern "C" { pub fn igDragScalar ( label : * const :: std :: os :: raw :: c_char , data_type : ImGuiDataType , v : * mut :: std :: os :: raw :: c_void , v_speed : f32 , v_min : * const :: std :: os :: raw :: c_void , v_max : * const :: std :: os :: raw :: c_void , format : * const :: std :: os :: raw :: c_char , power : f32 ) -> bool ; } extern "C" { pub fn igDragScalarN ( label : * const :: std :: os :: raw :: c_char , data_type : ImGuiDataType , v : * mut :: std :: os :: raw :: c_void , components : :: std :: os :: raw :: c_int , v_speed : f32 , v_min : * const :: std :: os :: raw :: c_void , v_max : * const :: std :: os :: raw :: c_void , format : * const :: std :: os :: raw :: c_char , power : f32 ) -> bool ; } extern "C" { pub fn igSliderFloat ( label : * const :: std :: os :: raw :: c_char , v : * mut f32 , v_min : f32 , v_max : f32 , format : * const :: std :: os :: raw :: c_char , power : f32 ) -> bool ; } extern "C" { pub fn igSliderFloat2 ( label : * const :: std :: os :: raw :: c_char , v : * mut f32 , v_min : f32 , v_max : f32 , format : * const :: std :: os :: raw :: c_char , power : f32 ) -> bool ; } extern "C" { pub fn igSliderFloat3 ( label : * const :: std :: os :: raw :: c_char , v : * mut f32 , v_min : f32 , v_max : f32 , format : * const :: std :: os :: raw :: c_char , power : f32 ) -> bool ; } extern "C" { pub fn igSliderFloat4 ( label : * const :: std :: os :: raw :: c_char , v : * mut f32 , v_min : f32 , v_max : f32 , format : * const :: std :: os :: raw :: c_char , power : f32 ) -> bool ; } extern "C" { pub fn igSliderAngle ( label : * const :: std :: os :: raw :: c_char , v_rad : * mut f32 , v_degrees_min : f32 , v_degrees_max : f32 , format : * const :: std :: os :: raw :: c_char ) -> bool ; } extern "C" { pub fn igSliderInt ( label : * const :: std :: os :: raw :: c_char , v : * mut :: std :: os :: raw :: c_int , v_min : :: std :: os :: raw :: c_int , v_max : :: std :: os :: raw :: c_int , format : * const :: std :: os :: raw :: c_char ) -> bool ; } extern "C" { pub fn igSliderInt2 ( label : * const :: std :: os :: raw :: c_char , v : * mut :: std :: os :: raw :: c_int , v_min : :: std :: os :: raw :: c_int , v_max : :: std :: os :: raw :: c_int , format : * const :: std :: os :: raw :: c_char ) -> bool ; } extern "C" { pub fn igSliderInt3 ( label : * const :: std :: os :: raw :: c_char , v : * mut :: std :: os :: raw :: c_int , v_min : :: std :: os :: raw :: c_int , v_max : :: std :: os :: raw :: c_int , format : * const :: std :: os :: raw :: c_char ) -> bool ; } extern "C" { pub fn igSliderInt4 ( label : * const :: std :: os :: raw :: c_char , v : * mut :: std :: os :: raw :: c_int , v_min : :: std :: os :: raw :: c_int , v_max : :: std :: os :: raw :: c_int , format : * const :: std :: os :: raw :: c_char ) -> bool ; } extern "C" { pub fn igSliderScalar ( label : * const :: std :: os :: raw :: c_char , data_type : ImGuiDataType , v : * mut :: std :: os :: raw :: c_void , v_min : * const :: std :: os :: raw :: c_void , v_max : * const :: std :: os :: raw :: c_void , format : * const :: std :: os :: raw :: c_char , power : f32 ) -> bool ; } extern "C" { pub fn igSliderScalarN ( label : * const :: std :: os :: raw :: c_char , data_type : ImGuiDataType , v : * mut :: std :: os :: raw :: c_void , components : :: std :: os :: raw :: c_int , v_min : * const :: std :: os :: raw :: c_void , v_max : * const :: std :: os :: raw :: c_void , format : * const :: std :: os :: raw :: c_char , power : f32 ) -> bool ; } extern "C" { pub fn igVSliderFloat ( label : * const :: std :: os :: raw :: c_char , size : ImVec2 , v : * mut f32 , v_min : f32 , v_max : f32 , format : * const :: std :: os :: raw :: c_char , power : f32 ) -> bool ; } extern "C" { pub fn igVSliderInt ( label : * const :: std :: os :: raw :: c_char , size : ImVec2 , v : * mut :: std :: os :: raw :: c_int , v_min : :: std :: os :: raw :: c_int , v_max : :: std :: os :: raw :: c_int , format : * const :: std :: os :: raw :: c_char ) -> bool ; } extern "C" { pub fn igVSliderScalar ( label : * const :: std :: os :: raw :: c_char , size : ImVec2 , data_type : ImGuiDataType , v : * mut :: std :: os :: raw :: c_void , v_min : * const :: std :: os :: raw :: c_void , v_max : * const :: std :: os :: raw :: c_void , format : * const :: std :: os :: raw :: c_char , power : f32 ) -> bool ; } extern "C" { pub fn igInputText ( label : * const :: std :: os :: raw :: c_char , buf : * mut :: std :: os :: raw :: c_char , buf_size : usize , flags : ImGuiInputTextFlags , callback : ImGuiInputTextCallback , user_data : * mut :: std :: os :: raw :: c_void ) -> bool ; } extern "C" { pub fn igInputTextMultiline ( label : * const :: std :: os :: raw :: c_char , buf : * mut :: std :: os :: raw :: c_char , buf_size : usize , size : ImVec2 , flags : ImGuiInputTextFlags , callback : ImGuiInputTextCallback , user_data : * mut :: std :: os :: raw :: c_void ) -> bool ; } extern "C" { pub fn igInputTextWithHint ( label : * const :: std :: os :: raw :: c_char , hint : * const :: std :: os :: raw :: c_char , buf : * mut :: std :: os :: raw :: c_char , buf_size : usize , flags : ImGuiInputTextFlags , callback : ImGuiInputTextCallback , user_data : * mut :: std :: os :: raw :: c_void ) -> bool ; } extern "C" { pub fn igInputFloat ( label : * const :: std :: os :: raw :: c_char , v : * mut f32 , step : f32 , step_fast : f32 , format : * const :: std :: os :: raw :: c_char , flags : ImGuiInputTextFlags ) -> bool ; } extern "C" { pub fn igInputFloat2 ( label : * const :: std :: os :: raw :: c_char , v : * mut f32 , format : * const :: std :: os :: raw :: c_char , flags : ImGuiInputTextFlags ) -> bool ; } extern "C" { pub fn igInputFloat3 ( label : * const :: std :: os :: raw :: c_char , v : * mut f32 , format : * const :: std :: os :: raw :: c_char , flags : ImGuiInputTextFlags ) -> bool ; } extern "C" { pub fn igInputFloat4 ( label : * const :: std :: os :: raw :: c_char , v : * mut f32 , format : * const :: std :: os :: raw :: c_char , flags : ImGuiInputTextFlags ) -> bool ; } extern "C" { pub fn igInputInt ( label : * const :: std :: os :: raw :: c_char , v : * mut :: std :: os :: raw :: c_int , step : :: std :: os :: raw :: c_int , step_fast : :: std :: os :: raw :: c_int , flags : ImGuiInputTextFlags ) -> bool ; } extern "C" { pub fn igInputInt2 ( label : * const :: std :: os :: raw :: c_char , v : * mut :: std :: os :: raw :: c_int , flags : ImGuiInputTextFlags ) -> bool ; } extern "C" { pub fn igInputInt3 ( label : * const :: std :: os :: raw :: c_char , v : * mut :: std :: os :: raw :: c_int , flags : ImGuiInputTextFlags ) -> bool ; } extern "C" { pub fn igInputInt4 ( label : * const :: std :: os :: raw :: c_char , v : * mut :: std :: os :: raw :: c_int , flags : ImGuiInputTextFlags ) -> bool ; } extern "C" { pub fn igInputDouble ( label : * const :: std :: os :: raw :: c_char , v : * mut f64 , step : f64 , step_fast : f64 , format : * const :: std :: os :: raw :: c_char , flags : ImGuiInputTextFlags ) -> bool ; } extern "C" { pub fn igInputScalar ( label : * const :: std :: os :: raw :: c_char , data_type : ImGuiDataType , v : * mut :: std :: os :: raw :: c_void , step : * const :: std :: os :: raw :: c_void , step_fast : * const :: std :: os :: raw :: c_void , format : * const :: std :: os :: raw :: c_char , flags : ImGuiInputTextFlags ) -> bool ; } extern "C" { pub fn igInputScalarN ( label : * const :: std :: os :: raw :: c_char , data_type : ImGuiDataType , v : * mut :: std :: os :: raw :: c_void , components : :: std :: os :: raw :: c_int , step : * const :: std :: os :: raw :: c_void , step_fast : * const :: std :: os :: raw :: c_void , format : * const :: std :: os :: raw :: c_char , flags : ImGuiInputTextFlags ) -> bool ; } extern "C" { pub fn igColorEdit3 ( label : * const :: std :: os :: raw :: c_char , col : * mut f32 , flags : ImGuiColorEditFlags ) -> bool ; } extern "C" { pub fn igColorEdit4 ( label : * const :: std :: os :: raw :: c_char , col : * mut f32 , flags : ImGuiColorEditFlags ) -> bool ; } extern "C" { pub fn igColorPicker3 ( label : * const :: std :: os :: raw :: c_char , col : * mut f32 , flags : ImGuiColorEditFlags ) -> bool ; } extern "C" { pub fn igColorPicker4 ( label : * const :: std :: os :: raw :: c_char , col : * mut f32 , flags : ImGuiColorEditFlags , ref_col : * const f32 ) -> bool ; } extern "C" { pub fn igColorButton ( desc_id : * const :: std :: os :: raw :: c_char , col : ImVec4 , flags : ImGuiColorEditFlags , size : ImVec2 ) -> bool ; } extern "C" { pub fn igSetColorEditOptions ( flags : ImGuiColorEditFlags ) ; } extern "C" { pub fn igTreeNodeStr ( label : * const :: std :: os :: raw :: c_char ) -> bool ; } extern "C" { pub fn igTreeNodeStrStr ( str_id : * const :: std :: os :: raw :: c_char , fmt : * const :: std :: os :: raw :: c_char , ... ) -> bool ; } extern "C" { pub fn igTreeNodePtr ( ptr_id : * const :: std :: os :: raw :: c_void , fmt : * const :: std :: os :: raw :: c_char , ... ) -> bool ; } extern "C" { pub fn igTreeNodeVStr ( str_id : * const :: std :: os :: raw :: c_char , fmt : * const :: std :: os :: raw :: c_char , args : va_list ) -> bool ; } extern "C" { pub fn igTreeNodeVPtr ( ptr_id : * const :: std :: os :: raw :: c_void , fmt : * const :: std :: os :: raw :: c_char , args : va_list ) -> bool ; } extern "C" { pub fn igTreeNodeExStr ( label : * const :: std :: os :: raw :: c_char , flags : ImGuiTreeNodeFlags ) -> bool ; } extern "C" { pub fn igTreeNodeExStrStr ( str_id : * const :: std :: os :: raw :: c_char , flags : ImGuiTreeNodeFlags , fmt : * const :: std :: os :: raw :: c_char , ... ) -> bool ; } extern "C" { pub fn igTreeNodeExPtr ( ptr_id : * const :: std :: os :: raw :: c_void , flags : ImGuiTreeNodeFlags , fmt : * const :: std :: os :: raw :: c_char , ... ) -> bool ; } extern "C" { pub fn igTreeNodeExVStr ( str_id : * const :: std :: os :: raw :: c_char , flags : ImGuiTreeNodeFlags , fmt : * const :: std :: os :: raw :: c_char , args : va_list ) -> bool ; } extern "C" { pub fn igTreeNodeExVPtr ( ptr_id : * const :: std :: os :: raw :: c_void , flags : ImGuiTreeNodeFlags , fmt : * const :: std :: os :: raw :: c_char , args : va_list ) -> bool ; } extern "C" { pub fn igTreePushStr ( str_id : * const :: std :: os :: raw :: c_char ) ; } extern "C" { pub fn igTreePushPtr ( ptr_id : * const :: std :: os :: raw :: c_void ) ; } extern "C" { pub fn igTreePop ( ) ; } extern "C" { pub fn igTreeAdvanceToLabelPos ( ) ; } extern "C" { pub fn igGetTreeNodeToLabelSpacing ( ) -> f32 ; } extern "C" { pub fn igSetNextTreeNodeOpen ( is_open : bool , cond : ImGuiCond ) ; } extern "C" { pub fn igCollapsingHeader ( label : * const :: std :: os :: raw :: c_char , flags : ImGuiTreeNodeFlags ) -> bool ; } extern "C" { pub fn igCollapsingHeaderBoolPtr ( label : * const :: std :: os :: raw :: c_char , p_open : * mut bool , flags : ImGuiTreeNodeFlags ) -> bool ; } extern "C" { pub fn igSelectable ( label : * const :: std :: os :: raw :: c_char , selected : bool , flags : ImGuiSelectableFlags , size : ImVec2 ) -> bool ; } extern "C" { pub fn igSelectableBoolPtr ( label : * const :: std :: os :: raw :: c_char , p_selected : * mut bool , flags : ImGuiSelectableFlags , size : ImVec2 ) -> bool ; } extern "C" { pub fn igListBoxStr_arr ( label : * const :: std :: os :: raw :: c_char , current_item : * mut :: std :: os :: raw :: c_int , items : * const * const :: std :: os :: raw :: c_char , items_count : :: std :: os :: raw :: c_int , height_in_items : :: std :: os :: raw :: c_int ) -> bool ; } extern "C" { pub fn igListBoxFnPtr ( label : * const :: std :: os :: raw :: c_char , current_item : * mut :: std :: os :: raw :: c_int , items_getter : :: std :: option :: Option < unsafe extern "C" fn ( data : * mut :: std :: os :: raw :: c_void , idx : :: std :: os :: raw :: c_int , out_text : * mut * const :: std :: os :: raw :: c_char ) -> bool > , data : * mut :: std :: os :: raw :: c_void , items_count : :: std :: os :: raw :: c_int , height_in_items : :: std :: os :: raw :: c_int ) -> bool ; } extern "C" { pub fn igListBoxHeaderVec2 ( label : * const :: std :: os :: raw :: c_char , size : ImVec2 ) -> bool ; } extern "C" { pub fn igListBoxHeaderInt ( label : * const :: std :: os :: raw :: c_char , items_count : :: std :: os :: raw :: c_int , height_in_items : :: std :: os :: raw :: c_int ) -> bool ; } extern "C" { pub fn igListBoxFooter ( ) ; } extern "C" { pub fn igPlotLines ( label : * const :: std :: os :: raw :: c_char , values : * const f32 , values_count : :: std :: os :: raw :: c_int , values_offset : :: std :: os :: raw :: c_int , overlay_text : * const :: std :: os :: raw :: c_char , scale_min : f32 , scale_max : f32 , graph_size : ImVec2 , stride : :: std :: os :: raw :: c_int ) ; } extern "C" { pub fn igPlotLinesFnPtr ( label : * const :: std :: os :: raw :: c_char , values_getter : :: std :: option :: Option < unsafe extern "C" fn ( data : * mut :: std :: os :: raw :: c_void , idx : :: std :: os :: raw :: c_int ) -> f32 > , data : * mut :: std :: os :: raw :: c_void , values_count : :: std :: os :: raw :: c_int , values_offset : :: std :: os :: raw :: c_int , overlay_text : * const :: std :: os :: raw :: c_char , scale_min : f32 , scale_max : f32 , graph_size : ImVec2 ) ; } extern "C" { pub fn igPlotHistogramFloatPtr ( label : * const :: std :: os :: raw :: c_char , values : * const f32 , values_count : :: std :: os :: raw :: c_int , values_offset : :: std :: os :: raw :: c_int , overlay_text : * const :: std :: os :: raw :: c_char , scale_min : f32 , scale_max : f32 , graph_size : ImVec2 , stride : :: std :: os :: raw :: c_int ) ; } extern "C" { pub fn igPlotHistogramFnPtr ( label : * const :: std :: os :: raw :: c_char , values_getter : :: std :: option :: Option < unsafe extern "C" fn ( data : * mut :: std :: os :: raw :: c_void , idx : :: std :: os :: raw :: c_int ) -> f32 > , data : * mut :: std :: os :: raw :: c_void , values_count : :: std :: os :: raw :: c_int , values_offset : :: std :: os :: raw :: c_int , overlay_text : * const :: std :: os :: raw :: c_char , scale_min : f32 , scale_max : f32 , graph_size : ImVec2 ) ; } extern "C" { pub fn igValueBool ( prefix : * const :: std :: os :: raw :: c_char , b : bool ) ; } extern "C" { pub fn igValueInt ( prefix : * const :: std :: os :: raw :: c_char , v : :: std :: os :: raw :: c_int ) ; } extern "C" { pub fn igValueUint ( prefix : * const :: std :: os :: raw :: c_char , v : :: std :: os :: raw :: c_uint ) ; } extern "C" { pub fn igValueFloat ( prefix : * const :: std :: os :: raw :: c_char , v : f32 , float_format : * const :: std :: os :: raw :: c_char ) ; } extern "C" { pub fn igBeginMainMenuBar ( ) -> bool ; } extern "C" { pub fn igEndMainMenuBar ( ) ; } extern "C" { pub fn igBeginMenuBar ( ) -> bool ; } extern "C" { pub fn igEndMenuBar ( ) ; } extern "C" { pub fn igBeginMenu ( label : * const :: std :: os :: raw :: c_char , enabled : bool ) -> bool ; } extern "C" { pub fn igEndMenu ( ) ; } extern "C" { pub fn igMenuItemBool ( label : * const :: std :: os :: raw :: c_char , shortcut : * const :: std :: os :: raw :: c_char , selected : bool , enabled : bool ) -> bool ; } extern "C" { pub fn igMenuItemBoolPtr ( label : * const :: std :: os :: raw :: c_char , shortcut : * const :: std :: os :: raw :: c_char , p_selected : * mut bool , enabled : bool ) -> bool ; } extern "C" { pub fn igBeginTooltip ( ) ; } extern "C" { pub fn igEndTooltip ( ) ; } extern "C" { pub fn igSetTooltip ( fmt : * const :: std :: os :: raw :: c_char , ... ) ; } extern "C" { pub fn igSetTooltipV ( fmt : * const :: std :: os :: raw :: c_char , args : va_list ) ; } extern "C" { pub fn igOpenPopup ( str_id : * const :: std :: os :: raw :: c_char ) ; } extern "C" { pub fn igBeginPopup ( str_id : * const :: std :: os :: raw :: c_char , flags : ImGuiWindowFlags ) -> bool ; } extern "C" { pub fn igBeginPopupContextItem ( str_id : * const :: std :: os :: raw :: c_char , mouse_button : :: std :: os :: raw :: c_int ) -> bool ; } extern "C" { pub fn igBeginPopupContextWindow ( str_id : * const :: std :: os :: raw :: c_char , mouse_button : :: std :: os :: raw :: c_int , also_over_items : bool ) -> bool ; } extern "C" { pub fn igBeginPopupContextVoid ( str_id : * const :: std :: os :: raw :: c_char , mouse_button : :: std :: os :: raw :: c_int ) -> bool ; } extern "C" { pub fn igBeginPopupModal ( name : * const :: std :: os :: raw :: c_char , p_open : * mut bool , flags : ImGuiWindowFlags ) -> bool ; } extern "C" { pub fn igEndPopup ( ) ; } extern "C" { pub fn igOpenPopupOnItemClick ( str_id : * const :: std :: os :: raw :: c_char , mouse_button : :: std :: os :: raw :: c_int ) -> bool ; } extern "C" { pub fn igIsPopupOpen ( str_id : * const :: std :: os :: raw :: c_char ) -> bool ; } extern "C" { pub fn igCloseCurrentPopup ( ) ; } extern "C" { pub fn igColumns ( count : :: std :: os :: raw :: c_int , id : * const :: std :: os :: raw :: c_char , border : bool ) ; } extern "C" { pub fn igNextColumn ( ) ; } extern "C" { pub fn igGetColumnIndex ( ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn igGetColumnWidth ( column_index : :: std :: os :: raw :: c_int ) -> f32 ; } extern "C" { pub fn igSetColumnWidth ( column_index : :: std :: os :: raw :: c_int , width : f32 ) ; } extern "C" { pub fn igGetColumnOffset ( column_index : :: std :: os :: raw :: c_int ) -> f32 ; } extern "C" { pub fn igSetColumnOffset ( column_index : :: std :: os :: raw :: c_int , offset_x : f32 ) ; } extern "C" { pub fn igGetColumnsCount ( ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn igBeginTabBar ( str_id : * const :: std :: os :: raw :: c_char , flags : ImGuiTabBarFlags ) -> bool ; } extern "C" { pub fn igEndTabBar ( ) ; } extern "C" { pub fn igBeginTabItem ( label : * const :: std :: os :: raw :: c_char , p_open : * mut bool , flags : ImGuiTabItemFlags ) -> bool ; } extern "C" { pub fn igEndTabItem ( ) ; } extern "C" { pub fn igSetTabItemClosed ( tab_or_docked_window_label : * const :: std :: os :: raw :: c_char ) ; } extern "C" { pub fn igLogToTTY ( auto_open_depth : :: std :: os :: raw :: c_int ) ; } extern "C" { pub fn igLogToFile ( auto_open_depth : :: std :: os :: raw :: c_int , filename : * const :: std :: os :: raw :: c_char ) ; } extern "C" { pub fn igLogToClipboard ( auto_open_depth : :: std :: os :: raw :: c_int ) ; } extern "C" { pub fn igLogFinish ( ) ; } extern "C" { pub fn igLogButtons ( ) ; } extern "C" { pub fn igBeginDragDropSource ( flags : ImGuiDragDropFlags ) -> bool ; } extern "C" { pub fn igSetDragDropPayload ( type_ : * const :: std :: os :: raw :: c_char , data : * const :: std :: os :: raw :: c_void , sz : usize , cond : ImGuiCond ) -> bool ; } extern "C" { pub fn igEndDragDropSource ( ) ; } extern "C" { pub fn igBeginDragDropTarget ( ) -> bool ; } extern "C" { pub fn igAcceptDragDropPayload ( type_ : * const :: std :: os :: raw :: c_char , flags : ImGuiDragDropFlags ) -> * const ImGuiPayload ; } extern "C" { pub fn igEndDragDropTarget ( ) ; } extern "C" { pub fn igGetDragDropPayload ( ) -> * const ImGuiPayload ; } extern "C" { pub fn igPushClipRect ( clip_rect_min : ImVec2 , clip_rect_max : ImVec2 , intersect_with_current_clip_rect : bool ) ; } extern "C" { pub fn igPopClipRect ( ) ; } extern "C" { pub fn igSetItemDefaultFocus ( ) ; } extern "C" { pub fn igSetKeyboardFocusHere ( offset : :: std :: os :: raw :: c_int ) ; } extern "C" { pub fn igIsItemHovered ( flags : ImGuiHoveredFlags ) -> bool ; } extern "C" { pub fn igIsItemActive ( ) -> bool ; } extern "C" { pub fn igIsItemFocused ( ) -> bool ; } extern "C" { pub fn igIsItemClicked ( mouse_button : :: std :: os :: raw :: c_int ) -> bool ; } extern "C" { pub fn igIsItemVisible ( ) -> bool ; } extern "C" { pub fn igIsItemEdited ( ) -> bool ; } extern "C" { pub fn igIsItemActivated ( ) -> bool ; } extern "C" { pub fn igIsItemDeactivated ( ) -> bool ; } extern "C" { pub fn igIsItemDeactivatedAfterEdit ( ) -> bool ; } extern "C" { pub fn igIsAnyItemHovered ( ) -> bool ; } extern "C" { pub fn igIsAnyItemActive ( ) -> bool ; } extern "C" { pub fn igIsAnyItemFocused ( ) -> bool ; } extern "C" { pub fn igGetItemRectMin ( ) -> ImVec2 ; } extern "C" { pub fn igGetItemRectMax ( ) -> ImVec2 ; } extern "C" { pub fn igGetItemRectSize ( ) -> ImVec2 ; } extern "C" { pub fn igSetItemAllowOverlap ( ) ; } extern "C" { pub fn igIsRectVisible ( size : ImVec2 ) -> bool ; } extern "C" { pub fn igIsRectVisibleVec2 ( rect_min : ImVec2 , rect_max : ImVec2 ) -> bool ; } extern "C" { pub fn igGetTime ( ) -> f64 ; } extern "C" { pub fn igGetFrameCount ( ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn igGetBackgroundDrawList ( ) -> * mut ImDrawList ; } extern "C" { pub fn igGetForegroundDrawList ( ) -> * mut ImDrawList ; } extern "C" { pub fn igGetDrawListSharedData ( ) -> * mut ImDrawListSharedData ; } extern "C" { pub fn igGetStyleColorName ( idx : ImGuiCol ) -> * const :: std :: os :: raw :: c_char ; } extern "C" { pub fn igSetStateStorage ( storage : * mut ImGuiStorage ) ; } extern "C" { pub fn igGetStateStorage ( ) -> * mut ImGuiStorage ; } extern "C" { pub fn igCalcTextSize ( text : * const :: std :: os :: raw :: c_char , text_end : * const :: std :: os :: raw :: c_char , hide_text_after_double_hash : bool , wrap_width : f32 ) -> ImVec2 ; } extern "C" { pub fn igCalcListClipping ( items_count : :: std :: os :: raw :: c_int , items_height : f32 , out_items_display_start : * mut :: std :: os :: raw :: c_int , out_items_display_end : * mut :: std :: os :: raw :: c_int ) ; } extern "C" { pub fn igBeginChildFrame ( id : ImGuiID , size : ImVec2 , flags : ImGuiWindowFlags ) -> bool ; } extern "C" { pub fn igEndChildFrame ( ) ; } extern "C" { pub fn igColorConvertU32ToFloat4 ( in_ : ImU32 ) -> ImVec4 ; } extern "C" { pub fn igColorConvertFloat4ToU32 ( in_ : ImVec4 ) -> ImU32 ; } extern "C" { pub fn igGetKeyIndex ( imgui_key : ImGuiKey ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn igIsKeyDown ( user_key_index : :: std :: os :: raw :: c_int ) -> bool ; } extern "C" { pub fn igIsKeyPressed ( user_key_index : :: std :: os :: raw :: c_int , repeat : bool ) -> bool ; } extern "C" { pub fn igIsKeyReleased ( user_key_index : :: std :: os :: raw :: c_int ) -> bool ; } extern "C" { pub fn igGetKeyPressedAmount ( key_index : :: std :: os :: raw :: c_int , repeat_delay : f32 , rate : f32 ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn igIsMouseDown ( button : :: std :: os :: raw :: c_int ) -> bool ; } extern "C" { pub fn igIsAnyMouseDown ( ) -> bool ; } extern "C" { pub fn igIsMouseClicked ( button : :: std :: os :: raw :: c_int , repeat : bool ) -> bool ; } extern "C" { pub fn igIsMouseDoubleClicked ( button : :: std :: os :: raw :: c_int ) -> bool ; } extern "C" { pub fn igIsMouseReleased ( button : :: std :: os :: raw :: c_int ) -> bool ; } extern "C" { pub fn igIsMouseDragging ( button : :: std :: os :: raw :: c_int , lock_threshold : f32 ) -> bool ; } extern "C" { pub fn igIsMouseHoveringRect ( r_min : ImVec2 , r_max : ImVec2 , clip : bool ) -> bool ; } extern "C" { pub fn igIsMousePosValid ( mouse_pos : * const ImVec2 ) -> bool ; } extern "C" { pub fn igGetMousePos ( ) -> ImVec2 ; } extern "C" { pub fn igGetMousePosOnOpeningCurrentPopup ( ) -> ImVec2 ; } extern "C" { pub fn igGetMouseDragDelta ( button : :: std :: os :: raw :: c_int , lock_threshold : f32 ) -> ImVec2 ; } extern "C" { pub fn igResetMouseDragDelta ( button : :: std :: os :: raw :: c_int ) ; } extern "C" { pub fn igGetMouseCursor ( ) -> ImGuiMouseCursor ; } extern "C" { pub fn igSetMouseCursor ( type_ : ImGuiMouseCursor ) ; } extern "C" { pub fn igCaptureKeyboardFromApp ( want_capture_keyboard_value : bool ) ; } extern "C" { pub fn igCaptureMouseFromApp ( want_capture_mouse_value : bool ) ; } extern "C" { pub fn igGetClipboardText ( ) -> * const :: std :: os :: raw :: c_char ; } extern "C" { pub fn igSetClipboardText ( text : * const :: std :: os :: raw :: c_char ) ; } extern "C" { pub fn igLoadIniSettingsFromDisk ( ini_filename : * const :: std :: os :: raw :: c_char ) ; } extern "C" { pub fn igLoadIniSettingsFromMemory ( ini_data : * const :: std :: os :: raw :: c_char , ini_size : usize ) ; } extern "C" { pub fn igSaveIniSettingsToDisk ( ini_filename : * const :: std :: os :: raw :: c_char ) ; } extern "C" { pub fn igSaveIniSettingsToMemory ( out_ini_size : * mut usize ) -> * const :: std :: os :: raw :: c_char ; } extern "C" { pub fn igSetAllocatorFunctions ( alloc_func : :: std :: option :: Option < unsafe extern "C" fn ( sz : usize , user_data : * mut :: std :: os :: raw :: c_void ) -> * mut :: std :: os :: raw :: c_void > , free_func : :: std :: option :: Option < unsafe extern "C" fn ( ptr : * mut :: std :: os :: raw :: c_void , user_data : * mut :: std :: os :: raw :: c_void ) > , user_data : * mut :: std :: os :: raw :: c_void ) ; } extern "C" { pub fn igMemAlloc ( size : usize ) -> * mut :: std :: os :: raw :: c_void ; } extern "C" { pub fn igMemFree ( ptr : * mut :: std :: os :: raw :: c_void ) ; } extern "C" { pub fn ImGuiStyle_ImGuiStyle ( ) -> * mut ImGuiStyle ; } extern "C" { pub fn ImGuiStyle_destroy ( self_ : * mut ImGuiStyle ) ; } extern "C" { pub fn ImGuiStyle_ScaleAllSizes ( self_ : * mut ImGuiStyle , scale_factor : f32 ) ; } extern "C" { pub fn ImGuiIO_AddInputCharacter ( self_ : * mut ImGuiIO , c : ImWchar ) ; } extern "C" { pub fn ImGuiIO_AddInputCharactersUTF8 ( self_ : * mut ImGuiIO , str : * const :: std :: os :: raw :: c_char ) ; } extern "C" { pub fn ImGuiIO_ClearInputCharacters ( self_ : * mut ImGuiIO ) ; } extern "C" { pub fn ImGuiIO_ImGuiIO ( ) -> * mut ImGuiIO ; } extern "C" { pub fn ImGuiIO_destroy ( self_ : * mut ImGuiIO ) ; } extern "C" { pub fn ImGuiInputTextCallbackData_ImGuiInputTextCallbackData ( ) -> * mut ImGuiInputTextCallbackData ; } extern "C" { pub fn ImGuiInputTextCallbackData_destroy ( self_ : * mut ImGuiInputTextCallbackData ) ; } extern "C" { pub fn ImGuiInputTextCallbackData_DeleteChars ( self_ : * mut ImGuiInputTextCallbackData , pos : :: std :: os :: raw :: c_int , bytes_count : :: std :: os :: raw :: c_int ) ; } extern "C" { pub fn ImGuiInputTextCallbackData_InsertChars ( self_ : * mut ImGuiInputTextCallbackData , pos : :: std :: os :: raw :: c_int , text : * const :: std :: os :: raw :: c_char , text_end : * const :: std :: os :: raw :: c_char ) ; } extern "C" { pub fn ImGuiInputTextCallbackData_HasSelection ( self_ : * mut ImGuiInputTextCallbackData ) -> bool ; } extern "C" { pub fn ImGuiPayload_ImGuiPayload ( ) -> * mut ImGuiPayload ; } extern "C" { pub fn ImGuiPayload_destroy ( self_ : * mut ImGuiPayload ) ; } extern "C" { pub fn ImGuiPayload_Clear ( self_ : * mut ImGuiPayload ) ; } extern "C" { pub fn ImGuiPayload_IsDataType ( self_ : * mut ImGuiPayload , type_ : * const :: std :: os :: raw :: c_char ) -> bool ; } extern "C" { pub fn ImGuiPayload_IsPreview ( self_ : * mut ImGuiPayload ) -> bool ; } extern "C" { pub fn ImGuiPayload_IsDelivery ( self_ : * mut ImGuiPayload ) -> bool ; } extern "C" { pub fn ImGuiOnceUponAFrame_ImGuiOnceUponAFrame ( ) -> * mut ImGuiOnceUponAFrame ; } extern "C" { pub fn ImGuiOnceUponAFrame_destroy ( self_ : * mut ImGuiOnceUponAFrame ) ; } extern "C" { pub fn ImGuiTextFilter_ImGuiTextFilter ( default_filter : * const :: std :: os :: raw :: c_char ) -> * mut ImGuiTextFilter ; } extern "C" { pub fn ImGuiTextFilter_destroy ( self_ : * mut ImGuiTextFilter ) ; } extern "C" { pub fn ImGuiTextFilter_Draw ( self_ : * mut ImGuiTextFilter , label : * const :: std :: os :: raw :: c_char , width : f32 ) -> bool ; } extern "C" { pub fn ImGuiTextFilter_PassFilter ( self_ : * mut ImGuiTextFilter , text : * const :: std :: os :: raw :: c_char , text_end : * const :: std :: os :: raw :: c_char ) -> bool ; } extern "C" { pub fn ImGuiTextFilter_Build ( self_ : * mut ImGuiTextFilter ) ; } extern "C" { pub fn ImGuiTextFilter_Clear ( self_ : * mut ImGuiTextFilter ) ; } extern "C" { pub fn ImGuiTextFilter_IsActive ( self_ : * mut ImGuiTextFilter ) -> bool ; } extern "C" { pub fn TextRange_TextRange ( ) -> * mut TextRange ; } extern "C" { pub fn TextRange_destroy ( self_ : * mut TextRange ) ; } extern "C" { pub fn TextRange_TextRangeStr ( _b : * const :: std :: os :: raw :: c_char , _e : * const :: std :: os :: raw :: c_char ) -> * mut TextRange ; } extern "C" { pub fn TextRange_begin ( self_ : * mut TextRange ) -> * const :: std :: os :: raw :: c_char ; } extern "C" { pub fn TextRange_end ( self_ : * mut TextRange ) -> * const :: std :: os :: raw :: c_char ; } extern "C" { pub fn TextRange_empty ( self_ : * mut TextRange ) -> bool ; } extern "C" { pub fn TextRange_split ( self_ : * mut TextRange , separator : :: std :: os :: raw :: c_char , out : * mut ImVector_TextRange ) ; } extern "C" { pub fn ImGuiTextBuffer_ImGuiTextBuffer ( ) -> * mut ImGuiTextBuffer ; } extern "C" { pub fn ImGuiTextBuffer_destroy ( self_ : * mut ImGuiTextBuffer ) ; } extern "C" { pub fn ImGuiTextBuffer_begin ( self_ : * mut ImGuiTextBuffer ) -> * const :: std :: os :: raw :: c_char ; } extern "C" { pub fn ImGuiTextBuffer_end ( self_ : * mut ImGuiTextBuffer ) -> * const :: std :: os :: raw :: c_char ; } extern "C" { pub fn ImGuiTextBuffer_size ( self_ : * mut ImGuiTextBuffer ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn ImGuiTextBuffer_empty ( self_ : * mut ImGuiTextBuffer ) -> bool ; } extern "C" { pub fn ImGuiTextBuffer_clear ( self_ : * mut ImGuiTextBuffer ) ; } extern "C" { pub fn ImGuiTextBuffer_reserve ( self_ : * mut ImGuiTextBuffer , capacity : :: std :: os :: raw :: c_int ) ; } extern "C" { pub fn ImGuiTextBuffer_c_str ( self_ : * mut ImGuiTextBuffer ) -> * const :: std :: os :: raw :: c_char ; } extern "C" { pub fn ImGuiTextBuffer_append ( self_ : * mut ImGuiTextBuffer , str : * const :: std :: os :: raw :: c_char , str_end : * const :: std :: os :: raw :: c_char ) ; } extern "C" { pub fn ImGuiTextBuffer_appendfv ( self_ : * mut ImGuiTextBuffer , fmt : * const :: std :: os :: raw :: c_char , args : va_list ) ; } extern "C" { pub fn Pair_PairInt ( _key : ImGuiID , _val_i : :: std :: os :: raw :: c_int ) -> * mut Pair ; } extern "C" { pub fn Pair_destroy ( self_ : * mut Pair ) ; } extern "C" { pub fn Pair_PairFloat ( _key : ImGuiID , _val_f : f32 ) -> * mut Pair ; } extern "C" { pub fn Pair_PairPtr ( _key : ImGuiID , _val_p : * mut :: std :: os :: raw :: c_void ) -> * mut Pair ; } extern "C" { pub fn ImGuiStorage_Clear ( self_ : * mut ImGuiStorage ) ; } extern "C" { pub fn ImGuiStorage_GetInt ( self_ : * mut ImGuiStorage , key : ImGuiID , default_val : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn ImGuiStorage_SetInt ( self_ : * mut ImGuiStorage , key : ImGuiID , val : :: std :: os :: raw :: c_int ) ; } extern "C" { pub fn ImGuiStorage_GetBool ( self_ : * mut ImGuiStorage , key : ImGuiID , default_val : bool ) -> bool ; } extern "C" { pub fn ImGuiStorage_SetBool ( self_ : * mut ImGuiStorage , key : ImGuiID , val : bool ) ; } extern "C" { pub fn ImGuiStorage_GetFloat ( self_ : * mut ImGuiStorage , key : ImGuiID , default_val : f32 ) -> f32 ; } extern "C" { pub fn ImGuiStorage_SetFloat ( self_ : * mut ImGuiStorage , key : ImGuiID , val : f32 ) ; } extern "C" { pub fn ImGuiStorage_GetVoidPtr ( self_ : * mut ImGuiStorage , key : ImGuiID ) -> * mut :: std :: os :: raw :: c_void ; } extern "C" { pub fn ImGuiStorage_SetVoidPtr ( self_ : * mut ImGuiStorage , key : ImGuiID , val : * mut :: std :: os :: raw :: c_void ) ; } extern "C" { pub fn ImGuiStorage_GetIntRef ( self_ : * mut ImGuiStorage , key : ImGuiID , default_val : :: std :: os :: raw :: c_int ) -> * mut :: std :: os :: raw :: c_int ; } extern "C" { pub fn ImGuiStorage_GetBoolRef ( self_ : * mut ImGuiStorage , key : ImGuiID , default_val : bool ) -> * mut bool ; } extern "C" { pub fn ImGuiStorage_GetFloatRef ( self_ : * mut ImGuiStorage , key : ImGuiID , default_val : f32 ) -> * mut f32 ; } extern "C" { pub fn ImGuiStorage_GetVoidPtrRef ( self_ : * mut ImGuiStorage , key : ImGuiID , default_val : * mut :: std :: os :: raw :: c_void ) -> * mut * mut :: std :: os :: raw :: c_void ; } extern "C" { pub fn ImGuiStorage_SetAllInt ( self_ : * mut ImGuiStorage , val : :: std :: os :: raw :: c_int ) ; } extern "C" { pub fn ImGuiStorage_BuildSortByKey ( self_ : * mut ImGuiStorage ) ; } extern "C" { pub fn ImGuiListClipper_ImGuiListClipper ( items_count : :: std :: os :: raw :: c_int , items_height : f32 ) -> * mut ImGuiListClipper ; } extern "C" { pub fn ImGuiListClipper_destroy ( self_ : * mut ImGuiListClipper ) ; } extern "C" { pub fn ImGuiListClipper_Step ( self_ : * mut ImGuiListClipper ) -> bool ; } extern "C" { pub fn ImGuiListClipper_Begin ( self_ : * mut ImGuiListClipper , items_count : :: std :: os :: raw :: c_int , items_height : f32 ) ; } extern "C" { pub fn ImGuiListClipper_End ( self_ : * mut ImGuiListClipper ) ; } extern "C" { pub fn ImColor_ImColor ( ) -> * mut ImColor ; } extern "C" { pub fn ImColor_destroy ( self_ : * mut ImColor ) ; } extern "C" { pub fn ImColor_ImColorInt ( r : :: std :: os :: raw :: c_int , g : :: std :: os :: raw :: c_int , b : :: std :: os :: raw :: c_int , a : :: std :: os :: raw :: c_int ) -> * mut ImColor ; } extern "C" { pub fn ImColor_ImColorU32 ( rgba : ImU32 ) -> * mut ImColor ; } extern "C" { pub fn ImColor_ImColorFloat ( r : f32 , g : f32 , b : f32 , a : f32 ) -> * mut ImColor ; } extern "C" { pub fn ImColor_ImColorVec4 ( col : ImVec4 ) -> * mut ImColor ; } extern "C" { pub fn ImColor_SetHSV ( self_ : * mut ImColor , h : f32 , s : f32 , v : f32 , a : f32 ) ; } extern "C" { pub fn ImColor_HSV ( self_ : * mut ImColor , h : f32 , s : f32 , v : f32 , a : f32 ) -> ImColor ; } extern "C" { pub fn ImDrawCmd_ImDrawCmd ( ) -> * mut ImDrawCmd ; } extern "C" { pub fn ImDrawCmd_destroy ( self_ : * mut ImDrawCmd ) ; } extern "C" { pub fn ImDrawList_ImDrawList ( shared_data : * const ImDrawListSharedData ) -> * mut ImDrawList ; } extern "C" { pub fn ImDrawList_destroy ( self_ : * mut ImDrawList ) ; } extern "C" { pub fn ImDrawList_PushClipRect ( self_ : * mut ImDrawList , clip_rect_min : ImVec2 , clip_rect_max : ImVec2 , intersect_with_current_clip_rect : bool ) ; } extern "C" { pub fn ImDrawList_PushClipRectFullScreen ( self_ : * mut ImDrawList ) ; } extern "C" { pub fn ImDrawList_PopClipRect ( self_ : * mut ImDrawList ) ; } extern "C" { pub fn ImDrawList_PushTextureID ( self_ : * mut ImDrawList , texture_id : ImTextureID ) ; } extern "C" { pub fn ImDrawList_PopTextureID ( self_ : * mut ImDrawList ) ; } extern "C" { pub fn ImDrawList_GetClipRectMin ( self_ : * mut ImDrawList ) -> ImVec2 ; } extern "C" { pub fn ImDrawList_GetClipRectMax ( self_ : * mut ImDrawList ) -> ImVec2 ; } extern "C" { pub fn ImDrawList_AddLine ( self_ : * mut ImDrawList , a : ImVec2 , b : ImVec2 , col : ImU32 , thickness : f32 ) ; } extern "C" { pub fn ImDrawList_AddRect ( self_ : * mut ImDrawList , a : ImVec2 , b : ImVec2 , col : ImU32 , rounding : f32 , rounding_corners_flags : :: std :: os :: raw :: c_int , thickness : f32 ) ; } extern "C" { pub fn ImDrawList_AddRectFilled ( self_ : * mut ImDrawList , a : ImVec2 , b : ImVec2 , col : ImU32 , rounding : f32 , rounding_corners_flags : :: std :: os :: raw :: c_int ) ; } extern "C" { pub fn ImDrawList_AddRectFilledMultiColor ( self_ : * mut ImDrawList , a : ImVec2 , b : ImVec2 , col_upr_left : ImU32 , col_upr_right : ImU32 , col_bot_right : ImU32 , col_bot_left : ImU32 ) ; } extern "C" { pub fn ImDrawList_AddQuad ( self_ : * mut ImDrawList , a : ImVec2 , b : ImVec2 , c : ImVec2 , d : ImVec2 , col : ImU32 , thickness : f32 ) ; } extern "C" { pub fn ImDrawList_AddQuadFilled ( self_ : * mut ImDrawList , a : ImVec2 , b : ImVec2 , c : ImVec2 , d : ImVec2 , col : ImU32 ) ; } extern "C" { pub fn ImDrawList_AddTriangle ( self_ : * mut ImDrawList , a : ImVec2 , b : ImVec2 , c : ImVec2 , col : ImU32 , thickness : f32 ) ; } extern "C" { pub fn ImDrawList_AddTriangleFilled ( self_ : * mut ImDrawList , a : ImVec2 , b : ImVec2 , c : ImVec2 , col : ImU32 ) ; } extern "C" { pub fn ImDrawList_AddCircle ( self_ : * mut ImDrawList , centre : ImVec2 , radius : f32 , col : ImU32 , num_segments : :: std :: os :: raw :: c_int , thickness : f32 ) ; } extern "C" { pub fn ImDrawList_AddCircleFilled ( self_ : * mut ImDrawList , centre : ImVec2 , radius : f32 , col : ImU32 , num_segments : :: std :: os :: raw :: c_int ) ; } extern "C" { pub fn ImDrawList_AddText ( self_ : * mut ImDrawList , pos : ImVec2 , col : ImU32 , text_begin : * const :: std :: os :: raw :: c_char , text_end : * const :: std :: os :: raw :: c_char ) ; } extern "C" { pub fn ImDrawList_AddTextFontPtr ( self_ : * mut ImDrawList , font : * const ImFont , font_size : f32 , pos : ImVec2 , col : ImU32 , text_begin : * const :: std :: os :: raw :: c_char , text_end : * const :: std :: os :: raw :: c_char , wrap_width : f32 , cpu_fine_clip_rect : * const ImVec4 ) ; } extern "C" { pub fn ImDrawList_AddImage ( self_ : * mut ImDrawList , user_texture_id : ImTextureID , a : ImVec2 , b : ImVec2 , uv_a : ImVec2 , uv_b : ImVec2 , col : ImU32 ) ; } extern "C" { pub fn ImDrawList_AddImageQuad ( self_ : * mut ImDrawList , user_texture_id : ImTextureID , a : ImVec2 , b : ImVec2 , c : ImVec2 , d : ImVec2 , uv_a : ImVec2 , uv_b : ImVec2 , uv_c : ImVec2 , uv_d : ImVec2 , col : ImU32 ) ; } extern "C" { pub fn ImDrawList_AddImageRounded ( self_ : * mut ImDrawList , user_texture_id : ImTextureID , a : ImVec2 , b : ImVec2 , uv_a : ImVec2 , uv_b : ImVec2 , col : ImU32 , rounding : f32 , rounding_corners : :: std :: os :: raw :: c_int ) ; } extern "C" { pub fn ImDrawList_AddPolyline ( self_ : * mut ImDrawList , points : * const ImVec2 , num_points : :: std :: os :: raw :: c_int , col : ImU32 , closed : bool , thickness : f32 ) ; } extern "C" { pub fn ImDrawList_AddConvexPolyFilled ( self_ : * mut ImDrawList , points : * const ImVec2 , num_points : :: std :: os :: raw :: c_int , col : ImU32 ) ; } extern "C" { pub fn ImDrawList_AddBezierCurve ( self_ : * mut ImDrawList , pos0 : ImVec2 , cp0 : ImVec2 , cp1 : ImVec2 , pos1 : ImVec2 , col : ImU32 , thickness : f32 , num_segments : :: std :: os :: raw :: c_int ) ; } extern "C" { pub fn ImDrawList_PathClear ( self_ : * mut ImDrawList ) ; } extern "C" { pub fn ImDrawList_PathLineTo ( self_ : * mut ImDrawList , pos : ImVec2 ) ; } extern "C" { pub fn ImDrawList_PathLineToMergeDuplicate ( self_ : * mut ImDrawList , pos : ImVec2 ) ; } extern "C" { pub fn ImDrawList_PathFillConvex ( self_ : * mut ImDrawList , col : ImU32 ) ; } extern "C" { pub fn ImDrawList_PathStroke ( self_ : * mut ImDrawList , col : ImU32 , closed : bool , thickness : f32 ) ; } extern "C" { pub fn ImDrawList_PathArcTo ( self_ : * mut ImDrawList , centre : ImVec2 , radius : f32 , a_min : f32 , a_max : f32 , num_segments : :: std :: os :: raw :: c_int ) ; } extern "C" { pub fn ImDrawList_PathArcToFast ( self_ : * mut ImDrawList , centre : ImVec2 , radius : f32 , a_min_of_12 : :: std :: os :: raw :: c_int , a_max_of_12 : :: std :: os :: raw :: c_int ) ; } extern "C" { pub fn ImDrawList_PathBezierCurveTo ( self_ : * mut ImDrawList , p1 : ImVec2 , p2 : ImVec2 , p3 : ImVec2 , num_segments : :: std :: os :: raw :: c_int ) ; } extern "C" { pub fn ImDrawList_PathRect ( self_ : * mut ImDrawList , rect_min : ImVec2 , rect_max : ImVec2 , rounding : f32 , rounding_corners_flags : :: std :: os :: raw :: c_int ) ; } extern "C" { pub fn ImDrawList_ChannelsSplit ( self_ : * mut ImDrawList , channels_count : :: std :: os :: raw :: c_int ) ; } extern "C" { pub fn ImDrawList_ChannelsMerge ( self_ : * mut ImDrawList ) ; } extern "C" { pub fn ImDrawList_ChannelsSetCurrent ( self_ : * mut ImDrawList , channel_index : :: std :: os :: raw :: c_int ) ; } extern "C" { pub fn ImDrawList_AddCallback ( self_ : * mut ImDrawList , callback : ImDrawCallback , callback_data : * mut :: std :: os :: raw :: c_void ) ; } extern "C" { pub fn ImDrawList_AddDrawCmd ( self_ : * mut ImDrawList ) ; } extern "C" { pub fn ImDrawList_CloneOutput ( self_ : * mut ImDrawList ) -> * mut ImDrawList ; } extern "C" { pub fn ImDrawList_Clear ( self_ : * mut ImDrawList ) ; } extern "C" { pub fn ImDrawList_ClearFreeMemory ( self_ : * mut ImDrawList ) ; } extern "C" { pub fn ImDrawList_PrimReserve ( self_ : * mut ImDrawList , idx_count : :: std :: os :: raw :: c_int , vtx_count : :: std :: os :: raw :: c_int ) ; } extern "C" { pub fn ImDrawList_PrimRect ( self_ : * mut ImDrawList , a : ImVec2 , b : ImVec2 , col : ImU32 ) ; } extern "C" { pub fn ImDrawList_PrimRectUV ( self_ : * mut ImDrawList , a : ImVec2 , b : ImVec2 , uv_a : ImVec2 , uv_b : ImVec2 , col : ImU32 ) ; } extern "C" { pub fn ImDrawList_PrimQuadUV ( self_ : * mut ImDrawList , a : ImVec2 , b : ImVec2 , c : ImVec2 , d : ImVec2 , uv_a : ImVec2 , uv_b : ImVec2 , uv_c : ImVec2 , uv_d : ImVec2 , col : ImU32 ) ; } extern "C" { pub fn ImDrawList_PrimWriteVtx ( self_ : * mut ImDrawList , pos : ImVec2 , uv : ImVec2 , col : ImU32 ) ; } extern "C" { pub fn ImDrawList_PrimWriteIdx ( self_ : * mut ImDrawList , idx : ImDrawIdx ) ; } extern "C" { pub fn ImDrawList_PrimVtx ( self_ : * mut ImDrawList , pos : ImVec2 , uv : ImVec2 , col : ImU32 ) ; } extern "C" { pub fn ImDrawList_UpdateClipRect ( self_ : * mut ImDrawList ) ; } extern "C" { pub fn ImDrawList_UpdateTextureID ( self_ : * mut ImDrawList ) ; } extern "C" { pub fn ImDrawData_ImDrawData ( ) -> * mut ImDrawData ; } extern "C" { pub fn ImDrawData_destroy ( self_ : * mut ImDrawData ) ; } extern "C" { pub fn ImDrawData_Clear ( self_ : * mut ImDrawData ) ; } extern "C" { pub fn ImDrawData_DeIndexAllBuffers ( self_ : * mut ImDrawData ) ; } extern "C" { pub fn ImDrawData_ScaleClipRects ( self_ : * mut ImDrawData , fb_scale : ImVec2 ) ; } extern "C" { pub fn ImFontConfig_ImFontConfig ( ) -> * mut ImFontConfig ; } extern "C" { pub fn ImFontConfig_destroy ( self_ : * mut ImFontConfig ) ; } extern "C" { pub fn ImFontGlyphRangesBuilder_ImFontGlyphRangesBuilder ( ) -> * mut ImFontGlyphRangesBuilder ; } extern "C" { pub fn ImFontGlyphRangesBuilder_destroy ( self_ : * mut ImFontGlyphRangesBuilder ) ; } extern "C" { pub fn ImFontGlyphRangesBuilder_GetBit ( self_ : * mut ImFontGlyphRangesBuilder , n : :: std :: os :: raw :: c_int ) -> bool ; } extern "C" { pub fn ImFontGlyphRangesBuilder_SetBit ( self_ : * mut ImFontGlyphRangesBuilder , n : :: std :: os :: raw :: c_int ) ; } extern "C" { pub fn ImFontGlyphRangesBuilder_AddChar ( self_ : * mut ImFontGlyphRangesBuilder , c : ImWchar ) ; } extern "C" { pub fn ImFontGlyphRangesBuilder_AddText ( self_ : * mut ImFontGlyphRangesBuilder , text : * const :: std :: os :: raw :: c_char , text_end : * const :: std :: os :: raw :: c_char ) ; } extern "C" { pub fn ImFontGlyphRangesBuilder_AddRanges ( self_ : * mut ImFontGlyphRangesBuilder , ranges : * const ImWchar ) ; } extern "C" { pub fn ImFontGlyphRangesBuilder_BuildRanges ( self_ : * mut ImFontGlyphRangesBuilder , out_ranges : * mut ImVector_ImWchar ) ; } extern "C" { pub fn ImFontAtlas_ImFontAtlas ( ) -> * mut ImFontAtlas ; } extern "C" { pub fn ImFontAtlas_destroy ( self_ : * mut ImFontAtlas ) ; } extern "C" { pub fn ImFontAtlas_AddFont ( self_ : * mut ImFontAtlas , font_cfg : * const ImFontConfig ) -> * mut ImFont ; } extern "C" { pub fn ImFontAtlas_AddFontDefault ( self_ : * mut ImFontAtlas , font_cfg : * const ImFontConfig ) -> * mut ImFont ; } extern "C" { pub fn ImFontAtlas_AddFontFromFileTTF ( self_ : * mut ImFontAtlas , filename : * const :: std :: os :: raw :: c_char , size_pixels : f32 , font_cfg : * const ImFontConfig , glyph_ranges : * const ImWchar ) -> * mut ImFont ; } extern "C" { pub fn ImFontAtlas_AddFontFromMemoryTTF ( self_ : * mut ImFontAtlas , font_data : * mut :: std :: os :: raw :: c_void , font_size : :: std :: os :: raw :: c_int , size_pixels : f32 , font_cfg : * const ImFontConfig , glyph_ranges : * const ImWchar ) -> * mut ImFont ; } extern "C" { pub fn ImFontAtlas_AddFontFromMemoryCompressedTTF ( self_ : * mut ImFontAtlas , compressed_font_data : * const :: std :: os :: raw :: c_void , compressed_font_size : :: std :: os :: raw :: c_int , size_pixels : f32 , font_cfg : * const ImFontConfig , glyph_ranges : * const ImWchar ) -> * mut ImFont ; } extern "C" { pub fn ImFontAtlas_AddFontFromMemoryCompressedBase85TTF ( self_ : * mut ImFontAtlas , compressed_font_data_base85 : * const :: std :: os :: raw :: c_char , size_pixels : f32 , font_cfg : * const ImFontConfig , glyph_ranges : * const ImWchar ) -> * mut ImFont ; } extern "C" { pub fn ImFontAtlas_ClearInputData ( self_ : * mut ImFontAtlas ) ; } extern "C" { pub fn ImFontAtlas_ClearTexData ( self_ : * mut ImFontAtlas ) ; } extern "C" { pub fn ImFontAtlas_ClearFonts ( self_ : * mut ImFontAtlas ) ; } extern "C" { pub fn ImFontAtlas_Clear ( self_ : * mut ImFontAtlas ) ; } extern "C" { pub fn ImFontAtlas_Build ( self_ : * mut ImFontAtlas ) -> bool ; } extern "C" { pub fn ImFontAtlas_GetTexDataAsAlpha8 ( self_ : * mut ImFontAtlas , out_pixels : * mut * mut :: std :: os :: raw :: c_uchar , out_width : * mut :: std :: os :: raw :: c_int , out_height : * mut :: std :: os :: raw :: c_int , out_bytes_per_pixel : * mut :: std :: os :: raw :: c_int ) ; } extern "C" { pub fn ImFontAtlas_GetTexDataAsRGBA32 ( self_ : * mut ImFontAtlas , out_pixels : * mut * mut :: std :: os :: raw :: c_uchar , out_width : * mut :: std :: os :: raw :: c_int , out_height : * mut :: std :: os :: raw :: c_int , out_bytes_per_pixel : * mut :: std :: os :: raw :: c_int ) ; } extern "C" { pub fn ImFontAtlas_IsBuilt ( self_ : * mut ImFontAtlas ) -> bool ; } extern "C" { pub fn ImFontAtlas_SetTexID ( self_ : * mut ImFontAtlas , id : ImTextureID ) ; } extern "C" { pub fn ImFontAtlas_GetGlyphRangesDefault ( self_ : * mut ImFontAtlas ) -> * const ImWchar ; } extern "C" { pub fn ImFontAtlas_GetGlyphRangesKorean ( self_ : * mut ImFontAtlas ) -> * const ImWchar ; } extern "C" { pub fn ImFontAtlas_GetGlyphRangesJapanese ( self_ : * mut ImFontAtlas ) -> * const ImWchar ; } extern "C" { pub fn ImFontAtlas_GetGlyphRangesChineseFull ( self_ : * mut ImFontAtlas ) -> * const ImWchar ; } extern "C" { pub fn ImFontAtlas_GetGlyphRangesChineseSimplifiedCommon ( self_ : * mut ImFontAtlas ) -> * const ImWchar ; } extern "C" { pub fn ImFontAtlas_GetGlyphRangesCyrillic ( self_ : * mut ImFontAtlas ) -> * const ImWchar ; } extern "C" { pub fn ImFontAtlas_GetGlyphRangesThai ( self_ : * mut ImFontAtlas ) -> * const ImWchar ; } extern "C" { pub fn ImFontAtlas_GetGlyphRangesVietnamese ( self_ : * mut ImFontAtlas ) -> * const ImWchar ; } extern "C" { pub fn CustomRect_CustomRect ( ) -> * mut CustomRect ; } extern "C" { pub fn CustomRect_destroy ( self_ : * mut CustomRect ) ; } extern "C" { pub fn CustomRect_IsPacked ( self_ : * mut CustomRect ) -> bool ; } extern "C" { pub fn ImFontAtlas_AddCustomRectRegular ( self_ : * mut ImFontAtlas , id : :: std :: os :: raw :: c_uint , width : :: std :: os :: raw :: c_int , height : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn ImFontAtlas_AddCustomRectFontGlyph ( self_ : * mut ImFontAtlas , font : * mut ImFont , id : ImWchar , width : :: std :: os :: raw :: c_int , height : :: std :: os :: raw :: c_int , advance_x : f32 , offset : ImVec2 ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn ImFontAtlas_GetCustomRectByIndex ( self_ : * mut ImFontAtlas , index : :: std :: os :: raw :: c_int ) -> * const CustomRect ; } extern "C" { pub fn ImFontAtlas_CalcCustomRectUV ( self_ : * mut ImFontAtlas , rect : * const CustomRect , out_uv_min : * mut ImVec2 , out_uv_max : * mut ImVec2 ) ; } extern "C" { pub fn ImFontAtlas_GetMouseCursorTexData ( self_ : * mut ImFontAtlas , cursor : ImGuiMouseCursor , out_offset : * mut ImVec2 , out_size : * mut ImVec2 , out_uv_border : * mut ImVec2 , out_uv_fill : * mut ImVec2 ) -> bool ; } extern "C" { pub fn ImFont_ImFont ( ) -> * mut ImFont ; } extern "C" { pub fn ImFont_destroy ( self_ : * mut ImFont ) ; } extern "C" { pub fn ImFont_FindGlyph ( self_ : * mut ImFont , c : ImWchar ) -> * const ImFontGlyph ; } extern "C" { pub fn ImFont_FindGlyphNoFallback ( self_ : * mut ImFont , c : ImWchar ) -> * const ImFontGlyph ; } extern "C" { pub fn ImFont_GetCharAdvance ( self_ : * mut ImFont , c : ImWchar ) -> f32 ; } extern "C" { pub fn ImFont_IsLoaded ( self_ : * mut ImFont ) -> bool ; } extern "C" { pub fn ImFont_GetDebugName ( self_ : * mut ImFont ) -> * const :: std :: os :: raw :: c_char ; } extern "C" { pub fn ImFont_CalcTextSizeA ( self_ : * mut ImFont , size : f32 , max_width : f32 , wrap_width : f32 , text_begin : * const :: std :: os :: raw :: c_char , text_end : * const :: std :: os :: raw :: c_char , remaining : * mut * const :: std :: os :: raw :: c_char ) -> ImVec2 ; } extern "C" { pub fn ImFont_CalcWordWrapPositionA ( self_ : * mut ImFont , scale : f32 , text : * const :: std :: os :: raw :: c_char , text_end : * const :: std :: os :: raw :: c_char , wrap_width : f32 ) -> * const :: std :: os :: raw :: c_char ; } extern "C" { pub fn ImFont_RenderChar ( self_ : * mut ImFont , draw_list : * mut ImDrawList , size : f32 , pos : ImVec2 , col : ImU32 , c : ImWchar ) ; } extern "C" { pub fn ImFont_RenderText ( self_ : * mut ImFont , draw_list : * mut ImDrawList , size : f32 , pos : ImVec2 , col : ImU32 , clip_rect : ImVec4 , text_begin : * const :: std :: os :: raw :: c_char , text_end : * const :: std :: os :: raw :: c_char , wrap_width : f32 , cpu_fine_clip : bool ) ; } extern "C" { pub fn ImFont_BuildLookupTable ( self_ : * mut ImFont ) ; } extern "C" { pub fn ImFont_ClearOutputData ( self_ : * mut ImFont ) ; } extern "C" { pub fn ImFont_GrowIndex ( self_ : * mut ImFont , new_size : :: std :: os :: raw :: c_int ) ; } extern "C" { pub fn ImFont_AddGlyph ( self_ : * mut ImFont , c : ImWchar , x0 : f32 , y0 : f32 , x1 : f32 , y1 : f32 , u0 : f32 , v0 : f32 , u1 : f32 , v1 : f32 , advance_x : f32 ) ; } extern "C" { pub fn ImFont_AddRemapChar ( self_ : * mut ImFont , dst : ImWchar , src : ImWchar , overwrite_dst : bool ) ; } extern "C" { pub fn ImFont_SetFallbackChar ( self_ : * mut ImFont , c : ImWchar ) ; } extern "C" { pub fn igGetWindowPos_nonUDT ( pOut : * mut ImVec2 ) ; } extern "C" { pub fn igGetWindowPos_nonUDT2 ( ) -> ImVec2_Simple ; } extern "C" { pub fn igGetWindowSize_nonUDT ( pOut : * mut ImVec2 ) ; } extern "C" { pub fn igGetWindowSize_nonUDT2 ( ) -> ImVec2_Simple ; } extern "C" { pub fn igGetContentRegionMax_nonUDT ( pOut : * mut ImVec2 ) ; } extern "C" { pub fn igGetContentRegionMax_nonUDT2 ( ) -> ImVec2_Simple ; } extern "C" { pub fn igGetContentRegionAvail_nonUDT ( pOut : * mut ImVec2 ) ; } extern "C" { pub fn igGetContentRegionAvail_nonUDT2 ( ) -> ImVec2_Simple ; } extern "C" { pub fn igGetWindowContentRegionMin_nonUDT ( pOut : * mut ImVec2 ) ; } extern "C" { pub fn igGetWindowContentRegionMin_nonUDT2 ( ) -> ImVec2_Simple ; } extern "C" { pub fn igGetWindowContentRegionMax_nonUDT ( pOut : * mut ImVec2 ) ; } extern "C" { pub fn igGetWindowContentRegionMax_nonUDT2 ( ) -> ImVec2_Simple ; } extern "C" { pub fn igGetFontTexUvWhitePixel_nonUDT ( pOut : * mut ImVec2 ) ; } extern "C" { pub fn igGetFontTexUvWhitePixel_nonUDT2 ( ) -> ImVec2_Simple ; } extern "C" { pub fn igGetCursorPos_nonUDT ( pOut : * mut ImVec2 ) ; } extern "C" { pub fn igGetCursorPos_nonUDT2 ( ) -> ImVec2_Simple ; } extern "C" { pub fn igGetCursorStartPos_nonUDT ( pOut : * mut ImVec2 ) ; } extern "C" { pub fn igGetCursorStartPos_nonUDT2 ( ) -> ImVec2_Simple ; } extern "C" { pub fn igGetCursorScreenPos_nonUDT ( pOut : * mut ImVec2 ) ; } extern "C" { pub fn igGetCursorScreenPos_nonUDT2 ( ) -> ImVec2_Simple ; } extern "C" { pub fn igGetItemRectMin_nonUDT ( pOut : * mut ImVec2 ) ; } extern "C" { pub fn igGetItemRectMin_nonUDT2 ( ) -> ImVec2_Simple ; } extern "C" { pub fn igGetItemRectMax_nonUDT ( pOut : * mut ImVec2 ) ; } extern "C" { pub fn igGetItemRectMax_nonUDT2 ( ) -> ImVec2_Simple ; } extern "C" { pub fn igGetItemRectSize_nonUDT ( pOut : * mut ImVec2 ) ; } extern "C" { pub fn igGetItemRectSize_nonUDT2 ( ) -> ImVec2_Simple ; } extern "C" { pub fn igCalcTextSize_nonUDT ( pOut : * mut ImVec2 , text : * const :: std :: os :: raw :: c_char , text_end : * const :: std :: os :: raw :: c_char , hide_text_after_double_hash : bool , wrap_width : f32 ) ; } extern "C" { pub fn igCalcTextSize_nonUDT2 ( text : * const :: std :: os :: raw :: c_char , text_end : * const :: std :: os :: raw :: c_char , hide_text_after_double_hash : bool , wrap_width : f32 ) -> ImVec2_Simple ; } extern "C" { pub fn igColorConvertU32ToFloat4_nonUDT ( pOut : * mut ImVec4 , in_ : ImU32 ) ; } extern "C" { pub fn igColorConvertU32ToFloat4_nonUDT2 ( in_ : ImU32 ) -> ImVec4_Simple ; } extern "C" { pub fn igGetMousePos_nonUDT ( pOut : * mut ImVec2 ) ; } extern "C" { pub fn igGetMousePos_nonUDT2 ( ) -> ImVec2_Simple ; } extern "C" { pub fn igGetMousePosOnOpeningCurrentPopup_nonUDT ( pOut : * mut ImVec2 ) ; } extern "C" { pub fn igGetMousePosOnOpeningCurrentPopup_nonUDT2 ( ) -> ImVec2_Simple ; } extern "C" { pub fn igGetMouseDragDelta_nonUDT ( pOut : * mut ImVec2 , button : :: std :: os :: raw :: c_int , lock_threshold : f32 ) ; } extern "C" { pub fn igGetMouseDragDelta_nonUDT2 ( button : :: std :: os :: raw :: c_int , lock_threshold : f32 ) -> ImVec2_Simple ; } extern "C" { pub fn ImColor_HSV_nonUDT ( pOut : * mut ImColor , self_ : * mut ImColor , h : f32 , s : f32 , v : f32 , a : f32 ) ; } extern "C" { pub fn ImColor_HSV_nonUDT2 ( self_ : * mut ImColor , h : f32 , s : f32 , v : f32 , a : f32 ) -> ImColor_Simple ; } extern "C" { pub fn ImDrawList_GetClipRectMin_nonUDT ( pOut : * mut ImVec2 , self_ : * mut ImDrawList ) ; } extern "C" { pub fn ImDrawList_GetClipRectMin_nonUDT2 ( self_ : * mut ImDrawList ) -> ImVec2_Simple ; } extern "C" { pub fn ImDrawList_GetClipRectMax_nonUDT ( pOut : * mut ImVec2 , self_ : * mut ImDrawList ) ; } extern "C" { pub fn ImDrawList_GetClipRectMax_nonUDT2 ( self_ : * mut ImDrawList ) -> ImVec2_Simple ; } extern "C" { pub fn ImFont_CalcTextSizeA_nonUDT ( pOut : * mut ImVec2 , self_ : * mut ImFont , size : f32 , max_width : f32 , wrap_width : f32 , text_begin : * const :: std :: os :: raw :: c_char , text_end : * const :: std :: os :: raw :: c_char , remaining : * mut * const :: std :: os :: raw :: c_char ) ; } extern "C" { pub fn ImFont_CalcTextSizeA_nonUDT2 ( self_ : * mut ImFont , size : f32 , max_width : f32 , wrap_width : f32 , text_begin : * const :: std :: os :: raw :: c_char , text_end : * const :: std :: os :: raw :: c_char , remaining : * mut * const :: std :: os :: raw :: c_char ) -> ImVec2_Simple ; } extern "C" { pub fn ImVector_float_ImVector_float ( ) -> * mut ImVector_float ; } extern "C" { pub fn ImVector_float_destroy ( self_ : * mut ImVector_float ) ; } extern "C" { pub fn ImVector_ImWchar_ImVector_ImWchar ( ) -> * mut ImVector_ImWchar ; } extern "C" { pub fn ImVector_ImWchar_destroy ( self_ : * mut ImVector_ImWchar ) ; } extern "C" { pub fn ImVector_ImFontConfig_ImVector_ImFontConfig ( ) -> * mut ImVector_ImFontConfig ; } extern "C" { pub fn ImVector_ImFontConfig_destroy ( self_ : * mut ImVector_ImFontConfig ) ; } extern "C" { pub fn ImVector_ImFontGlyph_ImVector_ImFontGlyph ( ) -> * mut ImVector_ImFontGlyph ; } extern "C" { pub fn ImVector_ImFontGlyph_destroy ( self_ : * mut ImVector_ImFontGlyph ) ; } extern "C" { pub fn ImVector_TextRange_ImVector_TextRange ( ) -> * mut ImVector_TextRange ; } extern "C" { pub fn ImVector_TextRange_destroy ( self_ : * mut ImVector_TextRange ) ; } extern "C" { pub fn ImVector_CustomRect_ImVector_CustomRect ( ) -> * mut ImVector_CustomRect ; } extern "C" { pub fn ImVector_CustomRect_destroy ( self_ : * mut ImVector_CustomRect ) ; } extern "C" { pub fn ImVector_ImDrawChannel_ImVector_ImDrawChannel ( ) -> * mut ImVector_ImDrawChannel ; } extern "C" { pub fn ImVector_ImDrawChannel_destroy ( self_ : * mut ImVector_ImDrawChannel ) ; } extern "C" { pub fn ImVector_char_ImVector_char ( ) -> * mut ImVector_char ; } extern "C" { pub fn ImVector_char_destroy ( self_ : * mut ImVector_char ) ; } extern "C" { pub fn ImVector_ImTextureID_ImVector_ImTextureID ( ) -> * mut ImVector_ImTextureID ; } extern "C" { pub fn ImVector_ImTextureID_destroy ( self_ : * mut ImVector_ImTextureID ) ; } extern "C" { pub fn ImVector_ImDrawVert_ImVector_ImDrawVert ( ) -> * mut ImVector_ImDrawVert ; } extern "C" { pub fn ImVector_ImDrawVert_destroy ( self_ : * mut ImVector_ImDrawVert ) ; } extern "C" { pub fn ImVector_int_ImVector_int ( ) -> * mut ImVector_int ; } extern "C" { pub fn ImVector_int_destroy ( self_ : * mut ImVector_int ) ; } extern "C" { pub fn ImVector_Pair_ImVector_Pair ( ) -> * mut ImVector_Pair ; } extern "C" { pub fn ImVector_Pair_destroy ( self_ : * mut ImVector_Pair ) ; } extern "C" { pub fn ImVector_ImFontPtr_ImVector_ImFontPtr ( ) -> * mut ImVector_ImFontPtr ; } extern "C" { pub fn ImVector_ImFontPtr_destroy ( self_ : * mut ImVector_ImFontPtr ) ; } extern "C" { pub fn ImVector_ImVec4_ImVector_ImVec4 ( ) -> * mut ImVector_ImVec4 ; } extern "C" { pub fn ImVector_ImVec4_destroy ( self_ : * mut ImVector_ImVec4 ) ; } extern "C" { pub fn ImVector_ImDrawCmd_ImVector_ImDrawCmd ( ) -> * mut ImVector_ImDrawCmd ; } extern "C" { pub fn ImVector_ImDrawCmd_destroy ( self_ : * mut ImVector_ImDrawCmd ) ; } extern "C" { pub fn ImVector_ImDrawIdx_ImVector_ImDrawIdx ( ) -> * mut ImVector_ImDrawIdx ; } extern "C" { pub fn ImVector_ImDrawIdx_destroy ( self_ : * mut ImVector_ImDrawIdx ) ; } extern "C" { pub fn ImVector_ImVec2_ImVector_ImVec2 ( ) -> * mut ImVector_ImVec2 ; } extern "C" { pub fn ImVector_ImVec2_destroy ( self_ : * mut ImVector_ImVec2 ) ; } extern "C" { pub fn ImVector_float_ImVector_floatVector ( src : ImVector_float ) -> * mut ImVector_float ; } extern "C" { pub fn ImVector_ImWchar_ImVector_ImWcharVector ( src : ImVector_ImWchar ) -> * mut ImVector_ImWchar ; } extern "C" { pub fn ImVector_ImFontConfig_ImVector_ImFontConfigVector ( src : ImVector_ImFontConfig ) -> * mut ImVector_ImFontConfig ; } extern "C" { pub fn ImVector_ImFontGlyph_ImVector_ImFontGlyphVector ( src : ImVector_ImFontGlyph ) -> * mut ImVector_ImFontGlyph ; } extern "C" { pub fn ImVector_TextRange_ImVector_TextRangeVector ( src : ImVector_TextRange ) -> * mut ImVector_TextRange ; } extern "C" { pub fn ImVector_CustomRect_ImVector_CustomRectVector ( src : ImVector_CustomRect ) -> * mut ImVector_CustomRect ; } extern "C" { pub fn ImVector_ImDrawChannel_ImVector_ImDrawChannelVector ( src : ImVector_ImDrawChannel ) -> * mut ImVector_ImDrawChannel ; } extern "C" { pub fn ImVector_char_ImVector_charVector ( src : ImVector_char ) -> * mut ImVector_char ; } extern "C" { pub fn ImVector_ImTextureID_ImVector_ImTextureIDVector ( src : ImVector_ImTextureID ) -> * mut ImVector_ImTextureID ; } extern "C" { pub fn ImVector_ImDrawVert_ImVector_ImDrawVertVector ( src : ImVector_ImDrawVert ) -> * mut ImVector_ImDrawVert ; } extern "C" { pub fn ImVector_int_ImVector_intVector ( src : ImVector_int ) -> * mut ImVector_int ; } extern "C" { pub fn ImVector_Pair_ImVector_PairVector ( src : ImVector_Pair ) -> * mut ImVector_Pair ; } extern "C" { pub fn ImVector_ImFontPtr_ImVector_ImFontPtrVector ( src : ImVector_ImFontPtr ) -> * mut ImVector_ImFontPtr ; } extern "C" { pub fn ImVector_ImVec4_ImVector_ImVec4Vector ( src : ImVector_ImVec4 ) -> * mut ImVector_ImVec4 ; } extern "C" { pub fn ImVector_ImDrawCmd_ImVector_ImDrawCmdVector ( src : ImVector_ImDrawCmd ) -> * mut ImVector_ImDrawCmd ; } extern "C" { pub fn ImVector_ImDrawIdx_ImVector_ImDrawIdxVector ( src : ImVector_ImDrawIdx ) -> * mut ImVector_ImDrawIdx ; } extern "C" { pub fn ImVector_ImVec2_ImVector_ImVec2Vector ( src : ImVector_ImVec2 ) -> * mut ImVector_ImVec2 ; } extern "C" { pub fn ImVector_float_empty ( self_ : * const ImVector_float ) -> bool ; } extern "C" { pub fn ImVector_ImWchar_empty ( self_ : * const ImVector_ImWchar ) -> bool ; } extern "C" { pub fn ImVector_ImFontConfig_empty ( self_ : * const ImVector_ImFontConfig ) -> bool ; } extern "C" { pub fn ImVector_ImFontGlyph_empty ( self_ : * const ImVector_ImFontGlyph ) -> bool ; } extern "C" { pub fn ImVector_TextRange_empty ( self_ : * const ImVector_TextRange ) -> bool ; } extern "C" { pub fn ImVector_CustomRect_empty ( self_ : * const ImVector_CustomRect ) -> bool ; } extern "C" { pub fn ImVector_ImDrawChannel_empty ( self_ : * const ImVector_ImDrawChannel ) -> bool ; } extern "C" { pub fn ImVector_char_empty ( self_ : * const ImVector_char ) -> bool ; } extern "C" { pub fn ImVector_ImTextureID_empty ( self_ : * const ImVector_ImTextureID ) -> bool ; } extern "C" { pub fn ImVector_ImDrawVert_empty ( self_ : * const ImVector_ImDrawVert ) -> bool ; } extern "C" { pub fn ImVector_int_empty ( self_ : * const ImVector_int ) -> bool ; } extern "C" { pub fn ImVector_Pair_empty ( self_ : * const ImVector_Pair ) -> bool ; } extern "C" { pub fn ImVector_ImFontPtr_empty ( self_ : * const ImVector_ImFontPtr ) -> bool ; } extern "C" { pub fn ImVector_ImVec4_empty ( self_ : * const ImVector_ImVec4 ) -> bool ; } extern "C" { pub fn ImVector_ImDrawCmd_empty ( self_ : * const ImVector_ImDrawCmd ) -> bool ; } extern "C" { pub fn ImVector_ImDrawIdx_empty ( self_ : * const ImVector_ImDrawIdx ) -> bool ; } extern "C" { pub fn ImVector_ImVec2_empty ( self_ : * const ImVector_ImVec2 ) -> bool ; } extern "C" { pub fn ImVector_float_size ( self_ : * const ImVector_float ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn ImVector_ImWchar_size ( self_ : * const ImVector_ImWchar ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn ImVector_ImFontConfig_size ( self_ : * const ImVector_ImFontConfig ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn ImVector_ImFontGlyph_size ( self_ : * const ImVector_ImFontGlyph ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn ImVector_TextRange_size ( self_ : * const ImVector_TextRange ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn ImVector_CustomRect_size ( self_ : * const ImVector_CustomRect ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn ImVector_ImDrawChannel_size ( self_ : * const ImVector_ImDrawChannel ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn ImVector_char_size ( self_ : * const ImVector_char ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn ImVector_ImTextureID_size ( self_ : * const ImVector_ImTextureID ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn ImVector_ImDrawVert_size ( self_ : * const ImVector_ImDrawVert ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn ImVector_int_size ( self_ : * const ImVector_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn ImVector_Pair_size ( self_ : * const ImVector_Pair ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn ImVector_ImFontPtr_size ( self_ : * const ImVector_ImFontPtr ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn ImVector_ImVec4_size ( self_ : * const ImVector_ImVec4 ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn ImVector_ImDrawCmd_size ( self_ : * const ImVector_ImDrawCmd ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn ImVector_ImDrawIdx_size ( self_ : * const ImVector_ImDrawIdx ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn ImVector_ImVec2_size ( self_ : * const ImVector_ImVec2 ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn ImVector_float_size_in_bytes ( self_ : * const ImVector_float ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn ImVector_ImWchar_size_in_bytes ( self_ : * const ImVector_ImWchar ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn ImVector_ImFontConfig_size_in_bytes ( self_ : * const ImVector_ImFontConfig ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn ImVector_ImFontGlyph_size_in_bytes ( self_ : * const ImVector_ImFontGlyph ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn ImVector_TextRange_size_in_bytes ( self_ : * const ImVector_TextRange ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn ImVector_CustomRect_size_in_bytes ( self_ : * const ImVector_CustomRect ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn ImVector_ImDrawChannel_size_in_bytes ( self_ : * const ImVector_ImDrawChannel ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn ImVector_char_size_in_bytes ( self_ : * const ImVector_char ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn ImVector_ImTextureID_size_in_bytes ( self_ : * const ImVector_ImTextureID ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn ImVector_ImDrawVert_size_in_bytes ( self_ : * const ImVector_ImDrawVert ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn ImVector_int_size_in_bytes ( self_ : * const ImVector_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn ImVector_Pair_size_in_bytes ( self_ : * const ImVector_Pair ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn ImVector_ImFontPtr_size_in_bytes ( self_ : * const ImVector_ImFontPtr ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn ImVector_ImVec4_size_in_bytes ( self_ : * const ImVector_ImVec4 ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn ImVector_ImDrawCmd_size_in_bytes ( self_ : * const ImVector_ImDrawCmd ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn ImVector_ImDrawIdx_size_in_bytes ( self_ : * const ImVector_ImDrawIdx ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn ImVector_ImVec2_size_in_bytes ( self_ : * const ImVector_ImVec2 ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn ImVector_float_capacity ( self_ : * const ImVector_float ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn ImVector_ImWchar_capacity ( self_ : * const ImVector_ImWchar ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn ImVector_ImFontConfig_capacity ( self_ : * const ImVector_ImFontConfig ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn ImVector_ImFontGlyph_capacity ( self_ : * const ImVector_ImFontGlyph ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn ImVector_TextRange_capacity ( self_ : * const ImVector_TextRange ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn ImVector_CustomRect_capacity ( self_ : * const ImVector_CustomRect ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn ImVector_ImDrawChannel_capacity ( self_ : * const ImVector_ImDrawChannel ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn ImVector_char_capacity ( self_ : * const ImVector_char ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn ImVector_ImTextureID_capacity ( self_ : * const ImVector_ImTextureID ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn ImVector_ImDrawVert_capacity ( self_ : * const ImVector_ImDrawVert ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn ImVector_int_capacity ( self_ : * const ImVector_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn ImVector_Pair_capacity ( self_ : * const ImVector_Pair ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn ImVector_ImFontPtr_capacity ( self_ : * const ImVector_ImFontPtr ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn ImVector_ImVec4_capacity ( self_ : * const ImVector_ImVec4 ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn ImVector_ImDrawCmd_capacity ( self_ : * const ImVector_ImDrawCmd ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn ImVector_ImDrawIdx_capacity ( self_ : * const ImVector_ImDrawIdx ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn ImVector_ImVec2_capacity ( self_ : * const ImVector_ImVec2 ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn ImVector_float_clear ( self_ : * mut ImVector_float ) ; } extern "C" { pub fn ImVector_ImWchar_clear ( self_ : * mut ImVector_ImWchar ) ; } extern "C" { pub fn ImVector_ImFontConfig_clear ( self_ : * mut ImVector_ImFontConfig ) ; } extern "C" { pub fn ImVector_ImFontGlyph_clear ( self_ : * mut ImVector_ImFontGlyph ) ; } extern "C" { pub fn ImVector_TextRange_clear ( self_ : * mut ImVector_TextRange ) ; } extern "C" { pub fn ImVector_CustomRect_clear ( self_ : * mut ImVector_CustomRect ) ; } extern "C" { pub fn ImVector_ImDrawChannel_clear ( self_ : * mut ImVector_ImDrawChannel ) ; } extern "C" { pub fn ImVector_char_clear ( self_ : * mut ImVector_char ) ; } extern "C" { pub fn ImVector_ImTextureID_clear ( self_ : * mut ImVector_ImTextureID ) ; } extern "C" { pub fn ImVector_ImDrawVert_clear ( self_ : * mut ImVector_ImDrawVert ) ; } extern "C" { pub fn ImVector_int_clear ( self_ : * mut ImVector_int ) ; } extern "C" { pub fn ImVector_Pair_clear ( self_ : * mut ImVector_Pair ) ; } extern "C" { pub fn ImVector_ImFontPtr_clear ( self_ : * mut ImVector_ImFontPtr ) ; } extern "C" { pub fn ImVector_ImVec4_clear ( self_ : * mut ImVector_ImVec4 ) ; } extern "C" { pub fn ImVector_ImDrawCmd_clear ( self_ : * mut ImVector_ImDrawCmd ) ; } extern "C" { pub fn ImVector_ImDrawIdx_clear ( self_ : * mut ImVector_ImDrawIdx ) ; } extern "C" { pub fn ImVector_ImVec2_clear ( self_ : * mut ImVector_ImVec2 ) ; } extern "C" { pub fn ImVector_float_begin ( self_ : * mut ImVector_float ) -> * mut f32 ; } extern "C" { pub fn ImVector_ImWchar_begin ( self_ : * mut ImVector_ImWchar ) -> * mut ImWchar ; } extern "C" { pub fn ImVector_ImFontConfig_begin ( self_ : * mut ImVector_ImFontConfig ) -> * mut ImFontConfig ; } extern "C" { pub fn ImVector_ImFontGlyph_begin ( self_ : * mut ImVector_ImFontGlyph ) -> * mut ImFontGlyph ; } extern "C" { pub fn ImVector_TextRange_begin ( self_ : * mut ImVector_TextRange ) -> * mut TextRange ; } extern "C" { pub fn ImVector_CustomRect_begin ( self_ : * mut ImVector_CustomRect ) -> * mut CustomRect ; } extern "C" { pub fn ImVector_ImDrawChannel_begin ( self_ : * mut ImVector_ImDrawChannel ) -> * mut ImDrawChannel ; } extern "C" { pub fn ImVector_char_begin ( self_ : * mut ImVector_char ) -> * mut :: std :: os :: raw :: c_char ; } extern "C" { pub fn ImVector_ImTextureID_begin ( self_ : * mut ImVector_ImTextureID ) -> * mut ImTextureID ; } extern "C" { pub fn ImVector_ImDrawVert_begin ( self_ : * mut ImVector_ImDrawVert ) -> * mut ImDrawVert ; } extern "C" { pub fn ImVector_int_begin ( self_ : * mut ImVector_int ) -> * mut :: std :: os :: raw :: c_int ; } extern "C" { pub fn ImVector_Pair_begin ( self_ : * mut ImVector_Pair ) -> * mut Pair ; } extern "C" { pub fn ImVector_ImFontPtr_begin ( self_ : * mut ImVector_ImFontPtr ) -> * mut * mut ImFont ; } extern "C" { pub fn ImVector_ImVec4_begin ( self_ : * mut ImVector_ImVec4 ) -> * mut ImVec4 ; } extern "C" { pub fn ImVector_ImDrawCmd_begin ( self_ : * mut ImVector_ImDrawCmd ) -> * mut ImDrawCmd ; } extern "C" { pub fn ImVector_ImDrawIdx_begin ( self_ : * mut ImVector_ImDrawIdx ) -> * mut ImDrawIdx ; } extern "C" { pub fn ImVector_ImVec2_begin ( self_ : * mut ImVector_ImVec2 ) -> * mut ImVec2 ; } extern "C" { pub fn ImVector_float_begin_const ( self_ : * const ImVector_float ) -> * const f32 ; } extern "C" { pub fn ImVector_ImWchar_begin_const ( self_ : * const ImVector_ImWchar ) -> * const ImWchar ; } extern "C" { pub fn ImVector_ImFontConfig_begin_const ( self_ : * const ImVector_ImFontConfig ) -> * const ImFontConfig ; } extern "C" { pub fn ImVector_ImFontGlyph_begin_const ( self_ : * const ImVector_ImFontGlyph ) -> * const ImFontGlyph ; } extern "C" { pub fn ImVector_TextRange_begin_const ( self_ : * const ImVector_TextRange ) -> * const TextRange ; } extern "C" { pub fn ImVector_CustomRect_begin_const ( self_ : * const ImVector_CustomRect ) -> * const CustomRect ; } extern "C" { pub fn ImVector_ImDrawChannel_begin_const ( self_ : * const ImVector_ImDrawChannel ) -> * const ImDrawChannel ; } extern "C" { pub fn ImVector_char_begin_const ( self_ : * const ImVector_char ) -> * const :: std :: os :: raw :: c_char ; } extern "C" { pub fn ImVector_ImTextureID_begin_const ( self_ : * const ImVector_ImTextureID ) -> * const ImTextureID ; } extern "C" { pub fn ImVector_ImDrawVert_begin_const ( self_ : * const ImVector_ImDrawVert ) -> * const ImDrawVert ; } extern "C" { pub fn ImVector_int_begin_const ( self_ : * const ImVector_int ) -> * const :: std :: os :: raw :: c_int ; } extern "C" { pub fn ImVector_Pair_begin_const ( self_ : * const ImVector_Pair ) -> * const Pair ; } extern "C" { pub fn ImVector_ImFontPtr_begin_const ( self_ : * const ImVector_ImFontPtr ) -> * const * mut ImFont ; } extern "C" { pub fn ImVector_ImVec4_begin_const ( self_ : * const ImVector_ImVec4 ) -> * const ImVec4 ; } extern "C" { pub fn ImVector_ImDrawCmd_begin_const ( self_ : * const ImVector_ImDrawCmd ) -> * const ImDrawCmd ; } extern "C" { pub fn ImVector_ImDrawIdx_begin_const ( self_ : * const ImVector_ImDrawIdx ) -> * const ImDrawIdx ; } extern "C" { pub fn ImVector_ImVec2_begin_const ( self_ : * const ImVector_ImVec2 ) -> * const ImVec2 ; } extern "C" { pub fn ImVector_float_end ( self_ : * mut ImVector_float ) -> * mut f32 ; } extern "C" { pub fn ImVector_ImWchar_end ( self_ : * mut ImVector_ImWchar ) -> * mut ImWchar ; } extern "C" { pub fn ImVector_ImFontConfig_end ( self_ : * mut ImVector_ImFontConfig ) -> * mut ImFontConfig ; } extern "C" { pub fn ImVector_ImFontGlyph_end ( self_ : * mut ImVector_ImFontGlyph ) -> * mut ImFontGlyph ; } extern "C" { pub fn ImVector_TextRange_end ( self_ : * mut ImVector_TextRange ) -> * mut TextRange ; } extern "C" { pub fn ImVector_CustomRect_end ( self_ : * mut ImVector_CustomRect ) -> * mut CustomRect ; } extern "C" { pub fn ImVector_ImDrawChannel_end ( self_ : * mut ImVector_ImDrawChannel ) -> * mut ImDrawChannel ; } extern "C" { pub fn ImVector_char_end ( self_ : * mut ImVector_char ) -> * mut :: std :: os :: raw :: c_char ; } extern "C" { pub fn ImVector_ImTextureID_end ( self_ : * mut ImVector_ImTextureID ) -> * mut ImTextureID ; } extern "C" { pub fn ImVector_ImDrawVert_end ( self_ : * mut ImVector_ImDrawVert ) -> * mut ImDrawVert ; } extern "C" { pub fn ImVector_int_end ( self_ : * mut ImVector_int ) -> * mut :: std :: os :: raw :: c_int ; } extern "C" { pub fn ImVector_Pair_end ( self_ : * mut ImVector_Pair ) -> * mut Pair ; } extern "C" { pub fn ImVector_ImFontPtr_end ( self_ : * mut ImVector_ImFontPtr ) -> * mut * mut ImFont ; } extern "C" { pub fn ImVector_ImVec4_end ( self_ : * mut ImVector_ImVec4 ) -> * mut ImVec4 ; } extern "C" { pub fn ImVector_ImDrawCmd_end ( self_ : * mut ImVector_ImDrawCmd ) -> * mut ImDrawCmd ; } extern "C" { pub fn ImVector_ImDrawIdx_end ( self_ : * mut ImVector_ImDrawIdx ) -> * mut ImDrawIdx ; } extern "C" { pub fn ImVector_ImVec2_end ( self_ : * mut ImVector_ImVec2 ) -> * mut ImVec2 ; } extern "C" { pub fn ImVector_float_end_const ( self_ : * const ImVector_float ) -> * const f32 ; } extern "C" { pub fn ImVector_ImWchar_end_const ( self_ : * const ImVector_ImWchar ) -> * const ImWchar ; } extern "C" { pub fn ImVector_ImFontConfig_end_const ( self_ : * const ImVector_ImFontConfig ) -> * const ImFontConfig ; } extern "C" { pub fn ImVector_ImFontGlyph_end_const ( self_ : * const ImVector_ImFontGlyph ) -> * const ImFontGlyph ; } extern "C" { pub fn ImVector_TextRange_end_const ( self_ : * const ImVector_TextRange ) -> * const TextRange ; } extern "C" { pub fn ImVector_CustomRect_end_const ( self_ : * const ImVector_CustomRect ) -> * const CustomRect ; } extern "C" { pub fn ImVector_ImDrawChannel_end_const ( self_ : * const ImVector_ImDrawChannel ) -> * const ImDrawChannel ; } extern "C" { pub fn ImVector_char_end_const ( self_ : * const ImVector_char ) -> * const :: std :: os :: raw :: c_char ; } extern "C" { pub fn ImVector_ImTextureID_end_const ( self_ : * const ImVector_ImTextureID ) -> * const ImTextureID ; } extern "C" { pub fn ImVector_ImDrawVert_end_const ( self_ : * const ImVector_ImDrawVert ) -> * const ImDrawVert ; } extern "C" { pub fn ImVector_int_end_const ( self_ : * const ImVector_int ) -> * const :: std :: os :: raw :: c_int ; } extern "C" { pub fn ImVector_Pair_end_const ( self_ : * const ImVector_Pair ) -> * const Pair ; } extern "C" { pub fn ImVector_ImFontPtr_end_const ( self_ : * const ImVector_ImFontPtr ) -> * const * mut ImFont ; } extern "C" { pub fn ImVector_ImVec4_end_const ( self_ : * const ImVector_ImVec4 ) -> * const ImVec4 ; } extern "C" { pub fn ImVector_ImDrawCmd_end_const ( self_ : * const ImVector_ImDrawCmd ) -> * const ImDrawCmd ; } extern "C" { pub fn ImVector_ImDrawIdx_end_const ( self_ : * const ImVector_ImDrawIdx ) -> * const ImDrawIdx ; } extern "C" { pub fn ImVector_ImVec2_end_const ( self_ : * const ImVector_ImVec2 ) -> * const ImVec2 ; } extern "C" { pub fn ImVector_float_front ( self_ : * mut ImVector_float ) -> * mut f32 ; } extern "C" { pub fn ImVector_ImWchar_front ( self_ : * mut ImVector_ImWchar ) -> * mut ImWchar ; } extern "C" { pub fn ImVector_ImFontConfig_front ( self_ : * mut ImVector_ImFontConfig ) -> * mut ImFontConfig ; } extern "C" { pub fn ImVector_ImFontGlyph_front ( self_ : * mut ImVector_ImFontGlyph ) -> * mut ImFontGlyph ; } extern "C" { pub fn ImVector_TextRange_front ( self_ : * mut ImVector_TextRange ) -> * mut TextRange ; } extern "C" { pub fn ImVector_CustomRect_front ( self_ : * mut ImVector_CustomRect ) -> * mut CustomRect ; } extern "C" { pub fn ImVector_ImDrawChannel_front ( self_ : * mut ImVector_ImDrawChannel ) -> * mut ImDrawChannel ; } extern "C" { pub fn ImVector_char_front ( self_ : * mut ImVector_char ) -> * mut :: std :: os :: raw :: c_char ; } extern "C" { pub fn ImVector_ImTextureID_front ( self_ : * mut ImVector_ImTextureID ) -> * mut ImTextureID ; } extern "C" { pub fn ImVector_ImDrawVert_front ( self_ : * mut ImVector_ImDrawVert ) -> * mut ImDrawVert ; } extern "C" { pub fn ImVector_int_front ( self_ : * mut ImVector_int ) -> * mut :: std :: os :: raw :: c_int ; } extern "C" { pub fn ImVector_Pair_front ( self_ : * mut ImVector_Pair ) -> * mut Pair ; } extern "C" { pub fn ImVector_ImFontPtr_front ( self_ : * mut ImVector_ImFontPtr ) -> * mut * mut ImFont ; } extern "C" { pub fn ImVector_ImVec4_front ( self_ : * mut ImVector_ImVec4 ) -> * mut ImVec4 ; } extern "C" { pub fn ImVector_ImDrawCmd_front ( self_ : * mut ImVector_ImDrawCmd ) -> * mut ImDrawCmd ; } extern "C" { pub fn ImVector_ImDrawIdx_front ( self_ : * mut ImVector_ImDrawIdx ) -> * mut ImDrawIdx ; } extern "C" { pub fn ImVector_ImVec2_front ( self_ : * mut ImVector_ImVec2 ) -> * mut ImVec2 ; } extern "C" { pub fn ImVector_float_front_const ( self_ : * const ImVector_float ) -> * const f32 ; } extern "C" { pub fn ImVector_ImWchar_front_const ( self_ : * const ImVector_ImWchar ) -> * const ImWchar ; } extern "C" { pub fn ImVector_ImFontConfig_front_const ( self_ : * const ImVector_ImFontConfig ) -> * const ImFontConfig ; } extern "C" { pub fn ImVector_ImFontGlyph_front_const ( self_ : * const ImVector_ImFontGlyph ) -> * const ImFontGlyph ; } extern "C" { pub fn ImVector_TextRange_front_const ( self_ : * const ImVector_TextRange ) -> * const TextRange ; } extern "C" { pub fn ImVector_CustomRect_front_const ( self_ : * const ImVector_CustomRect ) -> * const CustomRect ; } extern "C" { pub fn ImVector_ImDrawChannel_front_const ( self_ : * const ImVector_ImDrawChannel ) -> * const ImDrawChannel ; } extern "C" { pub fn ImVector_char_front_const ( self_ : * const ImVector_char ) -> * const :: std :: os :: raw :: c_char ; } extern "C" { pub fn ImVector_ImTextureID_front_const ( self_ : * const ImVector_ImTextureID ) -> * const ImTextureID ; } extern "C" { pub fn ImVector_ImDrawVert_front_const ( self_ : * const ImVector_ImDrawVert ) -> * const ImDrawVert ; } extern "C" { pub fn ImVector_int_front_const ( self_ : * const ImVector_int ) -> * const :: std :: os :: raw :: c_int ; } extern "C" { pub fn ImVector_Pair_front_const ( self_ : * const ImVector_Pair ) -> * const Pair ; } extern "C" { pub fn ImVector_ImFontPtr_front_const ( self_ : * const ImVector_ImFontPtr ) -> * const * mut ImFont ; } extern "C" { pub fn ImVector_ImVec4_front_const ( self_ : * const ImVector_ImVec4 ) -> * const ImVec4 ; } extern "C" { pub fn ImVector_ImDrawCmd_front_const ( self_ : * const ImVector_ImDrawCmd ) -> * const ImDrawCmd ; } extern "C" { pub fn ImVector_ImDrawIdx_front_const ( self_ : * const ImVector_ImDrawIdx ) -> * const ImDrawIdx ; } extern "C" { pub fn ImVector_ImVec2_front_const ( self_ : * const ImVector_ImVec2 ) -> * const ImVec2 ; } extern "C" { pub fn ImVector_float_back ( self_ : * mut ImVector_float ) -> * mut f32 ; } extern "C" { pub fn ImVector_ImWchar_back ( self_ : * mut ImVector_ImWchar ) -> * mut ImWchar ; } extern "C" { pub fn ImVector_ImFontConfig_back ( self_ : * mut ImVector_ImFontConfig ) -> * mut ImFontConfig ; } extern "C" { pub fn ImVector_ImFontGlyph_back ( self_ : * mut ImVector_ImFontGlyph ) -> * mut ImFontGlyph ; } extern "C" { pub fn ImVector_TextRange_back ( self_ : * mut ImVector_TextRange ) -> * mut TextRange ; } extern "C" { pub fn ImVector_CustomRect_back ( self_ : * mut ImVector_CustomRect ) -> * mut CustomRect ; } extern "C" { pub fn ImVector_ImDrawChannel_back ( self_ : * mut ImVector_ImDrawChannel ) -> * mut ImDrawChannel ; } extern "C" { pub fn ImVector_char_back ( self_ : * mut ImVector_char ) -> * mut :: std :: os :: raw :: c_char ; } extern "C" { pub fn ImVector_ImTextureID_back ( self_ : * mut ImVector_ImTextureID ) -> * mut ImTextureID ; } extern "C" { pub fn ImVector_ImDrawVert_back ( self_ : * mut ImVector_ImDrawVert ) -> * mut ImDrawVert ; } extern "C" { pub fn ImVector_int_back ( self_ : * mut ImVector_int ) -> * mut :: std :: os :: raw :: c_int ; } extern "C" { pub fn ImVector_Pair_back ( self_ : * mut ImVector_Pair ) -> * mut Pair ; } extern "C" { pub fn ImVector_ImFontPtr_back ( self_ : * mut ImVector_ImFontPtr ) -> * mut * mut ImFont ; } extern "C" { pub fn ImVector_ImVec4_back ( self_ : * mut ImVector_ImVec4 ) -> * mut ImVec4 ; } extern "C" { pub fn ImVector_ImDrawCmd_back ( self_ : * mut ImVector_ImDrawCmd ) -> * mut ImDrawCmd ; } extern "C" { pub fn ImVector_ImDrawIdx_back ( self_ : * mut ImVector_ImDrawIdx ) -> * mut ImDrawIdx ; } extern "C" { pub fn ImVector_ImVec2_back ( self_ : * mut ImVector_ImVec2 ) -> * mut ImVec2 ; } extern "C" { pub fn ImVector_float_back_const ( self_ : * const ImVector_float ) -> * const f32 ; } extern "C" { pub fn ImVector_ImWchar_back_const ( self_ : * const ImVector_ImWchar ) -> * const ImWchar ; } extern "C" { pub fn ImVector_ImFontConfig_back_const ( self_ : * const ImVector_ImFontConfig ) -> * const ImFontConfig ; } extern "C" { pub fn ImVector_ImFontGlyph_back_const ( self_ : * const ImVector_ImFontGlyph ) -> * const ImFontGlyph ; } extern "C" { pub fn ImVector_TextRange_back_const ( self_ : * const ImVector_TextRange ) -> * const TextRange ; } extern "C" { pub fn ImVector_CustomRect_back_const ( self_ : * const ImVector_CustomRect ) -> * const CustomRect ; } extern "C" { pub fn ImVector_ImDrawChannel_back_const ( self_ : * const ImVector_ImDrawChannel ) -> * const ImDrawChannel ; } extern "C" { pub fn ImVector_char_back_const ( self_ : * const ImVector_char ) -> * const :: std :: os :: raw :: c_char ; } extern "C" { pub fn ImVector_ImTextureID_back_const ( self_ : * const ImVector_ImTextureID ) -> * const ImTextureID ; } extern "C" { pub fn ImVector_ImDrawVert_back_const ( self_ : * const ImVector_ImDrawVert ) -> * const ImDrawVert ; } extern "C" { pub fn ImVector_int_back_const ( self_ : * const ImVector_int ) -> * const :: std :: os :: raw :: c_int ; } extern "C" { pub fn ImVector_Pair_back_const ( self_ : * const ImVector_Pair ) -> * const Pair ; } extern "C" { pub fn ImVector_ImFontPtr_back_const ( self_ : * const ImVector_ImFontPtr ) -> * const * mut ImFont ; } extern "C" { pub fn ImVector_ImVec4_back_const ( self_ : * const ImVector_ImVec4 ) -> * const ImVec4 ; } extern "C" { pub fn ImVector_ImDrawCmd_back_const ( self_ : * const ImVector_ImDrawCmd ) -> * const ImDrawCmd ; } extern "C" { pub fn ImVector_ImDrawIdx_back_const ( self_ : * const ImVector_ImDrawIdx ) -> * const ImDrawIdx ; } extern "C" { pub fn ImVector_ImVec2_back_const ( self_ : * const ImVector_ImVec2 ) -> * const ImVec2 ; } extern "C" { pub fn ImVector_float_swap ( self_ : * mut ImVector_float , rhs : ImVector_float ) ; } extern "C" { pub fn ImVector_ImWchar_swap ( self_ : * mut ImVector_ImWchar , rhs : ImVector_ImWchar ) ; } extern "C" { pub fn ImVector_ImFontConfig_swap ( self_ : * mut ImVector_ImFontConfig , rhs : ImVector_ImFontConfig ) ; } extern "C" { pub fn ImVector_ImFontGlyph_swap ( self_ : * mut ImVector_ImFontGlyph , rhs : ImVector_ImFontGlyph ) ; } extern "C" { pub fn ImVector_TextRange_swap ( self_ : * mut ImVector_TextRange , rhs : ImVector_TextRange ) ; } extern "C" { pub fn ImVector_CustomRect_swap ( self_ : * mut ImVector_CustomRect , rhs : ImVector_CustomRect ) ; } extern "C" { pub fn ImVector_ImDrawChannel_swap ( self_ : * mut ImVector_ImDrawChannel , rhs : ImVector_ImDrawChannel ) ; } extern "C" { pub fn ImVector_char_swap ( self_ : * mut ImVector_char , rhs : ImVector_char ) ; } extern "C" { pub fn ImVector_ImTextureID_swap ( self_ : * mut ImVector_ImTextureID , rhs : ImVector_ImTextureID ) ; } extern "C" { pub fn ImVector_ImDrawVert_swap ( self_ : * mut ImVector_ImDrawVert , rhs : ImVector_ImDrawVert ) ; } extern "C" { pub fn ImVector_int_swap ( self_ : * mut ImVector_int , rhs : ImVector_int ) ; } extern "C" { pub fn ImVector_Pair_swap ( self_ : * mut ImVector_Pair , rhs : ImVector_Pair ) ; } extern "C" { pub fn ImVector_ImFontPtr_swap ( self_ : * mut ImVector_ImFontPtr , rhs : ImVector_ImFontPtr ) ; } extern "C" { pub fn ImVector_ImVec4_swap ( self_ : * mut ImVector_ImVec4 , rhs : ImVector_ImVec4 ) ; } extern "C" { pub fn ImVector_ImDrawCmd_swap ( self_ : * mut ImVector_ImDrawCmd , rhs : ImVector_ImDrawCmd ) ; } extern "C" { pub fn ImVector_ImDrawIdx_swap ( self_ : * mut ImVector_ImDrawIdx , rhs : ImVector_ImDrawIdx ) ; } extern "C" { pub fn ImVector_ImVec2_swap ( self_ : * mut ImVector_ImVec2 , rhs : ImVector_ImVec2 ) ; } extern "C" { pub fn ImVector_float__grow_capacity ( self_ : * const ImVector_float , sz : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn ImVector_ImWchar__grow_capacity ( self_ : * const ImVector_ImWchar , sz : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn ImVector_ImFontConfig__grow_capacity ( self_ : * const ImVector_ImFontConfig , sz : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn ImVector_ImFontGlyph__grow_capacity ( self_ : * const ImVector_ImFontGlyph , sz : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn ImVector_TextRange__grow_capacity ( self_ : * const ImVector_TextRange , sz : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn ImVector_CustomRect__grow_capacity ( self_ : * const ImVector_CustomRect , sz : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn ImVector_ImDrawChannel__grow_capacity ( self_ : * const ImVector_ImDrawChannel , sz : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn ImVector_char__grow_capacity ( self_ : * const ImVector_char , sz : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn ImVector_ImTextureID__grow_capacity ( self_ : * const ImVector_ImTextureID , sz : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn ImVector_ImDrawVert__grow_capacity ( self_ : * const ImVector_ImDrawVert , sz : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn ImVector_int__grow_capacity ( self_ : * const ImVector_int , sz : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn ImVector_Pair__grow_capacity ( self_ : * const ImVector_Pair , sz : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn ImVector_ImFontPtr__grow_capacity ( self_ : * const ImVector_ImFontPtr , sz : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn ImVector_ImVec4__grow_capacity ( self_ : * const ImVector_ImVec4 , sz : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn ImVector_ImDrawCmd__grow_capacity ( self_ : * const ImVector_ImDrawCmd , sz : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn ImVector_ImDrawIdx__grow_capacity ( self_ : * const ImVector_ImDrawIdx , sz : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn ImVector_ImVec2__grow_capacity ( self_ : * const ImVector_ImVec2 , sz : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn ImVector_float_resize ( self_ : * mut ImVector_float , new_size : :: std :: os :: raw :: c_int ) ; } extern "C" { pub fn ImVector_ImWchar_resize ( self_ : * mut ImVector_ImWchar , new_size : :: std :: os :: raw :: c_int ) ; } extern "C" { pub fn ImVector_ImFontConfig_resize ( self_ : * mut ImVector_ImFontConfig , new_size : :: std :: os :: raw :: c_int ) ; } extern "C" { pub fn ImVector_ImFontGlyph_resize ( self_ : * mut ImVector_ImFontGlyph , new_size : :: std :: os :: raw :: c_int ) ; } extern "C" { pub fn ImVector_TextRange_resize ( self_ : * mut ImVector_TextRange , new_size : :: std :: os :: raw :: c_int ) ; } extern "C" { pub fn ImVector_CustomRect_resize ( self_ : * mut ImVector_CustomRect , new_size : :: std :: os :: raw :: c_int ) ; } extern "C" { pub fn ImVector_ImDrawChannel_resize ( self_ : * mut ImVector_ImDrawChannel , new_size : :: std :: os :: raw :: c_int ) ; } extern "C" { pub fn ImVector_char_resize ( self_ : * mut ImVector_char , new_size : :: std :: os :: raw :: c_int ) ; } extern "C" { pub fn ImVector_ImTextureID_resize ( self_ : * mut ImVector_ImTextureID , new_size : :: std :: os :: raw :: c_int ) ; } extern "C" { pub fn ImVector_ImDrawVert_resize ( self_ : * mut ImVector_ImDrawVert , new_size : :: std :: os :: raw :: c_int ) ; } extern "C" { pub fn ImVector_int_resize ( self_ : * mut ImVector_int , new_size : :: std :: os :: raw :: c_int ) ; } extern "C" { pub fn ImVector_Pair_resize ( self_ : * mut ImVector_Pair , new_size : :: std :: os :: raw :: c_int ) ; } extern "C" { pub fn ImVector_ImFontPtr_resize ( self_ : * mut ImVector_ImFontPtr , new_size : :: std :: os :: raw :: c_int ) ; } extern "C" { pub fn ImVector_ImVec4_resize ( self_ : * mut ImVector_ImVec4 , new_size : :: std :: os :: raw :: c_int ) ; } extern "C" { pub fn ImVector_ImDrawCmd_resize ( self_ : * mut ImVector_ImDrawCmd , new_size : :: std :: os :: raw :: c_int ) ; } extern "C" { pub fn ImVector_ImDrawIdx_resize ( self_ : * mut ImVector_ImDrawIdx , new_size : :: std :: os :: raw :: c_int ) ; } extern "C" { pub fn ImVector_ImVec2_resize ( self_ : * mut ImVector_ImVec2 , new_size : :: std :: os :: raw :: c_int ) ; } extern "C" { pub fn ImVector_float_resizeT ( self_ : * mut ImVector_float , new_size : :: std :: os :: raw :: c_int , v : f32 ) ; } extern "C" { pub fn ImVector_ImWchar_resizeT ( self_ : * mut ImVector_ImWchar , new_size : :: std :: os :: raw :: c_int , v : ImWchar ) ; } extern "C" { pub fn ImVector_ImFontConfig_resizeT ( self_ : * mut ImVector_ImFontConfig , new_size : :: std :: os :: raw :: c_int , v : ImFontConfig ) ; } extern "C" { pub fn ImVector_ImFontGlyph_resizeT ( self_ : * mut ImVector_ImFontGlyph , new_size : :: std :: os :: raw :: c_int , v : ImFontGlyph ) ; } extern "C" { pub fn ImVector_TextRange_resizeT ( self_ : * mut ImVector_TextRange , new_size : :: std :: os :: raw :: c_int , v : TextRange ) ; } extern "C" { pub fn ImVector_CustomRect_resizeT ( self_ : * mut ImVector_CustomRect , new_size : :: std :: os :: raw :: c_int , v : CustomRect ) ; } extern "C" { pub fn ImVector_ImDrawChannel_resizeT ( self_ : * mut ImVector_ImDrawChannel , new_size : :: std :: os :: raw :: c_int , v : ImDrawChannel ) ; } extern "C" { pub fn ImVector_char_resizeT ( self_ : * mut ImVector_char , new_size : :: std :: os :: raw :: c_int , v : :: std :: os :: raw :: c_char ) ; } extern "C" { pub fn ImVector_ImTextureID_resizeT ( self_ : * mut ImVector_ImTextureID , new_size : :: std :: os :: raw :: c_int , v : ImTextureID ) ; } extern "C" { pub fn ImVector_ImDrawVert_resizeT ( self_ : * mut ImVector_ImDrawVert , new_size : :: std :: os :: raw :: c_int , v : ImDrawVert ) ; } extern "C" { pub fn ImVector_int_resizeT ( self_ : * mut ImVector_int , new_size : :: std :: os :: raw :: c_int , v : :: std :: os :: raw :: c_int ) ; } extern "C" { pub fn ImVector_Pair_resizeT ( self_ : * mut ImVector_Pair , new_size : :: std :: os :: raw :: c_int , v : Pair ) ; } extern "C" { pub fn ImVector_ImFontPtr_resizeT ( self_ : * mut ImVector_ImFontPtr , new_size : :: std :: os :: raw :: c_int , v : * mut ImFont ) ; } extern "C" { pub fn ImVector_ImVec4_resizeT ( self_ : * mut ImVector_ImVec4 , new_size : :: std :: os :: raw :: c_int , v : ImVec4 ) ; } extern "C" { pub fn ImVector_ImDrawCmd_resizeT ( self_ : * mut ImVector_ImDrawCmd , new_size : :: std :: os :: raw :: c_int , v : ImDrawCmd ) ; } extern "C" { pub fn ImVector_ImDrawIdx_resizeT ( self_ : * mut ImVector_ImDrawIdx , new_size : :: std :: os :: raw :: c_int , v : ImDrawIdx ) ; } extern "C" { pub fn ImVector_ImVec2_resizeT ( self_ : * mut ImVector_ImVec2 , new_size : :: std :: os :: raw :: c_int , v : ImVec2 ) ; } extern "C" { pub fn ImVector_float_reserve ( self_ : * mut ImVector_float , new_capacity : :: std :: os :: raw :: c_int ) ; } extern "C" { pub fn ImVector_ImWchar_reserve ( self_ : * mut ImVector_ImWchar , new_capacity : :: std :: os :: raw :: c_int ) ; } extern "C" { pub fn ImVector_ImFontConfig_reserve ( self_ : * mut ImVector_ImFontConfig , new_capacity : :: std :: os :: raw :: c_int ) ; } extern "C" { pub fn ImVector_ImFontGlyph_reserve ( self_ : * mut ImVector_ImFontGlyph , new_capacity : :: std :: os :: raw :: c_int ) ; } extern "C" { pub fn ImVector_TextRange_reserve ( self_ : * mut ImVector_TextRange , new_capacity : :: std :: os :: raw :: c_int ) ; } extern "C" { pub fn ImVector_CustomRect_reserve ( self_ : * mut ImVector_CustomRect , new_capacity : :: std :: os :: raw :: c_int ) ; } extern "C" { pub fn ImVector_ImDrawChannel_reserve ( self_ : * mut ImVector_ImDrawChannel , new_capacity : :: std :: os :: raw :: c_int ) ; } extern "C" { pub fn ImVector_char_reserve ( self_ : * mut ImVector_char , new_capacity : :: std :: os :: raw :: c_int ) ; } extern "C" { pub fn ImVector_ImTextureID_reserve ( self_ : * mut ImVector_ImTextureID , new_capacity : :: std :: os :: raw :: c_int ) ; } extern "C" { pub fn ImVector_ImDrawVert_reserve ( self_ : * mut ImVector_ImDrawVert , new_capacity : :: std :: os :: raw :: c_int ) ; } extern "C" { pub fn ImVector_int_reserve ( self_ : * mut ImVector_int , new_capacity : :: std :: os :: raw :: c_int ) ; } extern "C" { pub fn ImVector_Pair_reserve ( self_ : * mut ImVector_Pair , new_capacity : :: std :: os :: raw :: c_int ) ; } extern "C" { pub fn ImVector_ImFontPtr_reserve ( self_ : * mut ImVector_ImFontPtr , new_capacity : :: std :: os :: raw :: c_int ) ; } extern "C" { pub fn ImVector_ImVec4_reserve ( self_ : * mut ImVector_ImVec4 , new_capacity : :: std :: os :: raw :: c_int ) ; } extern "C" { pub fn ImVector_ImDrawCmd_reserve ( self_ : * mut ImVector_ImDrawCmd , new_capacity : :: std :: os :: raw :: c_int ) ; } extern "C" { pub fn ImVector_ImDrawIdx_reserve ( self_ : * mut ImVector_ImDrawIdx , new_capacity : :: std :: os :: raw :: c_int ) ; } extern "C" { pub fn ImVector_ImVec2_reserve ( self_ : * mut ImVector_ImVec2 , new_capacity : :: std :: os :: raw :: c_int ) ; } extern "C" { pub fn ImVector_float_push_back ( self_ : * mut ImVector_float , v : f32 ) ; } extern "C" { pub fn ImVector_ImWchar_push_back ( self_ : * mut ImVector_ImWchar , v : ImWchar ) ; } extern "C" { pub fn ImVector_ImFontConfig_push_back ( self_ : * mut ImVector_ImFontConfig , v : ImFontConfig ) ; } extern "C" { pub fn ImVector_ImFontGlyph_push_back ( self_ : * mut ImVector_ImFontGlyph , v : ImFontGlyph ) ; } extern "C" { pub fn ImVector_TextRange_push_back ( self_ : * mut ImVector_TextRange , v : TextRange ) ; } extern "C" { pub fn ImVector_CustomRect_push_back ( self_ : * mut ImVector_CustomRect , v : CustomRect ) ; } extern "C" { pub fn ImVector_ImDrawChannel_push_back ( self_ : * mut ImVector_ImDrawChannel , v : ImDrawChannel ) ; } extern "C" { pub fn ImVector_char_push_back ( self_ : * mut ImVector_char , v : :: std :: os :: raw :: c_char ) ; } extern "C" { pub fn ImVector_ImTextureID_push_back ( self_ : * mut ImVector_ImTextureID , v : ImTextureID ) ; } extern "C" { pub fn ImVector_ImDrawVert_push_back ( self_ : * mut ImVector_ImDrawVert , v : ImDrawVert ) ; } extern "C" { pub fn ImVector_int_push_back ( self_ : * mut ImVector_int , v : :: std :: os :: raw :: c_int ) ; } extern "C" { pub fn ImVector_Pair_push_back ( self_ : * mut ImVector_Pair , v : Pair ) ; } extern "C" { pub fn ImVector_ImFontPtr_push_back ( self_ : * mut ImVector_ImFontPtr , v : * mut ImFont ) ; } extern "C" { pub fn ImVector_ImVec4_push_back ( self_ : * mut ImVector_ImVec4 , v : ImVec4 ) ; } extern "C" { pub fn ImVector_ImDrawCmd_push_back ( self_ : * mut ImVector_ImDrawCmd , v : ImDrawCmd ) ; } extern "C" { pub fn ImVector_ImDrawIdx_push_back ( self_ : * mut ImVector_ImDrawIdx , v : ImDrawIdx ) ; } extern "C" { pub fn ImVector_ImVec2_push_back ( self_ : * mut ImVector_ImVec2 , v : ImVec2 ) ; } extern "C" { pub fn ImVector_float_pop_back ( self_ : * mut ImVector_float ) ; } extern "C" { pub fn ImVector_ImWchar_pop_back ( self_ : * mut ImVector_ImWchar ) ; } extern "C" { pub fn ImVector_ImFontConfig_pop_back ( self_ : * mut ImVector_ImFontConfig ) ; } extern "C" { pub fn ImVector_ImFontGlyph_pop_back ( self_ : * mut ImVector_ImFontGlyph ) ; } extern "C" { pub fn ImVector_TextRange_pop_back ( self_ : * mut ImVector_TextRange ) ; } extern "C" { pub fn ImVector_CustomRect_pop_back ( self_ : * mut ImVector_CustomRect ) ; } extern "C" { pub fn ImVector_ImDrawChannel_pop_back ( self_ : * mut ImVector_ImDrawChannel ) ; } extern "C" { pub fn ImVector_char_pop_back ( self_ : * mut ImVector_char ) ; } extern "C" { pub fn ImVector_ImTextureID_pop_back ( self_ : * mut ImVector_ImTextureID ) ; } extern "C" { pub fn ImVector_ImDrawVert_pop_back ( self_ : * mut ImVector_ImDrawVert ) ; } extern "C" { pub fn ImVector_int_pop_back ( self_ : * mut ImVector_int ) ; } extern "C" { pub fn ImVector_Pair_pop_back ( self_ : * mut ImVector_Pair ) ; } extern "C" { pub fn ImVector_ImFontPtr_pop_back ( self_ : * mut ImVector_ImFontPtr ) ; } extern "C" { pub fn ImVector_ImVec4_pop_back ( self_ : * mut ImVector_ImVec4 ) ; } extern "C" { pub fn ImVector_ImDrawCmd_pop_back ( self_ : * mut ImVector_ImDrawCmd ) ; } extern "C" { pub fn ImVector_ImDrawIdx_pop_back ( self_ : * mut ImVector_ImDrawIdx ) ; } extern "C" { pub fn ImVector_ImVec2_pop_back ( self_ : * mut ImVector_ImVec2 ) ; } extern "C" { pub fn ImVector_float_push_front ( self_ : * mut ImVector_float , v : f32 ) ; } extern "C" { pub fn ImVector_ImWchar_push_front ( self_ : * mut ImVector_ImWchar , v : ImWchar ) ; } extern "C" { pub fn ImVector_ImFontConfig_push_front ( self_ : * mut ImVector_ImFontConfig , v : ImFontConfig ) ; } extern "C" { pub fn ImVector_ImFontGlyph_push_front ( self_ : * mut ImVector_ImFontGlyph , v : ImFontGlyph ) ; } extern "C" { pub fn ImVector_TextRange_push_front ( self_ : * mut ImVector_TextRange , v : TextRange ) ; } extern "C" { pub fn ImVector_CustomRect_push_front ( self_ : * mut ImVector_CustomRect , v : CustomRect ) ; } extern "C" { pub fn ImVector_ImDrawChannel_push_front ( self_ : * mut ImVector_ImDrawChannel , v : ImDrawChannel ) ; } extern "C" { pub fn ImVector_char_push_front ( self_ : * mut ImVector_char , v : :: std :: os :: raw :: c_char ) ; } extern "C" { pub fn ImVector_ImTextureID_push_front ( self_ : * mut ImVector_ImTextureID , v : ImTextureID ) ; } extern "C" { pub fn ImVector_ImDrawVert_push_front ( self_ : * mut ImVector_ImDrawVert , v : ImDrawVert ) ; } extern "C" { pub fn ImVector_int_push_front ( self_ : * mut ImVector_int , v : :: std :: os :: raw :: c_int ) ; } extern "C" { pub fn ImVector_Pair_push_front ( self_ : * mut ImVector_Pair , v : Pair ) ; } extern "C" { pub fn ImVector_ImFontPtr_push_front ( self_ : * mut ImVector_ImFontPtr , v : * mut ImFont ) ; } extern "C" { pub fn ImVector_ImVec4_push_front ( self_ : * mut ImVector_ImVec4 , v : ImVec4 ) ; } extern "C" { pub fn ImVector_ImDrawCmd_push_front ( self_ : * mut ImVector_ImDrawCmd , v : ImDrawCmd ) ; } extern "C" { pub fn ImVector_ImDrawIdx_push_front ( self_ : * mut ImVector_ImDrawIdx , v : ImDrawIdx ) ; } extern "C" { pub fn ImVector_ImVec2_push_front ( self_ : * mut ImVector_ImVec2 , v : ImVec2 ) ; } extern "C" { pub fn ImVector_float_erase ( self_ : * mut ImVector_float , it : * const f32 ) -> * mut f32 ; } extern "C" { pub fn ImVector_ImWchar_erase ( self_ : * mut ImVector_ImWchar , it : * const ImWchar ) -> * mut ImWchar ; } extern "C" { pub fn ImVector_ImFontConfig_erase ( self_ : * mut ImVector_ImFontConfig , it : * const ImFontConfig ) -> * mut ImFontConfig ; } extern "C" { pub fn ImVector_ImFontGlyph_erase ( self_ : * mut ImVector_ImFontGlyph , it : * const ImFontGlyph ) -> * mut ImFontGlyph ; } extern "C" { pub fn ImVector_TextRange_erase ( self_ : * mut ImVector_TextRange , it : * const TextRange ) -> * mut TextRange ; } extern "C" { pub fn ImVector_CustomRect_erase ( self_ : * mut ImVector_CustomRect , it : * const CustomRect ) -> * mut CustomRect ; } extern "C" { pub fn ImVector_ImDrawChannel_erase ( self_ : * mut ImVector_ImDrawChannel , it : * const ImDrawChannel ) -> * mut ImDrawChannel ; } extern "C" { pub fn ImVector_char_erase ( self_ : * mut ImVector_char , it : * const :: std :: os :: raw :: c_char ) -> * mut :: std :: os :: raw :: c_char ; } extern "C" { pub fn ImVector_ImTextureID_erase ( self_ : * mut ImVector_ImTextureID , it : * const ImTextureID ) -> * mut ImTextureID ; } extern "C" { pub fn ImVector_ImDrawVert_erase ( self_ : * mut ImVector_ImDrawVert , it : * const ImDrawVert ) -> * mut ImDrawVert ; } extern "C" { pub fn ImVector_int_erase ( self_ : * mut ImVector_int , it : * const :: std :: os :: raw :: c_int ) -> * mut :: std :: os :: raw :: c_int ; } extern "C" { pub fn ImVector_Pair_erase ( self_ : * mut ImVector_Pair , it : * const Pair ) -> * mut Pair ; } extern "C" { pub fn ImVector_ImFontPtr_erase ( self_ : * mut ImVector_ImFontPtr , it : * const * mut ImFont ) -> * mut * mut ImFont ; } extern "C" { pub fn ImVector_ImVec4_erase ( self_ : * mut ImVector_ImVec4 , it : * const ImVec4 ) -> * mut ImVec4 ; } extern "C" { pub fn ImVector_ImDrawCmd_erase ( self_ : * mut ImVector_ImDrawCmd , it : * const ImDrawCmd ) -> * mut ImDrawCmd ; } extern "C" { pub fn ImVector_ImDrawIdx_erase ( self_ : * mut ImVector_ImDrawIdx , it : * const ImDrawIdx ) -> * mut ImDrawIdx ; } extern "C" { pub fn ImVector_ImVec2_erase ( self_ : * mut ImVector_ImVec2 , it : * const ImVec2 ) -> * mut ImVec2 ; } extern "C" { pub fn ImVector_float_eraseTPtr ( self_ : * mut ImVector_float , it : * const f32 , it_last : * const f32 ) -> * mut f32 ; } extern "C" { pub fn ImVector_ImWchar_eraseTPtr ( self_ : * mut ImVector_ImWchar , it : * const ImWchar , it_last : * const ImWchar ) -> * mut ImWchar ; } extern "C" { pub fn ImVector_ImFontConfig_eraseTPtr ( self_ : * mut ImVector_ImFontConfig , it : * const ImFontConfig , it_last : * const ImFontConfig ) -> * mut ImFontConfig ; } extern "C" { pub fn ImVector_ImFontGlyph_eraseTPtr ( self_ : * mut ImVector_ImFontGlyph , it : * const ImFontGlyph , it_last : * const ImFontGlyph ) -> * mut ImFontGlyph ; } extern "C" { pub fn ImVector_TextRange_eraseTPtr ( self_ : * mut ImVector_TextRange , it : * const TextRange , it_last : * const TextRange ) -> * mut TextRange ; } extern "C" { pub fn ImVector_CustomRect_eraseTPtr ( self_ : * mut ImVector_CustomRect , it : * const CustomRect , it_last : * const CustomRect ) -> * mut CustomRect ; } extern "C" { pub fn ImVector_ImDrawChannel_eraseTPtr ( self_ : * mut ImVector_ImDrawChannel , it : * const ImDrawChannel , it_last : * const ImDrawChannel ) -> * mut ImDrawChannel ; } extern "C" { pub fn ImVector_char_eraseTPtr ( self_ : * mut ImVector_char , it : * const :: std :: os :: raw :: c_char , it_last : * const :: std :: os :: raw :: c_char ) -> * mut :: std :: os :: raw :: c_char ; } extern "C" { pub fn ImVector_ImTextureID_eraseTPtr ( self_ : * mut ImVector_ImTextureID , it : * const ImTextureID , it_last : * const ImTextureID ) -> * mut ImTextureID ; } extern "C" { pub fn ImVector_ImDrawVert_eraseTPtr ( self_ : * mut ImVector_ImDrawVert , it : * const ImDrawVert , it_last : * const ImDrawVert ) -> * mut ImDrawVert ; } extern "C" { pub fn ImVector_int_eraseTPtr ( self_ : * mut ImVector_int , it : * const :: std :: os :: raw :: c_int , it_last : * const :: std :: os :: raw :: c_int ) -> * mut :: std :: os :: raw :: c_int ; } extern "C" { pub fn ImVector_Pair_eraseTPtr ( self_ : * mut ImVector_Pair , it : * const Pair , it_last : * const Pair ) -> * mut Pair ; } extern "C" { pub fn ImVector_ImFontPtr_eraseTPtr ( self_ : * mut ImVector_ImFontPtr , it : * const * mut ImFont , it_last : * const * mut ImFont ) -> * mut * mut ImFont ; } extern "C" { pub fn ImVector_ImVec4_eraseTPtr ( self_ : * mut ImVector_ImVec4 , it : * const ImVec4 , it_last : * const ImVec4 ) -> * mut ImVec4 ; } extern "C" { pub fn ImVector_ImDrawCmd_eraseTPtr ( self_ : * mut ImVector_ImDrawCmd , it : * const ImDrawCmd , it_last : * const ImDrawCmd ) -> * mut ImDrawCmd ; } extern "C" { pub fn ImVector_ImDrawIdx_eraseTPtr ( self_ : * mut ImVector_ImDrawIdx , it : * const ImDrawIdx , it_last : * const ImDrawIdx ) -> * mut ImDrawIdx ; } extern "C" { pub fn ImVector_ImVec2_eraseTPtr ( self_ : * mut ImVector_ImVec2 , it : * const ImVec2 , it_last : * const ImVec2 ) -> * mut ImVec2 ; } extern "C" { pub fn ImVector_float_erase_unsorted ( self_ : * mut ImVector_float , it : * const f32 ) -> * mut f32 ; } extern "C" { pub fn ImVector_ImWchar_erase_unsorted ( self_ : * mut ImVector_ImWchar , it : * const ImWchar ) -> * mut ImWchar ; } extern "C" { pub fn ImVector_ImFontConfig_erase_unsorted ( self_ : * mut ImVector_ImFontConfig , it : * const ImFontConfig ) -> * mut ImFontConfig ; } extern "C" { pub fn ImVector_ImFontGlyph_erase_unsorted ( self_ : * mut ImVector_ImFontGlyph , it : * const ImFontGlyph ) -> * mut ImFontGlyph ; } extern "C" { pub fn ImVector_TextRange_erase_unsorted ( self_ : * mut ImVector_TextRange , it : * const TextRange ) -> * mut TextRange ; } extern "C" { pub fn ImVector_CustomRect_erase_unsorted ( self_ : * mut ImVector_CustomRect , it : * const CustomRect ) -> * mut CustomRect ; } extern "C" { pub fn ImVector_ImDrawChannel_erase_unsorted ( self_ : * mut ImVector_ImDrawChannel , it : * const ImDrawChannel ) -> * mut ImDrawChannel ; } extern "C" { pub fn ImVector_char_erase_unsorted ( self_ : * mut ImVector_char , it : * const :: std :: os :: raw :: c_char ) -> * mut :: std :: os :: raw :: c_char ; } extern "C" { pub fn ImVector_ImTextureID_erase_unsorted ( self_ : * mut ImVector_ImTextureID , it : * const ImTextureID ) -> * mut ImTextureID ; } extern "C" { pub fn ImVector_ImDrawVert_erase_unsorted ( self_ : * mut ImVector_ImDrawVert , it : * const ImDrawVert ) -> * mut ImDrawVert ; } extern "C" { pub fn ImVector_int_erase_unsorted ( self_ : * mut ImVector_int , it : * const :: std :: os :: raw :: c_int ) -> * mut :: std :: os :: raw :: c_int ; } extern "C" { pub fn ImVector_Pair_erase_unsorted ( self_ : * mut ImVector_Pair , it : * const Pair ) -> * mut Pair ; } extern "C" { pub fn ImVector_ImFontPtr_erase_unsorted ( self_ : * mut ImVector_ImFontPtr , it : * const * mut ImFont ) -> * mut * mut ImFont ; } extern "C" { pub fn ImVector_ImVec4_erase_unsorted ( self_ : * mut ImVector_ImVec4 , it : * const ImVec4 ) -> * mut ImVec4 ; } extern "C" { pub fn ImVector_ImDrawCmd_erase_unsorted ( self_ : * mut ImVector_ImDrawCmd , it : * const ImDrawCmd ) -> * mut ImDrawCmd ; } extern "C" { pub fn ImVector_ImDrawIdx_erase_unsorted ( self_ : * mut ImVector_ImDrawIdx , it : * const ImDrawIdx ) -> * mut ImDrawIdx ; } extern "C" { pub fn ImVector_ImVec2_erase_unsorted ( self_ : * mut ImVector_ImVec2 , it : * const ImVec2 ) -> * mut ImVec2 ; } extern "C" { pub fn ImVector_float_insert ( self_ : * mut ImVector_float , it : * const f32 , v : f32 ) -> * mut f32 ; } extern "C" { pub fn ImVector_ImWchar_insert ( self_ : * mut ImVector_ImWchar , it : * const ImWchar , v : ImWchar ) -> * mut ImWchar ; } extern "C" { pub fn ImVector_ImFontConfig_insert ( self_ : * mut ImVector_ImFontConfig , it : * const ImFontConfig , v : ImFontConfig ) -> * mut ImFontConfig ; } extern "C" { pub fn ImVector_ImFontGlyph_insert ( self_ : * mut ImVector_ImFontGlyph , it : * const ImFontGlyph , v : ImFontGlyph ) -> * mut ImFontGlyph ; } extern "C" { pub fn ImVector_TextRange_insert ( self_ : * mut ImVector_TextRange , it : * const TextRange , v : TextRange ) -> * mut TextRange ; } extern "C" { pub fn ImVector_CustomRect_insert ( self_ : * mut ImVector_CustomRect , it : * const CustomRect , v : CustomRect ) -> * mut CustomRect ; } extern "C" { pub fn ImVector_ImDrawChannel_insert ( self_ : * mut ImVector_ImDrawChannel , it : * const ImDrawChannel , v : ImDrawChannel ) -> * mut ImDrawChannel ; } extern "C" { pub fn ImVector_char_insert ( self_ : * mut ImVector_char , it : * const :: std :: os :: raw :: c_char , v : :: std :: os :: raw :: c_char ) -> * mut :: std :: os :: raw :: c_char ; } extern "C" { pub fn ImVector_ImTextureID_insert ( self_ : * mut ImVector_ImTextureID , it : * const ImTextureID , v : ImTextureID ) -> * mut ImTextureID ; } extern "C" { pub fn ImVector_ImDrawVert_insert ( self_ : * mut ImVector_ImDrawVert , it : * const ImDrawVert , v : ImDrawVert ) -> * mut ImDrawVert ; } extern "C" { pub fn ImVector_int_insert ( self_ : * mut ImVector_int , it : * const :: std :: os :: raw :: c_int , v : :: std :: os :: raw :: c_int ) -> * mut :: std :: os :: raw :: c_int ; } extern "C" { pub fn ImVector_Pair_insert ( self_ : * mut ImVector_Pair , it : * const Pair , v : Pair ) -> * mut Pair ; } extern "C" { pub fn ImVector_ImFontPtr_insert ( self_ : * mut ImVector_ImFontPtr , it : * const * mut ImFont , v : * mut ImFont ) -> * mut * mut ImFont ; } extern "C" { pub fn ImVector_ImVec4_insert ( self_ : * mut ImVector_ImVec4 , it : * const ImVec4 , v : ImVec4 ) -> * mut ImVec4 ; } extern "C" { pub fn ImVector_ImDrawCmd_insert ( self_ : * mut ImVector_ImDrawCmd , it : * const ImDrawCmd , v : ImDrawCmd ) -> * mut ImDrawCmd ; } extern "C" { pub fn ImVector_ImDrawIdx_insert ( self_ : * mut ImVector_ImDrawIdx , it : * const ImDrawIdx , v : ImDrawIdx ) -> * mut ImDrawIdx ; } extern "C" { pub fn ImVector_ImVec2_insert ( self_ : * mut ImVector_ImVec2 , it : * const ImVec2 , v : ImVec2 ) -> * mut ImVec2 ; } extern "C" { pub fn ImVector_float_contains ( self_ : * const ImVector_float , v : f32 ) -> bool ; } extern "C" { pub fn ImVector_ImWchar_contains ( self_ : * const ImVector_ImWchar , v : ImWchar ) -> bool ; } extern "C" { pub fn ImVector_char_contains ( self_ : * const ImVector_char , v : :: std :: os :: raw :: c_char ) -> bool ; } extern "C" { pub fn ImVector_int_contains ( self_ : * const ImVector_int , v : :: std :: os :: raw :: c_int ) -> bool ; } extern "C" { pub fn ImVector_float_index_from_ptr ( self_ : * const ImVector_float , it : * const f32 ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn ImVector_ImWchar_index_from_ptr ( self_ : * const ImVector_ImWchar , it : * const ImWchar ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn ImVector_ImFontConfig_index_from_ptr ( self_ : * const ImVector_ImFontConfig , it : * const ImFontConfig ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn ImVector_ImFontGlyph_index_from_ptr ( self_ : * const ImVector_ImFontGlyph , it : * const ImFontGlyph ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn ImVector_TextRange_index_from_ptr ( self_ : * const ImVector_TextRange , it : * const TextRange ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn ImVector_CustomRect_index_from_ptr ( self_ : * const ImVector_CustomRect , it : * const CustomRect ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn ImVector_ImDrawChannel_index_from_ptr ( self_ : * const ImVector_ImDrawChannel , it : * const ImDrawChannel ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn ImVector_char_index_from_ptr ( self_ : * const ImVector_char , it : * const :: std :: os :: raw :: c_char ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn ImVector_ImTextureID_index_from_ptr ( self_ : * const ImVector_ImTextureID , it : * const ImTextureID ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn ImVector_ImDrawVert_index_from_ptr ( self_ : * const ImVector_ImDrawVert , it : * const ImDrawVert ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn ImVector_int_index_from_ptr ( self_ : * const ImVector_int , it : * const :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn ImVector_Pair_index_from_ptr ( self_ : * const ImVector_Pair , it : * const Pair ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn ImVector_ImFontPtr_index_from_ptr ( self_ : * const ImVector_ImFontPtr , it : * const * mut ImFont ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn ImVector_ImVec4_index_from_ptr ( self_ : * const ImVector_ImVec4 , it : * const ImVec4 ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn ImVector_ImDrawCmd_index_from_ptr ( self_ : * const ImVector_ImDrawCmd , it : * const ImDrawCmd ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn ImVector_ImDrawIdx_index_from_ptr ( self_ : * const ImVector_ImDrawIdx , it : * const ImDrawIdx ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn ImVector_ImVec2_index_from_ptr ( self_ : * const ImVector_ImVec2 , it : * const ImVec2 ) -> :: std :: os :: raw :: c_int ; } extern "C" { 
 ///hand written functions 
 pub fn igLogText ( fmt : * const :: std :: os :: raw :: c_char , ... ) ; } extern "C" { pub fn ImGuiTextBuffer_appendf ( buffer : * mut ImGuiTextBuffer , fmt : * const :: std :: os :: raw :: c_char , ... ) ; } extern "C" { pub fn igGET_FLT_MAX ( ) -> f32 ; } extern "C" { pub fn igColorConvertRGBtoHSV ( r : f32 , g : f32 , b : f32 , out_h : * mut f32 , out_s : * mut f32 , out_v : * mut f32 ) ; } extern "C" { pub fn igColorConvertHSVtoRGB ( h : f32 , s : f32 , v : f32 , out_r : * mut f32 , out_g : * mut f32 , out_b : * mut f32 ) ; } extern "C" { pub fn ImVector_ImWchar_create ( ) -> * mut ImVector_ImWchar ; } extern "C" { pub fn ImVector_ImWchar_Init ( p : * mut ImVector_ImWchar ) ; } extern "C" { pub fn ImVector_ImWchar_UnInit ( p : * mut ImVector_ImWchar ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct __crt_locale_data { pub _address : u8 , } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct __crt_multibyte_data { pub _address : u8 , } pub type __builtin_va_list = * mut :: std :: os :: raw :: c_char ;